<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DasLogic</name>
    </assembly>
    <members>
        <member name="M:VLF.DAS.Logic.TxtMsgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.TxtMsgs.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.TxtMsgs.AddTextMsg(VLF.CLS.Def.CMFIn,System.Int16)">
            <summary>
                  add latitude/longitude info for every message
            </summary>
            <param name="cmfIn"></param>
            <param name="txtMsgType"></param>
            <param name="msgDirection"></param>
            <param name="userId"></param>
            <param name="strAck"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.TxtMsgs.AddTextMsg(System.Int32,System.DateTime,System.Int16,System.String,System.Int16,System.Int32,System.String)">
            <summary>
            Add new text message
            </summary>
            <exception cref="!:DASAppDataAlreadyExistsException">Throws DASAppDataAlreadyExistsException information already exist.</exception>
            <exception cref="!:DASException">Throws DASException in all other error cases.</exception>
            <returns> current message id or -1 in case of error</returns>
        </member>
        <member name="M:VLF.DAS.Logic.TxtMsgs.GetMDTInfoByTypeId(System.Int32)">
            <summary>
            Get MDT Manufacturer and Model
            </summary>
            <param name="MdtTypeId"></param>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.Logic.Vehicle">
            <summary>
            Provides interface to vehicle functionality in database
            </summary>
            <summary>
            Vehicle Services Interface
            </summary>
            <summary>
            Vehicle Maintenance Interface - obsolete, not in use
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleSensorsInfoStruct(System.String)">
            <summary>
            Get vehicle sensors information by license plate
            </summary>
            <param name="licensePlate"></param>
            <returns>Structure [SensorId][SensorName][SensorAction][AlarmLevel]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleSensorsInfoStruct(System.Int32)">
            <summary>
            Get vehicle sensors information by box id 
            </summary>
            <param name="boxID"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>Structure [SensorId][SensorName][SensorAction][AlarmLevel]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleSensorsInfo(System.String)">
            <summary>
            Get vehicle sensors information by license plate
            </summary>
            <remarks>
            TableName	= "VehicleSensorsInfo"
            DataSetName = "Vehicle"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <param name="licensePlate"></param>
            <returns>DataSet [SensorId][SensorName][SensorAction][AlarmLevel]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleSensorsInfo(System.Int32)">
            <summary>
            Get vehicle sensors information by box id 
            </summary>
            <param name="boxID"></param>
            <remarks>
            TableName	= "VehicleSensorsInfo"
            DataSetName = "Vehicle"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [SensorId][SensorName][SensorAction][AlarmLevelOn][AlarmLevelOff]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleOutputsInfoStruct(System.Int32,System.Int32)">
            <summary>
            Get vehicle outputs information by box id 
            </summary>
            <param name="boxID"></param>
            <param name="userId"></param>
            <returns>Structure [OutputId][OutputName][OutputAction]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleOutputsInfo(System.Int32,System.Int32)">
            <summary>
            Get vehicle outputs information by box id 
            </summary>
            <param name="boxID"></param>
            <param name="userId"></param>
            <remarks>
            TableName	= "VehicleOutputsInfo"
            DataSetName = "Vehicle"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [OutputId][OutputName][OutputAction]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleOutputsInfoStruct(System.String,System.Int32)">
            <summary>
            Get vehicle outputs information from  by licence plate and user id
            </summary>
            <param name="licensePlate"></param>
            <param name="userId"></param>
            <returns>Structure [OutputId][OutputName][OutputAction]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleOutputsInfo(System.String,System.Int32)">
            <summary>
            Get vehicle outputs information by licence plate and user id
            </summary>
            <param name="licensePlate"></param>
            <param name="userId"></param>
            <remarks>
            TableName	= "VehicleOutputsInfo"
            DataSetName = "Vehicle"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [OutputId][OutputName][OutputAction]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleCommandsInfo(System.Int32,System.Int32)">
            <summary>
            Get vehicle commands information by box Id and user id
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <remarks>
            TableName	= "VehicleCommandsInfo"
            DataSetName = "Vehicle"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [BoxCmdOutTypeId],[BoxCmdOutTypeName],[Rules],[BoxProtocolTypeId],[BoxProtocolTypeName],[ChPriority]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetCommandProtocolTypesInfo(System.Int32,System.Int32,System.Int16)">
            <summary>
            Retrieves all supported protocol types for current command
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <param name="commandTypeId"></param>
            <returns>DataSet [BoxProtocolTypeId],[BoxProtocolTypeName],[ChPriority]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleCommandsInfoStruct(System.String,System.Int32)">
            <summary>
            Get vehicle commands information by license plate and user id
            </summary>
            <param name="licensePlate"></param>
            <param name="userId"></param>
            <returns>Structure [BoxCmdOutTypeId], [BoxCmdOutTypeName], [Rules]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleCommandsInfo(System.String,System.Int32)">
            <summary>
            Get vehicle commands information by license plate and user id
            </summary>
            <param name="licensePlate"></param>
            <param name="userId"></param>
            <remarks>
            TableName	= "VehicleCommandsInfo"
            DataSetName = "Vehicle"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [BoxCmdOutTypeId], [BoxCmdOutTypeName], [Rules]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleCommandsInfoStruct(System.Int32,System.Int32)">
            <summary>
            Get vehicle commands information by license plate and user id
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <returns>Structure [BoxCmdOutTypeId], [BoxCmdOutTypeName], [Rules]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetActiveVehicleCfgInfo(System.Int64)">
            <summary>
            Gets vehicle active assignment configuration information
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [Description],[BoxId],[FwId],[FwName],[FwDateReleased],[CommModeId],[BoxProtocolTypeId],[FwTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.AddVehicle(VLF.CLS.Def.Structures.VehicInfo,VLF.CLS.Def.Structures.VehicAssign,System.Int32)">
            <summary>
            Add new Vehicle.
            	- Add new vehicle information into vlfVehicleInfo table.
            	- Assign new vehicle with user id, box and license plate (vlfVehicleAssignment table).
            	- Backup information into vlfVehicleAssignmentHst table.
            </summary>
            <param name="vehicInfo"></param>
            <param name="vehicAssign"></param>
            <param name="organizationId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if box and vehicle do no assigned to same organization.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleAdditionalInfo(System.Int64,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Updates vehicle additional information.
            </summary>
            <param name="vehicleId"></param>
            <param name="field1"></param>
            <param name="field2"></param>
            <param name="field3"></param>
            <param name="field4"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if vehicle does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.AssignVehicle(VLF.CLS.Def.Structures.VehicAssign)">
            <summary>
            Add new Vehicle.
            	- Assign new vehicle with box and license plate (vlfVehicleAssignment table).
            	- Backup information into vlfVehicleAssignmentHst table.
            </summary>
            <param name="vehicAssign"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with same datetime alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.AssignVehicleToBoxAndFleet(VLF.CLS.Def.Structures.VehicAssign)">
            <summary>
            Assign existing Vehicle to box and default fleet
            	- Assign new vehicle to box and license plate (vlfVehicleAssignment table).
            	- Assign new vehicle to a default fleet.
            	- Backup information into vlfVehicleAssignmentHst table.
            </summary>
            <param name="vehicAssign"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with same datetime alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.DeleteActiveVehicleAssignmentByLicensePlate(System.String)">
            <summary>
            Delete vehicle from the system
            </summary>
            <remarks>
            1. Unassign vehicle from all fleets
            2. Unassign driver from the vehicle
            3. Save old driver/license plate assignment to the history
            4. Delete old vehicle assignment
            5. Save old assignment into the history 
            </remarks>
            <param name="licensePlate"></param>
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.DeleteActiveVehicleAssignment(System.Int32,System.Int32,System.String)">
            <summary>
            Delete vehicle from the system
            </summary>
            <remarks>
            1. Unassign vehicle from all fleets
            2. Unassign driver from the vehicle
            3. Save old driver/license plate assignment to the history
            4. Delete old vehicle assignment
            5. Save old assignment into the history 
            </remarks>
            <param name="userId"></param>
            <param name="boxId"></param>
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.DeleteAllActiveVehiclesAssignments">
            <summary>
            	- Delete assign vehicle by license plate (vlfVehicleAssignment table).
            	- Backup information into vlfVehicleAssignmentHst table.
            </summary>
            <remarks>Note: This method should call only on full system cleanup.</remarks>
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetAllActiveVehiclesLicencePlates">
            <summary>
            Retrieves all assigned vehicles license plates.
            </summary>
            <returns>ArrayList</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetAllVehiclesActiveAssignments(System.Int32)">
            <summary>
            Get all Vehicles active assignment information by license plate as dataset
            </summary>
            <remarks>
            TableName	= "AllActiveVehiclesAssignments"
            DataSetName = "Vehicle"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in exception cases.</exception>
            <returns>DataSet [LicensePlate][BoxId][VehicleId]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetAllVehiclesHstAssignments">
            <summary>
            Get all Vehicles active assignment information by license plate as dataset
            </summary>
            <remarks>
            TableName	= "AllVehiclesHistoryAssignments"
            DataSetName = "Vehicle"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in exception cases.</exception>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetAllUnassignedVehiclesInfo(System.Int32)">
            <summary>
            Returns all unassigned vehicles information. 
            </summary>
            <returns>DataSet [VehicleId],[VinNum],[MakeModelId],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleActiveAssignmentByLicensePlate(System.String)">
            <summary>
            Get vehicle active assignment information by license plate
            In case of empty result returns null
            </summary>
            <remarks>
            TableName	= "VehicleActiveAssignment"
            DataSetName = "Vehicle"
            </remarks>
            <param name="licensePlate"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleActiveAssignmentByVehicleId(System.Int64)">
            <summary>
            Get vehicle active assignment information by vehicleId
            In case of empty result returns null
            </summary>
            <remarks>
            TableName	= "VehicleActiveAssignment"
            DataSetName = "Vehicle"
            </remarks>
            <param name="vehicleId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleActiveAssignmentByBoxId(System.Int32)">
            <summary>
            Get vehicle active assignment information by box id as dataset
            In case of empty result returns null
            </summary>
            <remarks>
            TableName	= "VehicleActiveAssignment"
            DataSetName = "Vehicle"
            </remarks>
            <param name="boxId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetBoxIdByLicensePlate(System.String)">
            <summary>
            Retrieves box id by license plate
            </summary>
            <param name="licensePlate"></param>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetBoxIDByVehicleId(System.Int64)">
            <summary>
            Retrieves box id by vehicleId
            </summary>
            <param name="vehicleId"></param>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetBoxIdByVehicleDescription(System.String,System.Int32)">
            <summary>
            Retrieves box id by vehicle description
            </summary>
            <param name="vehicleDescription">vehicle description</param>
            <param name="orgid">Organization id</param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetBoxChannelsByVehicleDescription(System.String,System.Int32)">
            <summary>
            Retrieves box channels response time by vehicle description
            </summary>
            <param name="vehicleDescription">vehicle description</param>
            <param name="orgid">Organization id</param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleIdByLicensePlate(System.String)">
            <summary>
            Retrieves vehicle id by license plate
            </summary>
            <param name="licensePlate"></param>
            <returns>Int64</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleIdByBoxId(System.Int32)">
            <summary>
            Retrieves vehicle id by boxId
            </summary>
            <param name="boxId"></param>
            <returns>Int64</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetLicensePlateByBox(System.Int32)">
            <summary>
            Retrieves license plate by box id 
            </summary>
            <param name="boxId"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetLicensePlateByVehicleId(System.Int64)">
            <summary>
            Retrieves license plate by vehicle Id
            </summary>
            <param name="vehicleId"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.IsActiveByBoxId(System.Int32)">
            <summary>
            Check active vehicle assignment by box id
            If exists return true, otherwise return false
            </summary>
            <param name="boxId"></param>
            <returns>bool</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.IsActiveByLicensePlate(System.String)">
            <summary>
            Check active vehicle assignment by license plate
            If exists return true, otherwise return false
            </summary>
            <param name="licensePlate"></param>
            <returns>bool</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.AddGeozone(System.Int64,System.Int16,System.Int16)">
            <summary>
            Add new geozone to the vehicle.
            </summary>
            <param name="vehicleId"></param>
            <param name="geozoneId"></param>
            <param name="severityId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if geozone for specific organization already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.SetGeozoneSeverity(System.Int32,System.Int64,System.Int16,System.Int16)">
            <summary>
            Set geozone severity to the vehicle.
            </summary>
            <param name="organizationId"></param>
            <param name="vehicleId"></param>
            <param name="geozoneId"></param>
            <param name="severityId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.DeleteAllGeozones(System.Int64)">
            <summary>
            Deletes all geozones related to specific vehicle.
            </summary>
            <returns>Rows affected</returns>
            <param name="vehicleId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if vehicle does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.DeleteGeozoneFromVehicle(System.Int64,System.Int16)">
            <summary>
            Deletes geozone from vehicle.
            </summary>
            <param name="vehicleId"></param>
            <param name="geozoneId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetAllAssignedToVehicleGeozonesInfo(System.Int64)">
            <summary>
            Retrieves all assigned to vehicle geozones info
            </summary>
            <returns>
            DataSet [VehicleId],[GeozoneNo],[SeverityId],[OrganizationId],[GeozoneId],
            [GeozoneName],[Type],[GeozoneType],[SeverityId],[Description],[BoxId]
            </returns>
            <param name="vehicleId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetMaxGeozonesByVehicleId(System.Int64)">
            <summary>
            Retrieves vehicle max geozones
            </summary>
            <returns>int</returns>
            <param name="vehicleId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetAllUnassignedToVehicleGeozonesInfo(System.Int64)">
            <summary>
            Retrieves all unassigned to vehicle geozones info
            </summary>
            <returns>
            DataSet [GeozoneNo],[OrganizationId],[GeozoneId],[GeozoneName],[Type],
            [GeozoneType],[SeverityId],[Description]
            </returns>
            <param name="vehicleId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetGeozoneInformation(System.Int64,System.Int16)">
            <summary>
            Retrieves vehicle geozones information
            </summary>
            <returns>
            DataSet [VehicleId],[GeozoneNo],[SeverityId],[OrganizationId],[GeozoneId],
            [GeozoneName],[Latitude],[Longitude],[Type],[SeverityId],
            [Description]
            </returns>
            <param name="vehicleId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetAllAssignedVehiclesInfoToGeozone(System.Int32,System.Int16)">
            <summary>
            Retrieves all assigned vehicles info to geozone
            </summary>
            <returns>
            DataSet [VehicleId],[Description]
            </returns>
            <param name="organizationId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetAllUnasignedVehiclesInfoToGeozone(System.Int32,System.Int16)">
            <summary>
            Retrieves all unassigned vehicles info to geozone
            </summary>
            <returns>
            DataSet [VehicleId],[Description]
            </returns>
            <param name="organizationId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetGeozoneInfo(System.Int32,System.Int16)">
            <summary>
            Retrieves geozone info by organization id and geozone Id 
            </summary>
            <returns>
            DataSet [GeozoneNo],[OrganizationId],[GeozoneId],[GeozoneName],[Type],
            [GeozoneType],[SeverityId],[Description]
            [Email],[TimeZone],[DayLightSaving],[FormatType],[Notify],[Warning],[Critical]</returns>
            <param name="boxId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.DeleteVehicle(System.Int64)">
            <summary>
            Delete vehicle from the system
            </summary>
            <remarks>
            1. Unassign vehicle from all fleets
            2. Unassign driver from the vehicle
            3. Save old driver/license plate assignment to the history
            4. Delete old vehicle assignment
            5. Save old assignment into the history 
            </remarks>
            <param name="vehicleId"></param>
            <comment> changed to NO DELETE sensors/outputs/settings for a boxID - 2006/08/18</comment>
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.AddVehicleWorkingHours(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add new vehicle info.
            </summary>
            <param name="vehicleId"></param>
            <param name="weekdayStart"></param>
            <param name="weekdayEnd"></param>
            <param name="weekendStart"></param>
            <param name="weekendEnd"></param>
            <returns>new vehicle id</returns>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if vehicle does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.DeleteVehicleWorkingHours(System.Int64)">
            <summary>
            Deletes vehicle working hours
            </summary>
            <param name="vehicleId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleWorkingHours(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates vehicle working hours.
            </summary>
            <param name="vehicleId"></param>
            <param name="weekdayStart"></param>
            <param name="weekdayEnd"></param>
            <param name="weekendStart"></param>
            <param name="weekendEnd"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if vehicle does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleWorkingHours(System.Int64)">
            <summary>
            Returns vehicle working hours. 
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [VehicleId],[WeekdayStart],[WeekdayEnd],[WeekendStart],[WeekendEnd]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.ChangeVehicleInfo(VLF.CLS.Def.Structures.VehicInfo,System.Int64,System.String,System.Int32)">
            <summary>
            Update Vehicle and vehicle assignment.
            </summary>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if vehicle assignment does not exist</exception>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box and vehicle do no assigned to same organization.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <param name="vehicInfo"></param>
            <param name="vehicleId"></param>
            <param name="newLicensePlate"></param>
            <param name="newBoxId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleInfo(VLF.CLS.Def.Structures.VehicInfo,System.Int64)">
            <summary>
            Update Vehicle.
            </summary>
            <param name="vehicInfo"></param>
            <param name="vehicleId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetAllVehiclesInfo">
            <summary>
            Get all Vehicles information as dataset
            </summary>
            <remarks>
            TableName	= "AllVehiclesInformation"
            DataSetName = "Vehicle"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeModelId],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description],[CostPerMile]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleAdditionalInfo(System.Int64)">
            <summary>
            Returns vehicle additional information. 
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [VehicleId],[Field1],[Field2],[Field3],[Field4]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleInfoByLicensePlate(System.String)">
            <summary>
            Returns vehicle information by license plate. 
            </summary>
            <remarks>
            TableName	= "VehicleInformation"
            DataSetName = "Vehicle"
            </remarks>
            <param name="licensePlate"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeModelId],
            [MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],
            [Description],[CostPerMile],[OrganizationId],[IconTypeId],[IconTypeName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleInfoByVehicleId(System.Int64)">
            <summary>
            Returns vehicle information by vehicle id. 
            </summary>
            <remarks>
            TableName	= "VehicleInformation"
            DataSetName = "Vehicle"
            </remarks>
            <param name="vehicleId"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeModelId],
            [MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],
            [Description],[CostPerMile],[OrganizationId],[IconTypeId],[IconTypeName],[Email]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleInfoByBoxId(System.Int32)">
            <summary>
            Returns vehicle information by box id. 
            </summary>
            <remarks>
            TableName	= "VehicleInformation"
            DataSetName = "Vehicle"
            </remarks>
            <param name="boxId"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeModelId],
            [MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],
            [Description],[CostPerMile],[OrganizationId],[IconTypeId],[IconTypeName]
            [Email],[TimeZone],[DayLightSaving],[FormatType],[Notify],[Warning],[Critical],
            [VehicleTypeId]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetStateProvince(System.String)">
            <summary>
            Get state/province by license plate
            </summary>
            <param name="licensePlate"></param>
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.SetStateProvince(System.String,System.String)">
            <summary>
            Set new State/Province.
            </summary>
            <param name="licensePlate"></param>
            <param name="stateProvince"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetCostPerMile(System.String)">
            <summary>
            Get cost per mile by license plate
            </summary>
            <param name="licensePlate"></param>
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.SetCostPerMile(System.String,System.Double)">
            <summary>
            Set new cost per mile.
            </summary>
            <param name="licensePlate"></param>
            <param name="costPerMile"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleLastStreetAddress(System.Int32)">
            <summary>
            Get box last street address
            </summary>
            <param name="boxId"></param>
            <returns>street address</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.DeleteOrganizationVehicles(System.Int32)">
            <summary>
            Delete all organization vehicles
            </summary>
            <param name="orgId" type="int">Organization ID</param>
            <returns>Rows affected</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicle(System.Int32,System.Data.DataRow)">
            <summary>
            Update vehicle info from a datarow
            </summary>
            <param name="orgId">Organization Id</param>
            <param name="drVehicle">Vehicles data: 
            [Description, Vin, License, Vehicle_Type, Make, Model, Year, Color, Box Id, Field1, Field2, Field3, Field4]</param>
            <returns>Number of rows updated</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicle(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int16,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Update vehicle info
            </summary>
            <param name="orgId"></param>
            <param name="boxId"></param>
            <param name="vin"></param>
            <param name="plate"></param>
            <param name="description"></param>
            <param name="vehicleType"></param>
            <param name="year"></param>
            <param name="make"></param>
            <param name="model"></param>
            <param name="color"></param>
            <param name="field1"></param>
            <param name="field2"></param>
            <param name="field3"></param>
            <param name="field4"></param>
            <returns>Number of rows updated</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetMakeModelId(System.Int32,System.Int32)">
            <summary>
            Get MakeModelId
            </summary>
            <param name="makeId">Make Id</param>
            <param name="modelId">Model Id</param>
            <returns>MakeModelId</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetMakeModelId(System.String,System.String)">
            <summary>
            Get MakeModelId
            </summary>
            <param name="makeName">Make name</param>
            <param name="modelName">Model name</param>
            <returns>MakeModelId</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleInfoByDescription(System.String,System.Boolean)">
            <summary>
            Get VehicleInfo By Description
            </summary>
            <param name="description">Vehicle Description</param>
            <param name="freeText">True if free text search, false if exact search</param>
            <returns>DataSet [VehicleId, Description, BoxId, LicensePlate, OrganizationId, OrganizationName, FleetId, FleetName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleLastKnownPositionInfoByBoxId(System.Int32,System.Int32,System.String)">
            <summary>
            Get Vehicle Last Known Position Info By BoxId
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.AddVehicleService(System.Int32,System.Int64,System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Add new Vehicle Service
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="serviceId"></param>
            <param name="operationTypeId"></param>
            <param name="notificationId"></param>
            <param name="frequency"></param>
            <param name="serviceValue"></param>
            <param name="serviceInterval"></param>
            <param name="endValue"></param>
            <param name="email"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleService(System.Int32,System.Int32,System.Int64,System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Update Vehicle Service
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="serviceId"></param>
            <param name="operationTypeId"></param>
            <param name="notificationId"></param>
            <param name="frequency"></param>
            <param name="serviceValue"></param>
            <param name="serviceInterval"></param>
            <param name="endValue"></param>
            <param name="email"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.DeleteVehicleServices(System.Int32,System.Int64)">
            <summary>
            Delete all Vehicle Services
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.DeleteVehicleService(System.Int32,System.Int64,System.Int32)">
            <summary>
            Delete Vehicle Service
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="serviceId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.CloseVehicleService(System.Int32,System.Int64,System.Int32)">
            <summary>
            Close Vehicle Service
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="serviceId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.CloseVehicleService_Extended(System.Int32,System.Int64,System.Int32,System.Int32,System.Int16,System.String)">
            <summary>
            Close Vehicle Service Extended
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="serviceId"></param>
            <param name="serviceValue"></param>
            <param name="closeType"></param>
            <param name="comments"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetOperationTypes">
            <summary>
            Get Operation Types
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleServices(System.Int64,System.Int16)">
            <summary>
            Get all Vehicle Services
            </summary>
            <param name="vehicleId"></param>
            <param name="servicesFlag">Flag: 0, 1, 2</param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleServices(System.Int64,System.Int16,System.Int16)">
            <summary>
            Get Vehicle Services by type
            </summary>
            <param name="vehicleId"></param>
            <param name="operTypeId">Odometer - 1, Eng. hrs - 2</param>
            <param name="servicesFlag">Flag: 0, 1, 2</param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleService(System.Int64,System.Int32)">
            <summary>
            Get Vehicle Service
            </summary>
            <param name="vehicleId"></param>
            <param name="serviceId"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.Logic.Vehicle.GetVehicleCurrentServices(System.Int64)" -->
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehiclePastServices(System.Int64)">
            <summary>
                    all vehicle Service entries with StatusID == closed
            </summary>
            <param name="vehicleId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.AddVehicleServiceToHistory(System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Single,System.String)">
            <summary>
            Add Vehicle Service To History table
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="serviceId"></param>
            <param name="serviceDateTime"></param>
            <param name="serviceValue"></param>
            <param name="description">this has maximum 400 characters</param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleServicesHistory(System.Int64)">
            <summary>
            Get Vehicle Services History
            </summary>
            <param name="vehicleId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.AddVehicleMaintenanceInfo(System.Int64,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int16,System.Int16,System.String)">
            <summary>
            Add new vehicle maintenanceinfo.
            </summary>
            <param name="vehicleId"></param>
            <param name="lastSrvOdo"></param>
            <param name="currentOdo"></param>
            <param name="maxSrvInterval"></param>
            <param name="lastSrvEngHrs"></param>
            <param name="currentEngHrs"></param>
            <param name="engHrsSrvInterval"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="nextServiceDescription"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.AddVehicleMaintenanceHst(System.Int64,System.Int32,System.DateTime,System.String,System.Double)">
            <summary>
            Add new vehicle odometer maintenance history.
            </summary>
            <param name="vehicleId"></param>
            <param name="userId"></param>       
            <param name="serviceDateTime"></param>
            <param name="serviceDescription"></param>
            <param name="serviceOdo"></param>
            <returns>true if succeeded, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.AddVehicleEngineMaintenanceHst(System.Int64,System.Int32,System.DateTime,System.String,System.Int32)">
            <summary>
            Add new vehicle engine maintenance history.
            </summary>
            <param name="vehicleId"></param>
            <param name="serviceDateTime"></param>
            <param name="serviceDescription"></param>
            <param name="srvcEngine"></param>
            <returns>true if succeeded, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleMaintenanceInfo(System.Int64)">
            <summary>
            Returns vehicle maintenance information (excluding not existing).
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [BoxId],[VehicleId],[Description],
            [LastSrvOdo],[CurrentOdo],[MaxSrvInterval],
            [LastSrvEngHrs],[CurrentEngHrs],[EngHrsSrvInterval],
            [Email],[TimeZone],[DayLightSaving],[AutoAdjustDayLightSaving],
            [NextServiceDescription],[VehicleTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleMaintenance(System.Int64,System.Boolean)">
            <summary>
            Returns vehicle maintenance information (including not existing).
            </summary>
            <param name="vehicleId"></param>
            <param name="include">True to include not initialized vehicle information</param>
            <returns>DataSet [BoxId],[VehicleId],[Description],
            [LastSrvOdo],[CurrentOdo],[MaxSrvInterval],
            [LastSrvEngHrs],[CurrentEngHrs],[EngHrsSrvInterval],
            [Email],[TimeZone],[DayLightSaving],[AutoAdjustDayLightSaving],
            [NextServiceDescription],[VehicleTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateBoxOdometer(System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="boxId"></param>
            <param name="currentOdo"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.IncrementBoxCurrentEngHrsInfo(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="boxId"></param>
            <param name="currentEngHrs"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleCurrOdoInfo(System.Int64,System.Double)">
            <summary>
            Updates vehicle current Odo information.
            </summary>
            <param name="vehicleId"></param>
            <param name="currentOdo"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleCurrentEngHrsInfo(System.Int64,System.Int32)">
            <summary>
            Updates vehicle current engine hours information.
            </summary>
            <param name="vehicleId"></param>
            <param name="currentEngHrs"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleHoursInfo(System.Int64,System.Int32,System.Int32)">
            <summary>
            Updates vehicle current engine hours + idling hours.
            </summary>
            <param name="vehicleId"></param>
            <param name="currentEngHrs"></param>
            <param name="idlingHours"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleMaintenanceHst(System.Int64,System.DateTime,System.String,System.Double)">
            <summary>
            Updates vehicle current Odo information.
            </summary>
            <param name="vehicleId"></param>
            <param name="serviceDateTime"></param>
            <param name="serviceDescription"></param>
            <param name="serviceOdo"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleMaintenanceInfo(System.Int64,System.Double,System.Double,System.Double,System.String,System.Int32,System.Int16,System.Int16,System.String)">
            <summary>
            Updates vehicle maintenance information + odometer
            </summary>
            <param name="vehicleId"></param>
            <param name="lastSrvOdo"></param>
            <param name="currentOdo"></param>
            <param name="maxSrvInterval"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="nextServiceDescription"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleMaintenanceInfo(System.Int64,System.Double,System.String)">
            <summary>
            Updates vehicle next service description.
            </summary>
            <param name="vehicleId"></param>
            <param name="lastSrvOdo"></param>
            <param name="nextServiceDescription"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleEngineMaintenanceInfo(System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int16,System.Int16,System.String)">
            <summary>
            Updates vehicle maintenance information + engine hours
            </summary>
            <param name="vehicleId"></param>
            <param name="lastSrvOdo"></param>
            <param name="currentOdo"></param>
            <param name="maxSrvInterval"></param>
            <param name="lastSrvEngHrs"></param>
            <param name="currentEngHrs"></param>
            <param name="engHrsSrvInterval"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="nextServiceDescription"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASDbException">Thrown if vehicle is not in the maint. table</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.UpdateVehicleEngineMaintenanceInfo(System.Int64,System.Int32,System.String)">
            <summary>
            Updates vehicle next service description.
            </summary>
            <param name="vehicleId"></param>
            <param name="lastEngine"></param>
            <param name="nextServiceDescription"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Vehicle.GetVehicleMaintenanceHistory(System.Int64,System.Int32)">
            <summary>
            Returns vehicle maintenance information.
            </summary>
            <param name="vehicleId"></param>
            <param name="userId"></param>
            <returns>DataSet [VehicleId],[ServiceDateTime],[ServiceDescription],[ServiceOdo]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.Logic.Vehicle.VehicleServiceStatusType">
            <summary>
            Vehicle Service Status Type
            </summary>
        </member>
        <member name="T:VLF.DAS.Logic.SystemConfig">
            <summary>
            Provides interface to system configuration functionality in database
            </summary>
            <summary>
            Methods for Sensor Profiles configuration
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.#ctor(System.String)">
            <summary>
            Consrtuctor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllConfigInfo">
            <summary>
            Get all configuration information. 
            </summary>
            <returns>DataSet[FwChId],[FwId],[FwName],[ChId],[ChName],[ChPriority],[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.Logic.SystemConfig.IsCompatibleFirmware(System.Int16,System.Int16,System.Int16)" -->
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllPrimaryChannelsByFwId(System.Int16)">
            <summary>
            Get all primary channels by FwId
            </summary>
            <param name="fwId"></param>
            <returns>DataSet [BoxProtocolTypeId],[BoxProtocolTypeName],[CommModeId],[CommModeName],[FwChId],[ChPriority]</returns>
            /// <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllChannelsByFwId(System.Int16)">
            <summary>
            Get all the channels by FwId
            </summary>
            <param name="fwId"></param>
            <returns>DataSet [FwChId], [FwId], [ChId], [ChName], [ChPriority]</returns>
            /// <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllChannelsByFwId(System.Int16,System.Int16)">
            <summary>
            Get all the channels by FwId
            </summary>
            <param name="fwId"></param>
            <param name="chPriority"></param>
            <returns>DataSet [BoxProtocolTypeId],[BoxProtocolTypeName],[CommModeId],[CommModeName],[FwChId],[ChName]</returns>
            /// <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllSecondaryChannelsByFwId(System.Int16)">
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetChannelId(System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="protocolTypeID"></param>
            <param name="commMode"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllChannelsByBoxId(System.Int32)">
            <summary>
                    extract all channels as [FwId] , [ChId], [ChPriority]
            </summary>
            <param name="boxId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllChannelsByFwChId(System.Int16)">
            <summary>
                    extract all channels as [FwId] , [ChId], [ChPriority]
            </summary>
            <param name="fwChId"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.Logic.SystemConfig.GetFirmwareChannelIdByChannels(System.Data.DataSet)" -->
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllSecondaryChannelsByFwChId(System.Int16)">
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllSecondaryChannels(System.Int16,System.Int16)">
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetFirmwareInfo(System.Int16)">
            <summary>
            Get Firmware Information. 
            </summary>
            <param name="fwId"></param>
            <returns>DataSet [FwChId],[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum],[BoxProtocolTypeId],[BoxProtocolTypeName],[CommModeId],[CommModeName],[ChPriority],[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetFirmwareInfoOnly(System.Int16)">
            <summary>
            Get Firmware Information. 
            </summary>
            <param name="fwId"></param>
            <returns>DataSet [FwId],[BoxHwTypeId],[FwName],[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones],[BoxHwTypeName]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllFirmwareInfo(System.Int16)">
            <summary>
            Get box configuration information. 
            </summary>
            <returns>DataSet [FwId],[BoxHwTypeId],[FwName],[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones],[BoxHwTypeName]</returns>
            <param name="selectedFwTypeId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.FirmwareTypes">
            <summary>
            Get all firmware types information. 
            </summary>
            <returns>DataSet[FwTypeId],[FwTypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetConfigInfo(System.Int16)">
            <summary>
            Returns all box configuration. 	
            </summary>
            <param name="fwChId"></param>
            <returns>DataSet [FwChId],[ChPriority],[FwId],[FwName],[ChId],[ChName],[CommModeId],[CommModeName],[BoxProtocolTypeId],[BoxProtocolTypeName],[BoxHwTypeId],[BoxHwTypeName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetConfigInfoByFwId(System.Int16)">
            <summary>
            Returns all box configuration. 	
            </summary>
            <param name="fwChId"></param>
            <returns>DataSet [FwChId],[ChPriority],[FwId],[FwName],[ChId],[ChName],[CommModeId],[CommModeName],[BoxProtocolTypeId],[BoxProtocolTypeName],[BoxHwTypeId],[BoxHwTypeName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetDefCommInfo(System.Int16)">
            <summary>
            Retieves box default communication info. 	
            </summary>
            <param name="fwChId"></param>
            <remarks>
            TableName	= "BoxCommunicationInfo"
            DataSetName = "Box"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
            <returns>DataSet [CommAddressTypeId],[CommAddressTypeName],[CommAddressValue],[FwChId],[BoxHwTypeName],[BoxProtocolTypeId],[CommModeId],[ChId],[ChName],[ChPriority]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetDefaultCommInfo(System.Int16)">
            <summary>
            Retieves short box default communication info
            </summary>
            <param name="fwChId"></param>
            <remarks>
            TableName	= "BoxCommunicationInfo"
            DataSetName = "Box"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
            <returns>DataSet [CommAddressTypeId],[CommAddressTypeName],[CommAddressValue]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetCommModeAddressTypesInfo(System.Int16)">
            <summary>
            Getcommunication address types by communication mode. 
            </summary>
            <param name="commModeId"></param>
            <returns>DataSet [CommAddressTypeId],[CommAddressTypeName]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetProtocolTypesInfoByProtocolGroup(System.Int16)">
            <summary>
            Retrieves Protocol types info by protocol group
            </summary>
            <param name="boxProtocolGroupId"></param>
            <returns>DataSet [BoxProtocolTypeId],[BoxProtocolTypeName],[Assembly],[ClassName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetCommunicationModeName(System.Int16)">
            <summary>
            Retrieves communication mode name by id
            </summary>
            <param name="commModeId"></param>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddCommInfo(System.Int32,System.Int16,System.String)">
            <summary>
            Add new box communication info.
            </summary>
            <param name="boxId"></param>
            <param name="commAddressTypeId"></param>
            <param name="commAddressValue"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASAppDataAlreadyExistsException if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddCommInfo(System.Int32,System.Data.DataSet)">
            <summary>
            Add new box communication info.
            </summary>
            <param name="boxId"></param>
            <param name="dsCommInfo"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASAppDataAlreadyExistsException if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteBox(System.Int32)">
            <summary>
            Delete box.
            </summary>
            <remarks>
            1. Delete all communications info related to the box.
            2. Unassign box from the vehicle (if applicable)
            3. Delete all vehicle assignments from the history related to the box
            4. Delete user-define sensors
            5. Delete user-define outputs
            6. Delete all events related to the box
            6. Delete all history information related to the box
            7. Delete box
            </remarks>
            <param name="boxId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASAppDataAlreadyExistsException if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddFirmware(System.Int16,System.String,System.Int16,System.String,System.String,System.String,System.Int32,System.Int16)">
            <summary>
            Add new firmware.
            </summary>
            <param name="boxHwTypeId"></param>
            <param name="fwName"></param>
            <param name="fwTypeId"></param>
            <param name="fwLocalPath"></param>
            <param name="fwOAPPath"></param>
            <param name="fwDateReleased"></param>
            <param name="maxGeozones"></param>
            <param name="oAPPort"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddFirmware(System.Int16,System.String,System.Int16,System.String,System.String,System.String,System.Int32,System.Int16,System.Int64)">
            <summary>
            Add new firmware overloaded - includes feature mask
            </summary>
            <param name="boxHwTypeId"></param>
            <param name="fwName"></param>
            <param name="fwTypeId"></param>
            <param name="fwLocalPath"></param>
            <param name="fwOAPPath"></param>
            <param name="fwDateReleased"></param>
            <param name="maxGeozones"></param>
            <param name="oAPPort"></param>
            <param name="featureMask"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateFirmwareInfo(System.Int16,System.String,System.String,System.Int32,System.Int16)">
            <summary>
            Update firmware info.
            </summary>
            <param name="fwId"></param>
            <param name="fwLocalPath"></param>
            <param name="fwOAPPath"></param>
            <param name="maxGeozones"></param>
            <param name="oAPPort"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddFirmwareCfg(System.Data.DataTable)">
            <summary>
            Add new firmware configuration
            </summary>
            <param name="tblChannels">Table contains 1 or 2 rows - primary channel(mandatory) and secondary channel</param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>True if configuration was successfully added, otherwise - false</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteFirmware(System.Int16)">
            <summary>
            Delete Fw Id.
            </summary>
            <returns>void</returns>
            <param name="fwId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteFirmwareCfg(System.Int16)">
            <summary>
            Deletes firmware channel
            </summary>
            <param name="chId"></param>
            <param name="fwId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetPrimaryFirmwareChannelInfo(System.Int16,System.Int16)">
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.HardwareTypes">
            <summary>
            Get all hardware types information. 
            </summary>
            <returns>DataSet[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddHardwareType(System.String,System.Int16,System.Int16,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Adds a new hardware type
            </summary>
            <param name="hwTypeName" type="string"></param>
            <param name="maxSensors" type="short"></param>
            <param name="maxOutputs" type="short"></param>
            <param name="listOutputs" type="ArrayList">List of HardwareOutput objects</param>
            <returns>A new int hw type id</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddHardwareType(System.String,System.Int16,System.Int16,System.Collections.ArrayList)">
            <summary>
            Adds a new hardware type
            </summary>
            <param name="hwTypeName" type="string"></param>
            <param name="maxSensors" type="short"></param>
            <param name="maxOutputs" type="short"></param>
            <param name="listOutputs" type="ArrayList">List of HardwareOutput objects</param>
            <returns>A new int hw type id</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateHardwareType(System.Int16,System.String,System.Int16,System.Int16,System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Update a hardware type
            </summary>
            <param name="hwTypeId" type="string"></param>
            <param name="hwTypeName" type="string"></param>
            <param name="maxSensors" type="short"></param>
            <param name="maxOutputs" type="short"></param>
            <param name="listOutputs" type="ArrayList">List of HardwareOutput objects</param>
            <param name="listSensors" type="ArrayList">List of HardwareSensor objects</param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateHardwareType(System.Int16,System.String,System.Int16,System.Int16,System.Collections.ArrayList)">
            <summary>
            Update a hardware type
            </summary>
            <param name="hwTypeId" type="string"></param>
            <param name="hwTypeName" type="string"></param>
            <param name="maxSensors" type="short"></param>
            <param name="maxOutputs" type="short"></param>
            <param name="listOutputs" type="ArrayList">List of HardwareOutput objects</param>
            <param name="listSensors" type="ArrayList">List of HardwareSensor objects</param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteHardwareType(System.Int16)">
            <summary>
            Deletes hardware type with related outputs and sensors
            </summary>
            <param name="hwTypeId" type="short">Hardware Type ID</param>
            <returns>Rows affected</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteHardwareType(System.String)">
            <summary>
            Deletes hardware type with related outputs and sensors
            </summary>
            <param name="hwTypeName" type="string">Hardware Type Name</param>
            <returns>Rows affected</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetDefaultOutputsInfoByHwTypeId(System.Int16)">
            <summary>
            Retrieves output info by Hw type
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>DataSet [OutputId][OutputName][OutputAction]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetOutputsInfo">
            <summary>
            Retrieves all outputs info
            </summary>
            <returns>DataSet [OutputId][OutputName][OutputAction]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetDefaultSensorsInfoByHwTypeId(System.Int16)">
            <summary>
            Retrieves sensors info by box HW type
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>DataSet [SensorId],[SensorName],[SensorAction],[AlarmLevelOn],[AlarmLevelOff]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetSensorsInfo(System.Boolean)">
            <summary>
            Retrieves all sensors info
            </summary>
            <param name="alarms" type="boolean">Include or not default alarm levels on and off</param>
            <returns>DataSet [SensorId][SensorName][SensorAction]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetHwTypeIdByName(System.String)">
            <summary>
            Retrieves box hardware type id by name from "vlfBoxHwType" table
            </summary>
            <param name="boxHwTypeName"></param>
            <returns>short box Hw type Id</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetDclIdList">
            <summary>
            Retrieves list of DCL Id by name from "vlfDcl" table
            </summary>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
            <returns> list of dcl ids as list of short int</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetDclIdByName(System.String)">
            <summary>
            Retrieves DCL Id by name from "vlfDcl" table
            </summary>
            <param name="dclName"></param>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
            <returns>dcl id in as short</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetDclStatusByName(System.String)">
            <summary>
            Retrieves DCL Status by name from "vlfDcl" table
            </summary>
            <param name="dclName"></param>
            <returns>DCL status <see cref="T:VLF.CLS.Def.Enums.ServiceState"/>.</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetDclInfoByStatus(VLF.CLS.Def.Enums.ServiceState)">
            <summary>
            Retrieves DCL ids by service state
            </summary>
            <param name="serviceState"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [DclId],[DclName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddDcl(VLF.CLS.Def.Enums.CommMode,System.Int16,System.String,System.String,VLF.CLS.Def.Enums.ServiceState)">
            <summary>
            Add new DCL type.
            </summary>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>new dcl id</returns>
            <param name="commModeId"></param>
            <param name="boxProtocolGroupId"></param>
            <param name="dclName"></param>
            <param name="description"></param>
            <param name="serviceState"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateDclInfo(System.Int16,VLF.CLS.Def.Enums.CommMode,System.Int16,System.String,VLF.CLS.Def.Enums.ServiceState,System.Int16)">
            <summary>
            Update DCL type info.
            </summary>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>rows affected</returns>
            <param name="dclId"></param>
            <param name="commModeId"></param>
            <param name="boxProtocolGroupId"></param>
            <param name="description"></param>
            <param name="serviceState"></param>
            <param name="pid"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteDcl(System.Int16)">
            <summary>
            Delete dcl by id
            </summary>
            <param name="dclID"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.CleanupAllDclsRelatedInfo">
            <summary>
            Cleanup all dcls related info
            </summary>
            <returns>total number of deleted dcls</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AssignModelToMake(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Assign make to model
            </summary>
            <param name="makeId"></param>
            <param name="modelId"></param>
            <param name="makeName"></param>
            <param name="modelName"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetMakeNameById(System.Int32)">
            <summary>
            Retrieves make name by id from "vlfMake" table
            </summary>
            <param name="makeId"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllMakesNames">
            <summary>
            Retrieves all makes names.
            </summary>
            <returns>ArrayList [string]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllMakesInfo">
            <summary>
            Retrieves all makes information.
            </summary>
            <returns>DataSet [MakeId],[MakeName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetModelNamesByMakeId(System.Int32)">
            <summary>
            Retrieves all model names related to specific make.
            </summary>
            <param name="makeId"></param>
            <returns>ArrayList [string]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetModelsInfoByMakeId(System.Int32)">
            <summary>
            Retrieves all model related to specific make.
            </summary>
            <param name="makeId"></param>
            <returns>DataSet [ModelId],[ModelName],[MakeModelId]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetModelNameById(System.Int32)">
            <summary>
            Retrieves box Protocol type name by id from "vlfModel" table
            </summary>
            <param name="modelId"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllStateProvinces">
            <summary>
            Retrieves all States/Provinces.
            </summary>
            <returns>DataSet [StateProvinceName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllVehicleTypes">
            <summary>
            Retrieves all vehicle types.
            </summary>
            <returns>DataSet [VehicleTypeId],[VehicleTypeName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetIconsInfo">
            <summary>
            Retrieves icons information
            </summary>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [IconTypeId],[IconTypeName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddPreference(System.String,System.String)">
            <summary>
            Add new preference.
            </summary>
            <param name="preferenceName"></param>
            <param name="preferenceRule"></param>
            <returns>int next preference id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if preference alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeletePreferenceByPreferenceName(System.String)">
            <summary>
            Delete existing preference.
            </summary>
            <returns>int</returns>
            <param name="preferenceName"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if preference does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeletePreferenceByPreferenceId(System.Int32)">
            <summary>
            Delete existing preference.
            </summary>
            <returns>int</returns>
            <param name="preferenceId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if preference id does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetPreferenceInfo(System.Int32)">
            <summary>
            Retrieves Preference info
            </summary>
            <returns>DataSet [PreferenceId], [PreferenceName],[PreferenceRule]</returns>
            <param name="preferenceId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllPreferencesInfo">
            <summary>
            Retrieves Preference info
            </summary>
            <returns>DataSet [PreferenceId], [PreferenceName],[PreferenceRule]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddSystemUpdate(System.DateTime,System.String,System.String,VLF.CLS.Def.Enums.SystemUpdateType,VLF.CLS.Def.Enums.AlarmSeverity,System.String,System.Int16)">
            <summary>
            Add new system update
            </summary>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user with this datetime already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateSystemUpdateTable(System.Int32,System.DateTime,System.String,System.String,VLF.CLS.Def.Enums.SystemUpdateType,VLF.CLS.Def.Enums.AlarmSeverity,System.String,System.Int16)">
            <summary>
            update system update table
            </summary>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user with this datetime already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetSystemUpdates(System.Int32,System.DateTime,System.DateTime,VLF.CLS.Def.Enums.SystemUpdateType)">
            <summary>
            Retrieves system updates.
            </summary>
            <returns>DataSet [MsgId],[Msg],[SystemUpdateType],[AlarmLevel]</returns>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="systemUpdateType"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetFullInfoSystemUpdates(System.Int32,System.DateTime,System.DateTime,VLF.CLS.Def.Enums.SystemUpdateType)">
            <summary>
            Retrieves system updates.
            </summary>
            <returns>DataSet [MsgId],[Msg],[SystemUpdateType],[AlarmLevel]</returns>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="systemUpdateType"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetSystemUpdatesByLang(System.Int32,System.DateTime,System.DateTime,VLF.CLS.Def.Enums.SystemUpdateType,System.String)">
            <summary>
            Retrieves system updates.
            </summary>
            <returns>DataSet [MsgId],[Msg],[SystemUpdateType],[AlarmLevel]</returns>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="systemUpdateType"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteSystemUpdate(System.Int32)">
            <summary>
            Delete system update.
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetConfigurationModuleTypesInfo(System.Int16,VLF.CLS.Def.Enums.ConfigurationModuleState)">
            <summary>
            Retrieves configuration module types info
            </summary>
            <returns>DataSet [ModuleId],[ModuleName],[PSW],[IPAddress],[UserName],[Enabled],[MachineName]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
            <param name="typeId"></param>
            <param name="configurationModuleState"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetConfigurationModuleTypeId(System.String)">
            <summary>
            Retrieves configuration module type id
            </summary>
            <param name="moduleTypeName"></param>
            <returns>module id</returns>
            <remarks>If module does not exist, return VLF.CLS.Def.Const.unassignedShortValue,
            otherwise return module id</remarks>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetConfigurationValue(System.Int16,System.Int16,System.String)">
            <summary>
            Retrieves configuration value
            </summary>
            <returns>string [KeyValue]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
            <param name="moduleId"></param>
            <param name="cfgGroupId"></param>
            <param name="keyName"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetModuleConfiguration(System.Int16)">
            <summary>
            Retrieves module configuration
            </summary>
            <param name="moduleId"></param>
            <returns>DataSet [CfgGroupId],[CfgGroupName],[KeyName],[KeyValue]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetModuleConfigurationStructure(System.Int16)">
            <summary>
            Retrieves module configuration structure
            </summary>
            <param name="typeId"></param>
            <returns>DataSet [CfgGroupId],[KeyName],[KeyValue],[CfgGroupName]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetModuleTypeGroups(System.Int16)">
            <summary>
            Retrieves module type groups.
            </summary>
            <param name="typeId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if module already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>DataSet [CfgGroupId],[CfgGroupName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddModule(System.Int16,System.String,System.Boolean,System.Data.DataSet)">
            <summary>
            Add new module.
            </summary>
            <remarks>
            dsModuleSettings structure:
            [CfgGroupId]	short,
            [KeyName]		string,
            [KeyValue]		string
            </remarks>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if module already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="typeId"></param>
            <param name="moduleName"></param>
            <param name="enabled"></param>
            <param name="dsModuleSettings"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateModuleStatus(System.Int16,System.Boolean)">
            <summary>
            Update module status.
            </summary>
            <param name="moduleId"></param>
            <param name="enable"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if module does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateModuleSettings(System.Int16,System.Int16,System.String,System.String)">
            <summary>
            Update module settings.
            </summary>
            <param name="moduleId"></param>
            <param name="cfgGroupId"></param>
            <param name="keyName"></param>
            <param name="keyValue"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if module does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteModule(System.Int16)">
            <summary>
            Delete module and cleanup all module settings.
            </summary>
            <param name="moduleId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetConfigurationModuleTypesInfo">
            <summary>
            Retrieves configuration module types
            </summary>
            <returns>DataSet [TypeId],[TypeName]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetComputerModulesInfo(System.Int16,System.String)">
            <summary>
            Retrieves computer modules information
            </summary>
            <param name="moduleTypeId"></param>
            <param name="computerIp"></param>
            <returns>DataSet [ModuleId],[ModuleName],[Enabled],[TypeId],[TypeName]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
            <remarks>If moduleTypeId==VLF.CLS.Def.Const.unassignedIntValue, 
            then doesn't include moduleTypeId into the filter </remarks>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetConfigParameter(System.String,System.Int16,System.String)">
            <summary>
            Retrieves configuration value
            </summary>
            <param name="moduleName"></param>
            <param name="groupID"></param>
            <param name="paramName"></param>
            <returns>[KeyValue]</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if module name does not exist.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetMapEngines">
            <summary>
            Get All Map Engines
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllMapEnginesInfo">
            <summary>
            Get all map engines info
            </summary>
            <returns>DataSet [MapGroupId],[MapGroupName],[Priority],[MapId],[MapEngineName],[Path],[ExternalPath]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllMapEnginesShortInfo">
            <summary>
            Get all map engines short info
            </summary>
            <returns>DataSet [MapGroupId],[MapGroupName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetGeoCodeEngines">
            <summary>
            Get all geo code engines
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllGeoCodeEnginesInfo">
            <summary>
            Get all GeoCode engines info
            </summary>
            <returns>DataSet [GeoCodeGroupId],[GeoCodeGroupName],[Priority],[GeoCodeId],[GeoCodeEngineName],[Path]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllGeoCodeEnginesShortInfo">
            <summary>
            Get all GeoCode engines short info
            </summary>
            <returns>DataSet [GeoCodeGroupId],[GeoCodeGroupName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetChannelsInfo">
            <summary>
            Retrieves Channels info. 	
            </summary>
            <returns>DataSet [ChId],[ChName],[BoxProtocolTypeId],[CommModeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetCommModesInfo">
            <summary>
            Retrieves Communication Modes info. 	
            </summary>
            <returns>DataSet [CommModeId],[CommModeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.SetDayLightSaving(System.Boolean)">
            <summary>
            Set DayLight Savings.
            </summary>
            <returns>void</returns>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.SetVehicleAutoAdjustDayLightSaving(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Set AutoAdjustDayLightSaving.
            </summary>
            <returns>void</returns>
            <param name="vehicleId"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.SetFleetAutoAdjustDayLightSaving(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set AutoAdjustDayLightSaving.
            </summary>
            <returns>void</returns>
            <param name="fleetId"></param>
            <param name="email"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.SetOrganizationGeozoneAutoAdjustDayLightSaving(System.Int32,System.Int16,System.Boolean,System.Boolean)">
            <summary>
            Set AutoAdjustDayLightSaving.
            </summary>
            <returns>void</returns>
            <param name="organizationId"></param>
            <param name="geozoneId"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddTask(System.Int32,System.DateTime,System.Int32,System.Int16,System.String,System.Int16,System.Int16,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Add new task
            </summary>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Throws DASAppDataAlreadyExistsException information already exist</exception>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all other error cases.</exception>
            <returns> current task id or -1 in case of error</returns>
            <param name="userId"></param>
            <param name="time"></param>
            <param name="boxID"></param>
            <param name="commandID"></param>
            <param name="customProp"></param>
            <param name="protocolType"></param>
            <param name="commMode"></param>
            <param name="transmissionPeriod"></param>
            <param name="transmissionInterval"></param>
            <param name="usingDualMode"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteTask(System.Int64)">
            <summary>
            Delete existing task
            </summary>
            <returns>rows affected</returns>
            <param name="taskId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if task does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.ReScheduledTask(System.Int64,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Reschedule task
            </summary>
            <param name="taskId"></param>
            <param name="transmissionPeriod"></param>
            <param name="transmissionInterval"></param>
            <param name="usingDualMode"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetUserTasks(System.Int32)">
            <summary>
            Get user tasks
            </summary>
            <param name="userId"></param>
            <returns></returns>
            <returns>DataSet [TaskId],[RequestDateTime],[BoxId],[UserId],[BoxCmdOutTypeId],
            [BoxProtocolTypeId],[CommModeId],[TransmissionPeriod],[TransmissionInterval],
            [CustomProp],[LastDateTimeSent],[UsingDualMode],[VehicleId],
            [Description],[LicensePlate]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateTaskLastDateTimeSent(System.Int64,System.DateTime)">
            <summary>
            Update last DateTime sent
            </summary>
            <param name="taskId"></param>
            <param name="lastDateTimeSent"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateScheduledTask(System.Int64,System.Byte,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="taskId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddTaskInHistory(System.Int64,System.DateTime)">
            <summary>
            
            </summary>
            <param name="taskId"></param>
            <param name="lastDateTimeSent"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.InitScheduledTasks">
            <summary>
                    clear the RequestStatus from 
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetCurrentlyScheduledTasks">
            <summary>
            Get currently scheduled tasks
            </summary>
            <returns>DataSet [TaskId],[RequestDateTime],[BoxId],[UserId],[BoxCmdOutTypeId],
            [BoxProtocolTypeId],[CommModeId],[TransmissionPeriod],[TransmissionInterval],
            [CustomProp],[LastDateTimeSent],[UsingDualMode]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.ResetBoxCmdsScheduledDateTime(System.Int32)">
            <summary>
            Reset Box Cmds Scheduled DateTime
            </summary>
            <param name="boxId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetSheduledTasksHistory(System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
                   Retrieve Scheduled task history
            </summary>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <param name="fleetId"></param>
            <param name="boxId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetOrganizationMapUsageInfo(System.Int32,System.Int32,System.Int16,System.Int16)">
            <summary>
            Retrieves organization map usage info.
            </summary>
            <param name="organizationId"></param>
            <param name="mapId"></param>
            <param name="usageYear"></param>
            <param name="usageMonth"></param>
            <returns>DataSet [UserType],[UserName_BoxId],[Map],[StreetAddress],[Totals]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetMapTypes">
            <summary>
            Retrieves map types.
            </summary>
            <returns>DataSet [MapTypeId],[MapTypeName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetGeoCodeEnginesInfo">
            <summary>
            Get all GeoCode engines info
            </summary>
            <returns>DataSet [GeoCodeGroupId],[GeoCodeGroupName],[Priority],[GeoCodeId],[GeoCodeEngineName],[Path]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetBoxGeoCodeGroupId(System.Int32)">
            <summary>
            Retrieves box GeoCode group Id
            </summary>
            <param name="boxId"></param>
            <returns>GeoCode group Id if exist, otherwise VLF.CLS.Def.Const.unassignedIntValue</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetOrganizationGeoCodeGroupId(System.Int32)">
            <summary>
            Retrieves Organization GeoCode group Id
            </summary>
            <param name="boxId"></param>
            <returns>GeoCode group Id if exist, otherwise VLF.CLS.Def.Const.unassignedIntValue</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetBoxGeoCodeEngineInfo(System.Int32)">
            <summary>
            Retrieves box geocode engine id.
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [GeoCodeId],[Path]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetBoxMapEngineInfo(System.Int32)">
            <summary>
            Retrieves box geocode engine id.
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [MapId],[Path],[ExternalPath]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetUserGeoCodeEngineInfo(System.Int32)">
            <summary>
            Retrieves user geocode path
            </summary>
            <param name="userId"></param>
            <returns>Dataset [GeoCodeId],[Path]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetUserGeoCodeGroupId(System.Int32)">
            <summary>
            Retrieves user GeoCode group Id
            </summary>
            <param name="userId"></param>
            <returns>GeoCode group Id if exist, otherwise VLF.CLS.Def.Const.unassignedIntValue</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetUserMapEngineInfo(System.Int32)">
            <summary>
            Retrieves user map info
            </summary>
            <param name="userId"></param>
            <returns>Dataset [MapId],[Path],[ExternalPath]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.CheckBoxUserAuthorization(System.Int32,System.Int32)">
            <summary>
            Chacks box-user authorization
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <returns>true if authorized, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetMsgNotificationRecipientInfo(System.Int32,System.Int16,System.Int16,System.String)">
            <summary>
            Retrieves Communication Modes info. 	
            </summary>
            <returns>DataSet [CommModeId],[CommModeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateFirmwareInfo(System.Int16,System.String,System.String,System.Int32,System.Int16,System.Int64)">
            <summary>
            Overloaded - added features mask field
            </summary>
            <param name="fwId"></param>
            <param name="localPath"></param>
            <param name="oapPath"></param>
            <param name="maxGeozones"></param>
            <param name="oapPort"></param>
            <param name="featuresMask"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetFirmwareInfoFeatures(System.Int16)">
            <summary>
            Get Firmware Information - features mask added
            </summary>
            <param name="fwId"></param>
            <returns>DataSet [FwChId],[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommModeId],[CommModeName],[ChPriority],[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones],[Features]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllFirmware">
            <summary>
            Get all the firmware from the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddSensor(System.Int16,System.Int16,System.String,System.String)">
            <summary>
            Add a new sensor
            </summary>
            <param name="deviceId"></param>
            <param name="deviceTypeId"></param>
            <param name="sensorName"></param>
            <param name="sensorAction"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteSensor(System.Int16)">
            <summary>
            Delete Sensor
            </summary>
            <param name="sensorId">Sensor ID</param>
            <returns>rows deleted</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateSensor(System.Int16,System.String,System.String)">
            <summary>
            Update Sensor
            </summary>
            <param name="sensorId"></param>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateFirmwareAttributes(System.Int16,System.Int64)">
            <summary>
            Update Firmware Attributes
            </summary>
            <param name="fwId"></param>
            <param name="featureMask"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.CreateBoxVehicleAssign(System.Int32,System.Int32,System.Int16,System.Int64,System.Int16,System.Data.DataSet,System.Data.DataSet,System.Data.DataSet,System.Data.DataSet,System.Data.DataSet,VLF.CLS.Def.Structures.VehicInfo,System.String)">
            <summary>
            Create box, vehicle and assign box to the vehicle if vehicle is not null,
            Otherwise unassigned box is created
            </summary>
            <param name="organizationId"></param>
            <param name="boxId"></param>
            <param name="fwChId"></param>
            <param name="featureMask"></param>
            <param name="hwTypeId"></param>
            <param name="dsProtocolMaxMessages"></param>
            <param name="dsCommInfo"></param>
            <param name="dsOutputs"></param>
            <param name="dsSensors"></param>
            <param name="dsMessages"></param>
            <param name="vInfo"></param>
            <param name="licensePlate"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateFirmwareName(System.Int16,System.String)">
            <summary>
            Update Firmware Name - usage MC
            </summary>
            <param name="fwId">Firmware Id</param>
            <param name="fwName">New firmware name</param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.InstallJob_Add(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Add new Install Job
            </summary>
            <param name="xmlData"></param>
            <param name="description"></param>
            <param name="status"></param>
            <param name="modified"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.InstallJob_GetAll">
            <summary>
            Get all install jobs
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.InstallJob_Get(System.Int32)">
            <summary>
            Get install job
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.DeleteSensorProfile(System.Int16)">
            <summary>
            Delete Sensor Profile
            delete row from master table only, detail rows are deleted autom. using cascade deleting
            </summary>
            <param name="profileId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.AddSensorProfile(System.Int16,System.String,System.String,System.Data.DataTable)">
            <summary>
            Add new Sensor Profile
            </summary>
            <param name="hwTypeId"></param>
            <param name="profileName"></param>
            <param name="profileDescription"></param>
            <param name="dtSensors"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetAllSensorProfiles">
            <summary>
            Get all sensor profiles without sensor sets
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetFullSensorProfiles">
            <summary>
            Get all sensor profiles includes sensor sets
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetHwTypeSensorProfiles(System.Int16)">
            <summary>
            Get hardware type profiles include sensor sets
            </summary>
            <param name="hwTypeId">Hardware Type Id</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetSensorProfile(System.Int16)">
            <summary>
            Get Sensor Profile by ID
            </summary>
            <param name="profileId">Profile Id</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetSensorProfile(System.String)">
            <summary>
            Get Sensor Profile by name
            </summary>
            <param name="profileName">Profile Name</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.GetSensorProfileName(System.Int16,System.Data.DataTable)">
            <summary>
            Get Sensor Profile Name from set of sensors and hw type
            </summary>
            <param name="hwTypeId"></param>
            <param name="dtSensors"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateSensorProfileData(System.Int16,System.Data.DataTable)">
            <summary>
            Update profile sensors set only
            </summary>
            <param name="profileId">Profile Id</param>
            <param name="dtSensors">Profile new sensors DataTable</param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateSensorProfile(System.Int16,System.String,System.String)">
            <summary>
            Update profile name and / or description only
            </summary>
            <param name="profileId">Profile Id to update</param>
            <param name="profileName">Profile new Name</param>
            <param name="profileDescription">Profile new Description</param>
        </member>
        <member name="M:VLF.DAS.Logic.SystemConfig.UpdateSensorProfileFull(System.Int16,System.String,System.String,System.Data.DataTable)">
            <summary>
            Update profile name, description and sensors set
            </summary>
            <param name="profileId">Profile Id to update</param>
            <param name="profileName">Profile new Name</param>
            <param name="profileDescription">Profile new Description</param>
            <param name="dtSensors">Profile new sensors DataTable</param>
        </member>
        <member name="T:VLF.DAS.Logic.MsgInLite">
            \class  MsgInLite
            \brief  this class is only to operate insertion/deletion in vlfMsgIn/vlfMsgOut
                    and as a helper for bulk operations
        </member>
        <member name="M:VLF.DAS.Logic.MsgInLite.AddMsgIn(VLF.CLS.Def.CMFIn)">
            \fn     public void AddMsgIn(CMFIn cmfIn)
            \brief  this is the 
        </member>
        <member name="M:VLF.DAS.Logic.MsgInLite.AppendThirdPartyMessage(System.DateTime,System.Int32,System.Double,System.Double,System.Int32,System.Int16,System.String)">
            \brief  used to save messages received from MDT
        </member>
        <member name="M:VLF.DAS.Logic.MsgInLite.RunDynamicSQL(System.String,System.String)">
            \fn     public DataSet RunDynamicSQL(string query, string condition)
            \brief  run a normal query with a condition
        </member>
        <member name="M:VLF.DAS.Logic.MsgInLite.UpdateAddress(System.Int32,System.DateTime,System.String,System.String)">
            \brief   updates tha address in vlfMsgInHst
        </member>
        <member name="M:VLF.DAS.Logic.MsgInLite.UpdateAddress(System.Int32,System.DateTime,System.DateTime,System.String,System.String)">
            \brief   updates tha address in vlfMsgInHst
        </member>
        <member name="M:VLF.DAS.Logic.MsgInLite.UpdateCustomPropInHistory(System.Int32,System.DateTime,System.Int16,System.String)">
            \brief   update custom property in vlfMsgInHst
        </member>
        <member name="T:VLF.DAS.Logic.Alarm">
            <summary>
            Provides interface to alarms functionality in database
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.AddAlarm(System.DateTime,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Add new alarm.
            </summary>
            <param name="dateTimeCreated"></param>
            <param name="boxId"></param>
            <param name="alarmTypeName"></param>
            <param name="alarmLevel"></param>
            <param name="description"></param>
            <returns>int new alarm id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if alarm id and datetime alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.AddAlarm(VLF.CLS.Def.CMFIn,System.Int32,System.String)">
            <summary>
                 the next step for generating an alarm
            </summary>
            <param name="cmfIn"></param>
            <param name="alarmLevel"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.DeleteAlarmByAlarmId(System.Int32)">
            <summary>
            Delete existing alarm by alarm id.
            </summary>
            <remarks>
            1. boxId == VLF.CLS.Def.Const.unassignedIntValue (deletes for all boxes)
            2. from == VLF.CLS.Def.Const.unassignedDateTime ("from" date time is empty)
            3. to == VLF.CLS.Def.Const.unassignedDateTime ("to" date time is empty)
            </remarks>
            <returns>void</returns>
            <param name="alarmId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.DeleteAlarmsByDateTimeRange(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Deletes all alarms in the date time range.
            </summary>
            <param name="boxId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.GetAlarmInfoByAlarmId(System.Int32)">
            <summary>
            Retrieves alarm info by alarm id 
            </summary>
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[BoxId],[AlarmTypeName],[AlarmLevel],
            		[DateTimeAck],[UserId],[DateTimeClosed],[AlarmDescription],
            		[LicensePlate],[VehicleId],[StreetAddress],[ValidGPS],[vehicleDescription],
            		[UserName],[Latitude],[Longitude],[Speed],[Heading],
            		[SensorMask],[IsArmed],[BoxId]
            </returns>
            <param name="alarmId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.GetAllAlarmsInfo">
            <summary>
            Retrieves all alarms info
            </summary>
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[BoxId],[AlarmTypeName],[AlarmLevel],
            		[DateTimeAck],[UserId],[DateTimeClosed],[Description],
            		[LicensePlate],[VehicleId],[StreetAddress],[ValidGPS]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.SetAlarmLevel(System.Int32,System.Int32)">
            <summary>
            Update alarm level.
            </summary>
            <param name="alarmId"></param>
            <param name="alarmLevel"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.AcceptAlarm(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Set alarm acknowledged date time
            </summary>
            <param name="alarmId"></param>
            <param name="acceptedDateTime"></param>
            <param name="userId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.CloseAlarm(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Set alarm closed date time
            </summary>
            <param name="alarmId"></param>
            <param name="closedDateTime"></param>
            <param name="userId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.GetAllAlarmsInfo(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Retrieves all box alarms info by filter datetime
            </summary>
            <remarks>
            1. boxId == VLF.CLS.Def.Const.unassignedIntValue (Get all the boxes)
            2. from == VLF.CLS.Def.Const.unassignedDateTime (Does not filter by "from" date time)
            3. to == VLF.CLS.Def.Const.unassignedDateTime (Does not filter by "to" date time)
            </remarks>
            <param name="from"></param> 
            <param name="to"></param> 
            <param name="requestUserId"></param> 
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[BoxId],[AlarmTypeName],[AlarmLevel],
            		[DateTimeAck],[UserId],[DateTimeClosed],[AlarmDescription],
            		[LicensePlate],[VehicleId],[StreetAddress],[ValidGPS],[vehicleDescription]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Alarm.GetAlarmsShortInfo(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Retrieves all box alarms info by filter datetime
            </summary>
            <remarks>
            1. boxId == VLF.CLS.Def.Const.unassignedIntValue (Get all the boxes)
            2. from == VLF.CLS.Def.Const.unassignedDateTime (Does not filter by "from" date time)
            3. to == VLF.CLS.Def.Const.unassignedDateTime (Does not filter by "to" date time)
            </remarks>
            <param name="from"></param> 
            <param name="to"></param> 
            <param name="requestUserId"></param> 
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[BoxId],[AlarmTypeName],[AlarmLevel],
            		[DateTimeAck],[UserId],[DateTimeClosed],[AlarmDescription],
            		[LicensePlate],[VehicleId],[StreetAddress],[ValidGPS],[vehicleDescription]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.Logic.Organization">
            <summary>
            Provides interface to organization functionality in database
            </summary>
            <summary>
            Organization Products Interface
            </summary>
            <summary>
            Vehicle Service Interface
            </summary>
            <summary>
            Organization Products Interface
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.AddOrganization(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
                    the new method reflecting a super organization hierarchy
            </summary>
            <param name="superOrganizationId"></param>
            <param name="organizationName"></param>
            <param name="contact"></param>
            <param name="address"></param>
            <param name="description"></param>
            <param name="logoName"></param>
            <param name="homePageName"></param>
            <param name="mapGroupId"></param>
            <param name="geoCodeGroupId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.AddOrganization(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Add new organization.
            </summary>
            <param name="organizationName"></param>
            <param name="contact"></param>
            <param name="address"></param>
            <param name="description"></param>
            <param name="logoName"></param>
            <param name="homePageName"></param>
            <param name="mapGroupId"></param>
            <param name="geoCodeGroupId"></param>
            <returns>int next organization id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if organization alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.UpdateInfo(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Update organization information.
            </summary>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if organization alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
            <param name="organizationId"></param>
            <param name="organizationName"></param>
            <param name="contact"></param>
            <param name="address"></param>
            <param name="description"></param>
            <param name="logoName"></param>
            <param name="homePageName"></param>
            <param name="mapGroupId"></param>
            <param name="geoCodeGroupId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.UpdateInfo(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Update organization information.
            </summary>
            <param name="superOrganizationId"></param>
            <param name="organizationId"></param>
            <param name="organizationName"></param>
            <param name="contact"></param>
            <param name="address"></param>
            <param name="description"></param>
            <param name="logoName"></param>
            <param name="homePageName"></param>
            <param name="mapGroupId"></param>
            <param name="geoCodeGroupId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteOrganization(System.Int32)">
            <summary>
            Deletes organization calling stored procedure and using cascade deleting
            </summary>
            <param name="orgID">Organization ID</param>
            <returns type="int">Rows deleted</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteOrganizationByOrganizationName(System.String)">
            <summary>
            Delete existing organization.
            </summary>
            <param name="organizationName"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteOrganizationByOrganizationId(System.Int32)">
            <summary>
            Delete existing organization.
            </summary>
            <param name="organizationId"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationBoxes(System.Int32)">
            <summary>
            Get count of organization boxes
            </summary>
            <param name="orgID"></param>
            <returns>number of boxes</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetAssignedBoxes(System.Int32)">
            <summary>
            Gets assigned boxes for org.
            </summary>
            <param name="orgId">Organization Id</param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationInfoByOrganizationId(System.Int32)">
            <summary>
            Retrieves Organization info
            </summary>
            <returns>DataSet [OrganizationId],[OrganizationName],[Contact],
            [Address],[Description],[LogoName],[HomePageName],
            [MapGroupId],[MapGroupName],[MapPriority],[MapId],[MapEngineName],[MapPath],[MapExternalPath],
            [GeoCodeGroupId],[GeoCodeGroupName],[GeoCodePriority],[GeoCodeId],[GeoCodeEngineName],[GeoPath]</returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationInfoByOrganizationName(System.String)">
            <summary>
            Retrieves Organization info
            </summary>
            <returns>DataSet [OrganizationId],[OrganizationName],[Contact],
            [Address],[Description],[LogoName],[HomePageName],
            [MapGroupId],[MapGroupName],[MapPriority],[MapId],[MapEngineName],[MapPath],[MapExternalPath],
            [GeoCodeGroupId],[GeoCodeGroupName],[GeoCodePriority],[GeoCodeId],[GeoCodeEngineName],[GeoPath]</returns>
            <param name="organizationName"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationIdByOrganizationName(System.String)">
            <summary>
            Returns organization id by organization name.
            </summary>
            <param name="organizationName"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationNameByOrganizationId(System.Int32)">
            <summary>
            Returns organization name by organization Id. 	
            </summary>
            <param name="organizationId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetAllOrganizationsInfoStruct">
            <summary>
            Retrieves information about all organizations
            </summary>
            <returns>string[,] of [OrganizationId][OrganizationName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetAllOrganizationsInfo">
            <summary>
            Retrieves information about all organizations 
            </summary>
            <returns>DataSet [OrganizationId],[OrganizationName],[Contact],[Address],[Description]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetTotalOrganizations">
            <summary>
            Get total organizations number
            </summary>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetLicensePlatesByOrganizationId(System.Int32)">
            <summary>
            Retrieves all license plates for specific organization
            </summary>
            <returns>DataSet [LicensePlate]</returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetUnassignedLicensePlatesByOrganizationId(System.Int32)">
            <summary>
            Retrieves all unassigned vehicles license plates to driver for specific organization
            </summary>
            <returns>DataSet [LicensePlate]</returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationIdByFleetId(System.Int32)">
            <summary>
            Gets the organization ID owning the given fleet ID
            </summary>
            <param name="fleetId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationNameByFleetId(System.Int32)">
            <summary>
            Gets the organization name owning the given fleet ID
            </summary>
            <param name="fleetId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationIdByBoxId(System.Int32)">
            <summary>
            Gets the organization ID owning the given box ID
            </summary>
            <param name="boxId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationNameByBoxId(System.Int32)">
            <summary>
            Gets the organization name owning the given box ID
            </summary>
            <param name="boxId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationIdsByBoxId(System.Int32)">
            <summary>
            Retrieves Organization ids
            </summary>
            <returns>DataSet [OrganizationId]</returns>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetFleetsInfoByOrganizationId(System.Int32)">
            <summary>
            Returns fleets information by organization id. 
            </summary>
            <param name="organizationId"></param>
            <returns>DataSet [FleetId],[FleetName],[Description],[OrganizationId],[OrganizationName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetUsersInfoByOrganization(System.Int32,System.Int32)">
            <summary>
            Returns all users info assigned to the organization. 
            </summary>
            <param name="userId"></param>
            <param name="organizationId"></param>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName],[PersonId],[ExpiredDate]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetUsersInfoByOrganization(System.Int32,System.String)">
            <summary>
            Returns all users info assigned to the organization. 
            </summary>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName],[PersonId]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <param name="userId"></param>
            <param name="organizationName"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationInfoByUserId(System.Int32)">
            <summary>
            Retrieves Organization info by user id
            </summary>
            <returns>DataSet [OrganizationId],[OrganizationName],[Contact],
            [Address],[Description],[LogoName],[HomePageName],
            [GeoCodeGroupId],[GeoCodeGroupName],[MapGroupId],[MapGroupName]</returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationUsersByUserGroup(System.Int32,System.Int16)">
            <summary>
            Returns all user assigned to the group for specific organization. 
            </summary>
            <param name="organizationId"></param>
            <param name="userGroupId"></param>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationUsersSecurityByUserGroup(System.Int32,System.Int16)">
            <summary>
            Returns all user assigned to the group for specific organization. 
            </summary>
            <param name="organizationId"></param>
            <param name="userGroupId"></param>
            <returns>DataSet [UserId],[UserName],[Password],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetAllActiveVehiclesInfo(System.Int32)">
            <summary>
            Retrieves all active(assigned to the box) vihecles info XML format.
            </summary>
            <param name="organizationId"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],
            [MakeModelId],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],
            [ModelYear],[Color],[Description],[CostPerMile],
            [IconTypeId],[IconTypeName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationCommInfo(System.Int32,System.Int16)">
            <summary>
            Retrieves communication information for all organization
            </summary>
            <param name="organizationId"></param>
            <param name="commAddressTypeId"></param>
            <returns>DataSet [BoxId],[CommAddressValue]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.AddLandmark(System.Int32,System.String,System.Double,System.Double,System.String,System.String,System.String,System.Int32,System.String,System.Int16,System.Boolean,System.Boolean,System.String)">
            <summary>
            Add new landmark.
            </summary>
            <param name="organizationId"></param>
            <param name="landmarkName"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="description"></param>
            <param name="contactPersonName"></param>
            <param name="contactPhoneNum"></param>
            <param name="radius"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="streetAddress"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if landmark for specific organization already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.AddLandmarks(System.Int32,System.Data.DataSet)">
            <summary>
            Add several landmarks for organization
            </summary>
            <param name="organizationId">Organization Id</param>
            <param name="dsLandmarks">DataSet of landmarks</param>
            <returns>XML string of rows that were not added</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteAllLandMarksByOrganizationId(System.Int32)">
            <summary>
            Deletes all landmarks related to specific organization.
            </summary>
            <returns>void</returns>
            <param name="organizationId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteLandmarkFromOrganization(System.Int32,System.String)">
            <summary>
            Deletes landmark from organization.
            </summary>
            <param name="organizationId"></param>
            <param name="landmarkName"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.UpdateLandmark(System.Int32,System.String,System.String,System.Double,System.Double,System.String,System.String,System.String,System.Int32,System.String,System.Int16,System.Boolean,System.Boolean,System.String)">
            <summary>
            Update landmark info.
            </summary>
            <param name="organizationId"></param>
            <param name="currLandmarkName"></param>
            <param name="newLandmarkName"></param>
            <param name="newLatitude"></param>
            <param name="newLongitude"></param>
            <param name="newDescription"></param>
            <param name="newContactPersonName"></param>
            <param name="newContactPhoneNum"></param>
            <param name="radius"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="streetAddress"></param>
            <remarks>
            In case of updating landmark info except landmark name, set newLandmarkName to VLF.CLS.Def.Const.unassignedStrValue
            </remarks>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetLandMarksInfoByOrganizationId(System.Int32)">
            <summary>
            Retrieves landmarks info by organization id 
            </summary>
            <returns>
            DataSet [OrganizationId],[LandmarkName],[Latitude],[Longitude],
            [Description],[ContactPersonName],[ContactPhoneNum],[Radius],
            [Email],[TimeZone],[DayLightSaving],[AutoAdjustDayLightSaving],
            [StreetAddress]
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetAllLandMarksInfo">
            <summary>
            Retrieves all landmarks info with street != null
            </summary>
            <returns>
            DataSet [OrganizationId],[LandmarkName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetAllLandMarksInfo(System.Int32[])">
            <summary>
            
            </summary>
            <param name="orgIds"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.UpdateLandmarkStreetAddress(System.Int32,System.String,System.String)">
            <summary>
            Update landmark info.
            </summary>
            <param name="organizationId"></param>
            <param name="landmarkName"></param>
            <param name="streetAddress"></param>
            <remarks>
            In case of updating landmark info except landmark name, set newLandmarkName to VLF.CLS.Def.Const.unassignedStrValue
            </remarks>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetLandMarksInfoByOrganizationName(System.String)">
            <summary>
            Retrieves landmarks info by organization name 
            </summary>
            <returns>
            DataSet [OrganizationId],[LandmarkName],[Latitude],[Longitude],
            [Description],[ContactPersonName],[ContactPhoneNum],[Radius],[StreetAddress]
            </returns>
            <param name="organizationName"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetAllLandmarks">
            <summary>
            Retrieves all landmarks info
            </summary>
            <returns>
            DataSet [OrganizationId],[LandmarkName],[Latitude],[Longitude],
            [Description],[ContactPersonName],[ContactPhoneNum],[Radius]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetLandmarkName(System.Int32,System.Double,System.Double)">
            <summary>
            Retrieves landmark name by location
            </summary>
            <param name="organizationId"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <remarks>
            If landmark does not exist, returns VLF.CLS.Def.Const.unassignedStrValue
            </remarks>
            <returns>
            string [landmark name]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetLandmarkLocation(System.Int32,System.String,System.Double@,System.Double@)">
            <summary>
            Retrieves landmark location by landmark name 
            </summary>
            <remarks>
            If landmark does not exist, returns latitude=0,longitude=0
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <param name="organizationId"></param>
            <param name="landmarkName"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.AddGeozone(System.Int32,System.String,System.Int16,System.Int16,System.Data.DataSet,System.Int16,System.String,System.String,System.Int32,System.Boolean,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add new geozone to organization.
            </summary>
            <param name="organizationId"></param>
            <param name="geozoneName"></param>
            <param name="type"></param>
            <param name="geozoneType"></param>
            <param name="dsGeozoneSet"></param>
            <param name="severityId"></param>
            <param name="description"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="formatType"></param>
            <param name="notify"></param>
            <param name="warning"></param>
            <param name="critical"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if geozone for specific organization already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteOrganizationAllGeozones(System.Int32)">
            <summary>
            Deletes all geozones related to specific organization.
            </summary>
            <returns>Rows affected</returns>
            <param name="organizationId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if geozone does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteGeozoneFromOrganization(System.Int32,System.Int16)">
            <summary>
            Deletes geozone from organization.
            </summary>
            <param name="organizationId"></param>
            <param name="geozoneId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.UpdateGeozone(System.Int32,System.Int16,System.String,System.Int16,System.Int64,System.Data.DataSet,System.Int16,System.String,System.String,System.Int32,System.Boolean,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update geozone info.
            </summary>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if geozone for specific organization already exists.</exception>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if geozone does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
            <param name="organizationId"></param>
            <param name="geozoneId"></param>
            <param name="geozoneName"></param>
            <param name="type"></param>
            <param name="geozoneType"></param>
            <param name="dsGeozoneSet"></param>
            <param name="severityId"></param>
            <param name="description"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="formatType"></param>
            <param name="notify"></param>
            <param name="warning"></param>
            <param name="critical"></param>
            <param name="autoAdjustDayLightSaving"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.IsGeozoneAssigned(System.Int32,System.Int16)">
            <summary>
            Check if geozone assigned to any of vehicles
            </summary>
            <param name="organizationId"></param> 
            <param name="geozoneId"></param> 
            <returns>bool</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.Logic.Organization.GetOrganizationGeozonesInfo(System.Int32,System.Data.DataSet)" -->
        <member name="M:VLF.DAS.Logic.Organization.GetGeozoneTypes">
            <summary>
            Retrieves geozone types
            </summary>
            <returns>
            DataSet [GeozoneType],[GeozoneTypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationGeozoneInfo(System.Int32,System.Int16)">
            <summary>
            Retrieves geozone info by organization id and geozone Id 
            </summary>
            <param name="organizationId"></param> 
            <param name="geozoneId"></param> 
            <returns>
            DataSet [GeozoneNo],[GeozoneId],[Type],[GeozoneType],[SequenceNum],[Latitude],[Longitude],[GeozoneName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationGeozones(System.Int32)">
            <summary>
            Get geozones for organization
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationUserLogins(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Retrieves user logins.
            </summary>
            <param name="userId"></param>
            <param name="organizationId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns>DataSet [LoginId],[UserId],[LoginDateTime],[IP],
            [UserName],[FirstName],[LastName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetSystemEmailAddress(System.Int32)">
            <summary>
                 this function is going to find what is the super-organization where the notifications are 
                 sent out
                 Designed for Bell, WEX with which we share the same back-end
            </summary>
            <param name="boxId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationsMonitoredBy(System.Int32)">
            <summary>
                 this is a function for super organizations
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetSuperOrganizations">
            <summary>
            Retrieves SuperOrganization ids and descriptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetLoginCredentialsWithinSameGroup(System.Int32,System.Int32,System.String@,System.String@)">
            <summary>
                 it allows a user to login in a different organization if his organization 
                 is the Super Organization (monitors all other organizations)
            </summary>
            <param name="userid"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationAllActiveVehiclesCfgInfo(System.Int32)">
            <summary>
            Gets all vehicles active assignment configuration information for current organization
            </summary>
            <param name="organizationId"></param>
            <returns>DataSet [Description],[BoxId],[FwId],[FwName],[FwDateReleased],[CommModeId],[BoxProtocolTypeId],[FwTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetDclCommInfo(System.Int32,System.String,System.Int32@,System.Int16@)">
            <summary>
            Get DCL Information based on Organization and vehicle description
            </summary>
            <returns>boxId, dclID</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetAuditGroupInfo">
            <summary>
            Get Audit Info
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationLandmarksWithBoundary(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets organization landmarks within latlong rectangle
            </summary>
            <param name="organizationId"></param>
            <param name="topleftlat"></param>
            <param name="topleftlong"></param>
            <param name="bottomrightlat"></param>
            <param name="bottomrightlong"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.AddPreference(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a new preferences to organization
            </summary>
            <param name="organizationId"></param>
            <param name="notificationEmail"></param>
            <param name="radiusForGps"></param>
            <param name="maximumReportingInterval"></param>
            <param name="historyTimerange"></param>
            <param name="waitingPeriodToGetMessages"></param>
            <param name="timezone"></param>
            <returns>records affected counts</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.UpdatePreference(System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            updates organization preferences
            </summary>
            <param name="organizationId"></param>
            <param name="notificationEmail"></param>
            <param name="radiusForGps"></param>
            <param name="maximumReportingInterval"></param>
            <param name="historyTimerange"></param>
            <param name="waitingPeriodToGetMessages"></param>
            <param name="timezone"></param>
            <returns>records affected counts</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationPreferences(System.Int32)">
            <summary>
            Get Organization Preferences
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationSettings(System.Int32)">
            <summary>
            Get Organization Preferences
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteOrganizationSettings(System.Int32)">
            <summary>
            Delete Organization Settings - Restoring the Defaults
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.AddVehicleService(System.Int32,System.Int16,System.String,System.String)">
            <summary>
            Add new Vehicle Service Type to Organization
            </summary>
            <param name="organizationId"></param>
            <param name="operationTypeId"></param>
            <param name="serviceDescription"></param>
            <param name="VRMSCode"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.UpdateVehicleService(System.Int32,System.Int32,System.Int16,System.String,System.String)">
            <summary>
            Update Vehicle Service Type
            </summary>
            <param name="organizationId"></param>
            <param name="serviceTypeId"></param>
            <param name="operationTypeId"></param>
            <param name="serviceDescription"></param>
            <param name="VRMSCode"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteVehicleService(System.Int32,System.Int32)">
            <summary>
            Delete Vehicle Service Type for Organization
            </summary>
            <param name="organizationId"></param>
            <param name="serviceTypeId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationVehicleServices(System.Int32)">
            <summary>
            Get All Vehicle Services for Organization
            </summary>
            <param name="organizationId">Organization Id</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationVehicleServices(System.Int32,System.Int16)">
            <summary>
            Get Vehicle Services of selected type for Organization
            </summary>
            <param name="organizationId">Organization Id</param>
            <param name="operationTypeId">Operation Type Id</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationVehicleService(System.Int32,System.Int32)">
            <summary>
            Get Vehicle Service for Organization
            </summary>
            <param name="organizationId"></param>
            <param name="serviceTypeId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.AddVehicleServiceNotification(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Add New Notification
            </summary>
            <param name="organizationId">Organization ID</param>
            <param name="operationTypeId">Notification Type ID</param>
            <param name="notification1">1 Notification condition</param>
            <param name="notification2">2 Notification condition</param>
            <param name="notification3">3 Notification condition</param>
            <param name="description">Notification description</param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.UpdateVehicleServiceNotification(System.Int32,System.Int32,System.Int16,System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Update Notification
            </summary>
            <param name="organizationId"></param>
            <param name="notificationId"></param>
            <param name="notificationTypeId"></param>
            <param name="notification1"></param>
            <param name="notification2"></param>
            <param name="notification3"></param>
            <param name="description"></param>
            <param name="email"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteVehicleServiceNotification(System.Int32,System.Int32)">
            <summary>
            Delete Notification
            </summary>
            <param name="organizationId"></param>
            <param name="notificationId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationNotifications(System.Int32)">
            <summary>
            Get Organization Notifications
            </summary>
            <param name="organizationId">Organization Id</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationNotifications(System.Int32,System.Int16)">
            <summary>
            Get Organization Notifications of selected type
            </summary>
            <param name="organizationId">Organization Id</param>
            <param name="operationTypeId">Notification Id</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetOrganizationNotification(System.Int32,System.Int32)">
            <summary>
            Get Organization Notification
            </summary>
            <param name="organizationId">Organization Id</param>
            <param name="notificationId">Notification Id</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.AddProduct(System.Int32,System.String,System.Single,System.Single)">
            <summary>
            Add a new product to organization
            </summary>
            <param name="orgId"></param>
            <param name="productName"></param>
            <param name="upper"></param>
            <param name="lower"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.UpdateProductById(System.Int32,System.Int32,System.String,System.Single,System.Single)">
            <summary>
            Update existing product by Id
            </summary>
            <param name="orgId"></param>
            <param name="productId"></param>
            <param name="productName"></param>
            <param name="upper"></param>
            <param name="lower"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.UpdateProductByName(System.Int32,System.String,System.String,System.Single,System.Single)">
            <summary>
            Update existing product by name
            </summary>
            <param name="orgId"></param>
            <param name="productName"></param>
            <param name="newName"></param>
            <param name="upper"></param>
            <param name="lower"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteProduct(System.Int32,System.Int32)">
            <summary>
            Delete organization product by Id
            </summary>
            <param name="orgId"></param>
            <param name="productId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.DeleteAllProducts(System.Int32)">
            <summary>
            Delete all organization products
            </summary>
            <param name="orgId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetProduct(System.Int32,System.Int32)">
            <summary>
            Get organization product by Id
            </summary>
            <param name="orgId"></param>
            <param name="productId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetProduct(System.Int32,System.String)">
            <summary>
            Get organization product by name
            </summary>
            <param name="orgId"></param>
            <param name="productName"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Organization.GetAllProducts(System.Int32)">
            <summary>
            Get all products for organization
            </summary>
            <param name="orgId"></param>
        </member>
        <member name="T:VLF.DAS.Logic.User">
            <summary>
            Provides interface to user functionality in database
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.User.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.User.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.User.AddNewUser(System.String,VLF.CLS.Def.Structures.UserInfo,VLF.CLS.Def.Structures.PersonInfoStruct)">
            <summary>
            Add new user.
            </summary>
            <returns>int next user id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
            <param name="userName"></param>
            <param name="userInfo"></param>
            <param name="pInfo"></param>
        </member>
        <member name="M:VLF.DAS.Logic.User.AddUser(System.String,VLF.CLS.Def.Structures.UserInfo)">
            <summary>
            Add new user.
            </summary>
            <param name="userName"></param>
            <param name="userInfo"></param>
            <returns>int next user id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.AddNewUserAssignDefaultFleet(System.String,VLF.CLS.Def.Structures.UserInfo,VLF.CLS.Def.Structures.PersonInfoStruct)">
            <summary>
            Create new user and assign 'All Vehicles' fleet
            </summary>
            <returns>int next user id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
            <param name="userName"></param>
            <param name="userInfo"></param>
            <param name="pInfo"></param>
        </member>
        <member name="M:VLF.DAS.Logic.User.AddUserAssignDefaultFleet(System.String,VLF.CLS.Def.Structures.UserInfo)">
            <summary>
            Create new user and assign 'All Vehicles' fleet
            </summary>
            <param name="userName"></param>
            <param name="userInfo"></param>
            <returns>int next user id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.UpdateInfo(System.Int32,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Update user information.
            </summary>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="expiredDate"></param>
        </member>
        <member name="M:VLF.DAS.Logic.User.UpdateInfo(VLF.CLS.Def.Structures.UserInfo,System.String)">
            <summary>
            Update user information.
            </summary>
            <param name="userInfo"></param>
            <param name="userName"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.DeleteUserByDriverLicense(System.String)">
            <summary>
            Delete existing user.
            </summary>
            <param name="driverLicense"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.DeleteUserByUserName(System.String)">
            <summary>
            Delete existing user.
            </summary>
            <param name="userName"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.DeleteUserByUserId(System.Int32)">
            <summary>
            Delete existing user.
            </summary>
            <param name="userId"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <comment>
                    this function should be moved on the server side as all the references at the user table
                    can grow in time
                    therefore I decided to disable the user instead of deleting all his foreign references
            </comment>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetContactInfoByUserId(System.Int32)">
            <summary>
            Retrieves user contact info
            </summary>
            <returns>
            DataSet 
            [Birthday],[PIN],[Address],[City],[StateProvince],[Country],[PhoneNo1],[PhoneNo2],[CellNo]
            </returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserInfoByUserId(System.Int32)">
            <summary>
            Retrieves user info
            </summary>
            <returns>
            DataSet 
            [UserId],[UserName],[Password],[PersonId],[DriverLicense],[FirstName],[LastName],
            [OrganizationId],[Birthday],[PIN],[Address],[City],[StateProvince],
            [Country],[PhoneNo1],[PhoneNo2],[CellNo],[Description],[OrganizationName],[ExpiredDate]
            </returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.CheckUserExpiration(System.Int32)">
            <summary>
            Retrieves user expiration datetime
            </summary>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserInfoByUserName(System.String)">
            <summary>
            Retrieves user info
            </summary>
            <returns>
            DataSet 
            [UserId],[UserName],[Password],[PersonId],[DriverLicense],[FirstName],[LastName],
            [OrganizationId],[Birthday],[PIN],[Address],[City],[StateProvince],
            [Country],[PhoneNo1],[PhoneNo2],[CellNo],[Description],[OrganizationName],[ExpiredDate]
            </returns>
            <param name="userName"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserInfoByDriverLicense(System.String)">
            <summary>
            Retrieves user info
            </summary>
            <returns>
            DataSet 
            [UserId],[UserName],[Password],[PersonId],[DriverLicense],[FirstName],[LastName],
            [OrganizationId],[Birthday],[PIN],[Address],[City],[StateProvince],
            [Country],[PhoneNo1],[PhoneNo2],[CellNo],[Description],[OrganizationName]
            </returns>
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetOrganizationIdByUserId(System.Int32)">
            <summary>
            Returns organization id by user Id. 	
            </summary>
            <param name="userId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserNameByUserId(System.Int32)">
            <summary>
            Returns user name by user Id. 	
            </summary>
            <param name="userId"></param> 
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserNameByDriverLicense(System.String)">
            <summary>
            Returns user name by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetOrganizationIdByDriverLicense(System.String)">
            <summary>
            Returns organization id by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetPasswordByDriverLicense(System.String)">
            <summary>
            Returns password by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserIdByUserName(System.String)">
            <summary>
            Returns user id by user name. 	
            </summary>
            <param name="userName"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUser(System.String,System.String)">
            <summary>
            Validate user. 	
            </summary>
            <param name="userName"></param> 
            <param name="password"></param> 
            <remarks>
            In case of invalid data, returns -1
            </remarks>
            <returns>user id</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserMD5(System.String,System.String)">
            <summary>
            Validate user. 	
            </summary>
            <param name="userName"></param> 
            <param name="password"></param> 
            <remarks>
            In case of invalid data, returns -1
            </remarks>
            <returns>user id</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.IsUserAssignedToUserGroup(System.Int32,System.Int16)">
            <summary>
            Check if user assigned to the group
            </summary>
            <param name="userId"></param>
            <param name="userGroupId"></param>
            <returns>true/false</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserIdByDriverLicense(System.String)">
            <summary>
            Returns user id by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetDriverLicenseByUserName(System.String)">
            <summary>
            Returns driver license by user name. 	
            </summary>
            <param name="userName"></param> 
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetDriverLicenseByUserId(System.Int32)">
            <summary>
            Returns driver license by user id. 	
            </summary>
            <param name="userId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserBoxes(System.Int32)">
            <summary>
            Retrieves users boxes by user id. 	
            </summary>
            <param name="userId"></param> 
            <returns>ArrayList [int]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.SetPasswordByUserId(System.String,System.Int32)">
            <summary>
            Update password by user id
            </summary>
            <param name="userId"></param> 
            <param name="password"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if unabled to update information.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.Logic.User.SetHashPasswordByUserId(System.String,System.Int32)" -->
        <member name="M:VLF.DAS.Logic.User.SetOrganizationIdByUserId(System.Int32,System.Int32)">
            <summary>
            Update organization id by user id
            </summary>
            <param name="organizationId"></param> 
            <param name="userId"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.SetOrganizationIdByUserName(System.Int32,System.String)">
            <summary>
            Update organization id by user name
            </summary>
            <param name="organizationId"></param> 
            <param name="userName"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.SetUserNameByUserId(System.String,System.Int32)">
            <summary>
            Update user name by user id
            </summary>
            <param name="userName"></param> 
            <param name="userId"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.SetPasswordByUserName(System.String,System.String)">
            <summary>
            Update password by user name
            </summary>
            <param name="password"></param> 
            <param name="userName"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.PrepareUserInfoDataSet(System.Data.DataSet)">
            <summary>
            Adds additional information to result DataSet
            - Adds TableName = "UserInfo"
            - Adds DataSetName = "User"
            - Retrieves organization name by organization id
            - Adds "OrganizationName" column 
            - Deletes "OrganizationId" column
            </summary>
            <param name="userInfo"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.AddUserPreference(System.Int32,System.Int32,System.String)">
            <summary>
            Add new user preference
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <param name="preferenceValue"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.UpdateUserPreference(System.Int32,System.Int32,System.String)">
            <summary>
            Update user preference
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <param name="preferenceValue"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user preference does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.DeleteUserPreferences(System.Int32)">
            <summary>
            Delete all user preferences
            </summary>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.DeleteUserPreference(System.Int32,System.Int32)">
            <summary>
            Delete user preference
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetAllUserPreferencesInfo(System.Int32)">
            <summary>
            Retrieves all user preferences info
            </summary>
            <param name="userId"></param>
            <returns>DataSet [UserId], [PreferenceId], [PreferenceName], [PreferenceValue]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserPreferenceInfo(System.Int32,System.Int32)">
            <summary>
            Retrieves user preference info
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <returns>DataSet [UserId], [PreferenceId], [PreferenceName], [PreferenceValue]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetAllUsersPreferencesInfo">
            <summary>
            Retrieves all users preferences info
            </summary>
            <returns>DataSet [UserId], [PreferenceId], [PreferenceName], [PreferenceValue]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetAllUserPreferencesTypes">
            <summary>
            Retrieves all user preferences types 
            </summary>
            <returns>DataSet [PreferenceId], [PreferenceName], [PreferenceValue]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserLocalTime(System.Int32,System.DateTime)">
            <summary>
            Adjust GMT time to user location time
            </summary>
            <param name="userId"></param>
            <param name="gmtDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserPreferenceValue(System.Int32,System.Int32)">
            <summary>
            Get User Preference
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <returns>Result Object: convert to required type</returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserTimeZoneDayLightSaving(System.Int32)">
            <summary>
            Get User TimeZone and DayLightSaving preference
            </summary>
            <param name="userId"></param>
            <returns>TimeZone + DayLightSaving</returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUsersDashboards(System.Int32)">
            <summary>
            Get Users Dashboards
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetDashboardUserAssignment(System.Int32)">
            <summary>
            Get Dashboard assignment 
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetDashboardTypes">
            <summary>
            Get Dashboard Types
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.AddUserLogin(System.Int32,System.DateTime,System.String)">
            <summary>
            Add new user login
            </summary>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user with this datetime already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserLogins(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Retrieves user logins.
            </summary>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns>DataSet [LoginId],[UserId],[LoginDateTime],[IP],
            [UserName],[FirstName],[LastName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserLastLogin(System.Int32,System.Int32)">
            <summary>
            Get User Last Login
            </summary>
            <param name="userId"></param>
            <param name="loginUserId"></param>
            <returns>DataSet [LoginId],[UserId],[LoginDateTime],[IP],
            [UserName],[FirstName],[LastName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserAlarm(System.Int32,System.Int32)">
            <summary>
            Validate user alarm. 	
            </summary>
            <param name="userId"></param>
            <param name="alarmId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserAlarmOne(System.Int32,System.Int32)">
            <summary>
            Validate user alarm. 	
            </summary>
            <param name="userId"></param>
            <param name="alarmId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserFleet(System.Int32,System.Int32)">
            <summary>
            Validate user fleet. 	
            </summary>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserDriver(System.Int32,System.Int32)">
            <summary>
            Validate user driver
            </summary>
            <param name="userId"></param>
            <param name="driverId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized to use this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserOrganization(System.Int32,System.Int32)">
            <summary>
            Validate user organization. 	
            </summary>
            <param name="userId"></param>
            <param name="organizationId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserVehicle(System.Int32,System.Int64)">
            <summary>
            Validate user vehicle. 	
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserLicensePlate(System.Int32,System.String)">
            <summary>
            Validate user license plate. 	
            </summary>
            <param name="userId"></param>
            <param name="licensePlate"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserBox(System.Int32,System.Int32)">
            <summary>
            Validate user box Id. 	
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserBoxOne(System.Int32,System.Int32)">
            <summary>
            Validate user box Id. 	
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserMsg(System.Int32,System.Int32)">
            <summary>
            Validate user msg. 	
            </summary>
            <param name="userId"></param>
            <param name="msgId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserOrganizationName(System.Int32,System.String)">
            <summary>
            Validate user organization name. 	
            </summary>
            <param name="userId"></param>
            <param name="organizationName"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateHGISuperUser(System.Int32)">
            <summary>
            Validate HGI super user. 	
            </summary>
            <param name="userId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateSuperUser(System.Int32)">
            <summary>
            Validate super user. 	
            </summary>
            <param name="userId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateSuperUserOne(System.Int32)">
            <summary>
            Validate super user. 	
            </summary>
            <param name="userId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserGroupSecurity(System.Int32,System.Int32)">
            <summary>
            Validate user group security. 	
            </summary>
            <param name="userId"></param>
            <param name="userGroupId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.ValidateUserPreference(System.Int32,System.Int32)">
            <summary>
            Validate user preference. 	
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if user is unauthorized using this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetUserAllVehiclesActiveInfo(System.Int32)">
            <summary>
            Get all user vehicles active assignment information
            </summary>
            <remarks>
            TableName	= "UserAllActiveVehiclesInfo"
            DataSetName = "Vehicle"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in exception cases.</exception>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],
            [MakeModelId],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],
            [ModelYear],[Color],[Description],[CostPerMile],
            [IconTypeId],[IconTypeName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.AddMapUserUsage(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Add map/user usage
            </summary>
            <param name="userId"></param>
            <param name="mapTypeId"></param>
            <param name="usageYear"></param>
            <param name="usageMonth"></param>
            <param name="mapId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.User.UserPreference_Add_Update(System.Int32,System.Int32,System.String)">
            <summary>
            Add/Update User Preference
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <param name="preferenceValue"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.DashBoardUserAssignment_Add_Update(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Dash Board User Assignment
            </summary>
            <param name="DashboardId"></param>
            <param name="UserId"></param>
            <param name="FleetId"></param>
            <param name="PeriodId"></param>
            <param name="GridView"></param>
            <param name="Threshold"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetOrganizationUsers(System.Int32)">
            <summary>
            Get all organization users list of id's
            </summary>
            <param name="organizationId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.User.ChangeUserName(System.Int32,System.String)">
            <summary>
            Change Current User Name
            </summary>
            <param name="userId">User Id</param>
            <param name="newUserName">New User Name</param>
        </member>
        <member name="M:VLF.DAS.Logic.User.GetMD5HashData(System.String)">
            <summary>
            Get MD5 Hash Data
            </summary>
            <param name="data">Data</param>
        </member>
        <member name="T:VLF.DAS.Logic.Box">
            <summary>
            Provides interface to box functionality in database
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetMissingMessages(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Find message pairs where a message is missing
            </summary>
            <param name="boxId"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns>HTML table string</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Box.Dispose">
            <summary>
            Distructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxMsgInTypes">
            <summary>
            Get Box MsgIn Types
            </summary>
            <returns>[BoxMsgInTypeId],[BoxMsgInTypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxOutputsInfo(System.Int32,System.Int32)">
            <summary>
            Retrieves output info by box id
            </summary>
            <param name="boxId"></param> 
            <param name="userId"></param> 
            <returns>DataSet [OutputId][OutputName][OutputAction]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.AddOutputs(System.Int32,System.Int16,System.Data.DataSet)">
            <summary>
            Add new outputs to the box.
            </summary>
            <param name="boxId"></param>
            <param name="boxHwTypeId"></param>
            <param name="dsOutputsCfg"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if output id and name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.SetOutputs(System.Int32,System.Int16,System.Data.DataSet)">
            <summary>
            Set new outputs to the box.
            </summary>
            <remarks>
            1. Delete previous outputs related to the box
            2. Add new outputs
            </remarks>
            <param name="boxId"></param>
            <param name="boxHwTypeId"></param>
            <param name="dsOutputsCfg"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if output id and name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateOutput(System.Int32,System.Int16,System.String,System.String)">
            <summary>
            Update output information.
            </summary>
            <param name="boxId"></param>
            <param name="outputId"></param>
            <param name="outputName"></param>
            <param name="outputAction"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not have info for current output.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetMaxSupportedDefaultOutputsByHwType(System.Int16)">
            <summary>
            Retrieves max number of supported outputs for specific Hw type.
            Note: if box does not exist return 0
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxSensorsInfo(System.Int32)">
            <summary>
            Retrieves sensors info by box id
            </summary>
            <param name="boxId"></param> 
            <returns>DataSet [SensorId][SensorName][SensorAction][AlarmLevelOn][AlarmLevelOff]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.AddSensors(System.Int32,System.Int16,System.Data.DataSet)">
            <summary>
            Add new sensors to the box.
            </summary>
            <param name="boxId"></param>
            <param name="boxHwTypeId"></param>
            <param name="dsSensorsCfg"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if sensor id and name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.SetSensors(System.Int32,System.Int16,System.Data.DataSet)">
            <summary>
            Set new sensors to the box.
            </summary>
            <remarks>
            1. Delete previous sensors related to the box
            2. Add new outputs
            </remarks>
            <param name="boxId"></param>
            <param name="boxHwTypeId"></param>
            <param name="dsSensorsCfg"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if sensor id and name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateSensor(System.Int32,System.Int16,System.String,System.String,System.Int16,System.Int16)">
            <summary>
            Update sensor information.
            </summary>
            <param name="boxId"></param>
            <param name="sensorId"></param>
            <param name="sensorName"></param>
            <param name="sensorAction"></param>
            <param name="alarmLevelOn"></param>
            <param name="alarmLevelOff"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not have info for current sensor.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.DeleteSensors(System.Int32)">
            <summary>
            Delete user-defined sensors for current box.
            </summary>
            <param name="boxId"></param>
            <returns>int rowsAffected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetMaxSupportedSensorsByHwType(System.Int16)">
            <summary>
            Retrieves max number of supported sensors for specific Hw type.
            Note: if box does not exist return 0
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetCommInfoByBoxId(System.Int32)">
            <summary>
            Retieves box communication info. 	
            </summary>
            <param name="boxId"></param>
            <remarks>
            TableName	= "BoxCommunicationInfo"
            DataSetName = "Box"
            </remarks>
            <returns>DataSet [CommAddressTypeId][CommAddressValue][CommAddressTypeName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetFullCommInfoByBoxId(System.Int32)">
            <summary>
            Get full CommInfo by box Id. 	
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [CommAddressTypeId],[CommAddressValue],[CommAddressTypeName],[FwChId],[BoxHwTypeId],[BoxProtocolTypeId],[CommModeId],[ChPriority]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxCommInfo(System.Int32)">
            <summary>
            Get CommInfo by box Id. 	
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [CommAddressTypeId], [CommAddressTypeName], [CommAddressValue]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetCommInfoAddressValue(System.Int32,System.Int16)">
            <summary>
            Returns only first box. 	
            </summary>
            <param name="boxId"></param>
            <param name="commAddressTypeId"></param>
            <returns>CommAddressValue</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetCommAddressTypeIdByProtocolTypeCmdOutTypeId(System.Int16,System.Int16)">
            <summary>
            Retrieves CommAddressTypeId by ProtocolType and CmdOutTypeId
            </summary>
            <param name="boxProtocolTypeId"></param>
            <param name="boxCmdOutTypeId"></param>
            <returns>CommAddressTypeId</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxIdByCommAddressValue(System.String)">
            <summary>
            Returns only first box id by CommAddressValue. 	
            </summary>
            <param name="commAddressValue"></param>
            <returns>box id</returns>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown DASAppWrongResultException in case of unexpected multiple rows result.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxConfigInfoByCommAddressValue(System.String)">
            <summary>
            Returns box configuration info by CommAddressValue. 	
            </summary>
            <param name="commAddressValue"></param>
            <returns>DataSet [BoxId],[BoxHwTypeId],[BoxProtocolTypeId],[CommModeId],[FwChId]</returns>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown DASAppWrongResultException in case of unexpected multiple rows result.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetDclId(System.Int32,VLF.CLS.Def.Enums.ProtocolTypes,VLF.CLS.Def.Enums.CommMode)">
            <summary>
            Retrieves DCL id by box id, ProtocolTypeId and CommModeId
            In case of wrong result returns VLF.CLS.Def.Const.unassignedIntValue
            </summary>
            <param name="boxId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="commModeId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>dcl id</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetOTADclId(VLF.CLS.Def.Enums.CommMode)">
            <summary>
            Retrieves OTA DCL id by communication mode
            </summary>
            <param name="commModeId"></param>
            <remarks>
            If dcl with current configuration does not exist, returns VLF.CLS.Def.Const.unassignedIntValue
            </remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>dcl id</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetDclInfo(System.String)">
            <summary>
            Retrieves DCL info
            </summary>
            <param name="dclName"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [DclId],[CommModeId],[BoxProtocolGroupId ],[DclName],[Description],
            [ServiceState],[PID],[BoxProtocolTypeId],[BoxProtocolTypeName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetDclInfo(System.Int16)">
            <summary>
            Retrieves DCL info
            </summary>
            <param name="dclId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [DclId],[CommModeId],[BoxProtocolGroupId ],[DclName],[Description],
            [ServiceState],[PID],[BoxProtocolTypeId],[BoxProtocolTypeName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxCommInfoByCommAddressValue(System.String)">
            <summary>
            Retrieves Protocol types info by protocol group
            </summary>
            <param name="commAddressValue"></param>
            <returns>DataSet [BoxId],[BoxProtocolTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateBoxCommInfo(System.Int32,System.Int16,System.String)">
            <summary>
            Updates box communication info. 	
            </summary>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Throws DASAppResultNotFoundException if current box does not support communication address type.</exception>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Throws DASAppViolatedIntegrityConstraintsException if current box does not contain communication information.</exception>
            <exception cref="T:VLF.ERR.DASException">Throws in all other error cases.</exception>
            <param name="boxId"></param>
            <param name="commAddressTypeId"></param>
            <param name="commAddressValue"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Box.IsFreeCommInfo(System.Int32,System.Int16,System.String)">
            <summary>
            Check if communication info does not assigned to another box
            </summary>
            <param name="boxId"></param>
            <param name="commInfo"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>true if phone is free, otherwise returns false</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetPrimaryServerIp(System.Int32,System.Int16)">
            <summary>
            Get Primary Server Ip. 	
            </summary>
            <param name="boxId"></param>
            <param name="commModeId"></param>
            <returns>serverIp</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxServerConfig(System.Int32,System.Int32)">
            <summary>
            Gets server ip and ports
            </summary>
            <param name="commId">CommModeId</param>
            <param name="protocolId">ProtocolTypeId</param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetAllAssignedBoxIds(System.Boolean,System.Int32)">
            <summary>
            Retrieves all assigned/free boxes ids.
            </summary>
            <param name="assigned"></param>
            <param name="organizationId"></param>
            <returns>ArrayList</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetAllAssignedBoxIdsDs(System.Boolean,System.Int32)">
            <summary>
            Retrieves all assigned/free boxes info.
            </summary>
            <remarks>
            Assgned is true
            Free is false
            </remarks>
            <returns>DataSet [BoxId],[BoxHwTypeName],[BoxProtocolTypeName],[CommModeName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxInfoByCommInfo(System.String)">
            <summary>
            Retrives box information by communication info
            </summary>
            <returns>DataSet [BoxId],[CommAddressTypeId],[CommAddressTypeName],[OrganizationId],[OrganizationName],[Description],[FleetName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="commInfo"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetAllAssignedBoxesInfo(System.Boolean,System.Int32)">
            <summary>
            Retrieves all assigned/free boxes info.
            </summary>
            <remarks>
            Assgned is true
            Free is false
            </remarks>
            <returns>DataSet [BoxId],[BoxHwTypeName],[BoxProtocolTypeName],[CommModeName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.AddBox(System.Int32,System.Int16,System.Boolean,System.Boolean,System.Int32,System.Data.DataSet)">
            <summary>
            Add new box.
            </summary>
            <param name="boxId"></param>
            <param name="fwChId"></param>
            <param name="boxArmed"></param>
            <param name="boxActive"></param>
            <param name="organizationId"></param>
            <param name="dsBoxProtocolMaxMsgs"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if box already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxOrganization(System.Int32)">
            <summary>
            Retrives box organization
            </summary>
            <returns>OrganizationId</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxOrganizationVehicleInfo(System.Int32)">
            <summary>
            Get Box Organization and Vehicle Info
            Usage: Management Console -> search box
            DataSet: [BoxId], [OrganizationId], [OrganizationName], [VehicleId], [Description]
            Error: OrganizationId = -1, OrganizationName = 'Not found'
            Unassigned box: VehicleId = -1, Description = 'Not Assigned'
            Does not exist: empty DataSet
            </summary>
            <param name="boxId">Box Id</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateDurationStatusWithTransaction(System.Int32,System.DateTime,System.Int16,System.Int16,System.DateTime,System.Int16,System.Int16,System.DateTime,System.Int16,System.Int16)">
            <summary>
            Update box duration status.
            </summary>
            <param name="boxId"></param>
            <param name="currCommunicatedDateTime"></param>
            <param name="currStatusSensor"></param>
            <param name="currStatusSpeed"></param>
            <param name="lastCommunicatedDateTime"></param>
            <param name="lastStatusSensor"></param>
            <param name="lastStatusSpeed"></param>
            <param name="prevCommunicatedDateTime"></param>
            <param name="prevStatusSensor"></param>
            <param name="prevStatusSpeed"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateDurationStatus(System.Int32,System.DateTime,System.Int16,System.Int16,System.DateTime,System.Int16,System.Int16,System.DateTime,System.Int16,System.Int16)">
            <summary>
            Update box duration status.
            </summary>
            <param name="boxId"></param>
            <param name="currCommunicatedDateTime"></param>
            <param name="currStatusSensor"></param>
            <param name="currStatusSpeed"></param>
            <param name="lastCommunicatedDateTime"></param>
            <param name="lastStatusSensor"></param>
            <param name="lastStatusSpeed"></param>
            <param name="prevCommunicatedDateTime"></param>
            <param name="prevStatusSensor"></param>
            <param name="prevStatusSpeed"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateStatus(System.Int32,System.Boolean,System.Int64,System.Boolean,System.Boolean,System.DateTime,System.Int16,System.Int16,System.DateTime,System.Int16,System.Int16,System.DateTime,System.Int16,System.Int16)">
            <summary>
            Update box sensor status.
            </summary>
            <param name="boxId"></param>
            <param name="boxArmed"></param>
            <param name="sensorMask"></param>
            <param name="geoFenceEnabled"></param>
            <param name="boxActive"></param>
            <param name="currCommunicatedDateTime"></param>
            <param name="currStatusSensor"></param>
            <param name="currStatusSpeed"></param>
            <param name="lastCommunicatedDateTime"></param>
            <param name="lastStatusSensor"></param>
            <param name="lastStatusSpeed"></param>
            <param name="prevCommunicatedDateTime"></param>
            <param name="prevStatusSensor"></param>
            <param name="prevStatusSpeed"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateDormantStatus(System.Int32,System.DateTime,System.Int16)">
            <summary>
            Update box dormant status.
            </summary>
            <param name="boxId"></param>
            <param name="originatedDateTime"></param>
            <param name="currDormantStatus"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdatePosition(System.Int32,System.DateTime,System.Double,System.Double)">
            <summary>
            Update box position.
            </summary>
            <param name="boxId"></param>
            <param name="lastValidDateTime"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdatePosition(System.Int32,System.DateTime,System.Double,System.Double,System.Int16,System.Int16)">
            <summary>
            Update box position.
            </summary>
            <param name="boxId"></param>
            <param name="lastValidDateTime"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="speed"></param>
            <param name="heading"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxLastInfo(System.Int32)">
            <summary>
            Get box last info
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [BoxId],
            [OriginDateTime],[Latitude],[Longitude],[Speed],[Heading],[StreetAddress],
            [LastCommunicatedDateTime],[SensorMask],[BoxArmed],[GeoFenceEnabled],
            [LastStatusDateTime],[BoxActive],
            [LastStatusSensor],[LastStatusSpeed],[PrevStatusDateTime],[PrevStatusSensor],[PrevStatusSpeed]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxLastInfo(System.Int32,System.Int32)">
            <summary>
            Get box last info
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <returns>DataSet [BoxId],
            [OriginDateTime],[Latitude],[Longitude],[Speed],[Heading],[StreetAddress],
            [LastCommunicatedDateTime],[SensorMask],[BoxArmed],[GeoFenceEnabled],
            [LastStatusDateTime],[BoxActive]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxLastValidGpsDateTime(System.Int32)">
            <summary>
            Get box valid GPS datetime
            </summary>
            <param name="boxId"></param>
            <returns>[OriginDateTime]/// </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxLastCommunicatedDateTime(System.Int32)">
            <summary>
            Get box last communicated datetime
            </summary>
            <param name="boxId"></param>
            <returns>[LastCommunicatedDateTime]/// </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxLastCommunicationInfo(System.Int32)">
            <summary>
            Get box last communicated datetime and sensor mask
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [LastCommunicatedDateTime, Dormant]/// </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.IsArmed(System.Int32)">
            <summary>
            Returns true if box is armed.
            Throw exception in case of error.
            </summary>
            <param name="boxId"></param>
            <returns>
            true - if box is armed
            flase - if not
            </returns>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown DASAppWrongResultException if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.IsActive(System.Int32)">
            <summary>
            Returns true if box is active.
            </summary>
            <param name="boxId"></param>
            <returns>
            true - if box is active
            flase - if not
            </returns>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown DASAppWrongResultException if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateBoxFwChId(System.Int32,System.Int16)">
            <summary>
            Update box fwChId.
            </summary>
            <param name="boxId"></param>
            <param name="fwChId"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown DASAppInvalidValueException if new configuration has different hardware type.</exception>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown DASAppResultNotFoundException if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateBoxFwChId(System.Int32,System.Int16,System.Int16,System.Boolean)">
            <summary>
            Update box fwChId.
            </summary>
            <param name="boxId"></param>
            <param name="newFwId"></param>
            <param name="commModeId"></param>
            <param name="isDual"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown DASAppResultNotFoundException if cannot retrieve  fwChId.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.SetArmed(System.Int32,System.Boolean)">
            <summary>
            Update state(Armed/Disarmed).
            </summary>
            <param name="boxId"></param>
            <param name="armed"></param>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown DASAppResultNotFoundException if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.SetActive(System.Int32,System.Boolean)">
            <summary>
            Update box status
            </summary>
            <param name="boxId"></param>
            <param name="boxActive"></param>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown DASAppResultNotFoundException if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetAllSupportedMessagesByFwChId(System.Int16)">
            <summary>
            Retrieves all supported messages by fwChId
            </summary>
            <param name="fwChId"></param>
            <returns>DataSet [BoxMsgInTypeId],[BoxMsgInTypeName],[AlarmLevel]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxConfigInfo(System.Int32)">
            <summary>
            Get box configuration information. 
            </summary>
            <param name="boxId"></param>
            <returns>DataSet[BoxId],[FwId],[MaxMsgs],[MaxTxtMsgs],
            				[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum] // HW type information
            				[BoxProtocolTypeId],[BoxProtocolTypeName] // box protocol type information
            				[CommModeId],[CommModeName] // box communication mode information
            				[ChPriority]
            </returns>
            <remarks> Ordered by "ChPriority" field </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxConfigInfoFeatures(System.Int32)">
            <summary>
            Get box configuration information. 
            </summary>
            <param name="boxId"></param>
            <returns>DataSet[BoxId],[FwId],[MaxMsgs],[MaxTxtMsgs],
            				[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum] // HW type information
            				[BoxProtocolTypeId],[BoxProtocolTypeName] // box protocol type information
            				[CommModeId],[CommModeName] // box communication mode information
            				[ChPriority]
            </returns>
            <remarks> Ordered by "ChPriority" field </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxConfiguration(System.Int32)">
            <summary>
            Get box configuration information excluding dcl
            </summary>
            <param name="boxId"></param>
            <returns>DataSet[BoxId],[FwId],[MaxMsgs],[MaxTxtMsgs],
            				[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum] // HW type information
            				[BoxProtocolTypeId],[BoxProtocolTypeName] // box protocol type information
            				[CommModeId],[CommModeName] // box communication mode information
            				[ChPriority]
            </returns>
            <remarks> Ordered by "ChPriority" field </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxConfigurationFeatures(System.Int32)">
            <summary>
            Get box configuration information excluding dcl
            </summary>
            <param name="boxId"></param>
            <returns>DataSet[BoxId],[FwId],[MaxMsgs],[MaxTxtMsgs],
            				[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum] // HW type information
            				[BoxProtocolTypeId],[BoxProtocolTypeName] // box protocol type information
            				[CommModeId],[CommModeName] // box communication mode information
            				[ChPriority]
            </returns>
            <remarks> Ordered by "ChPriority" field </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetFwChId(System.Int16,System.Int16,System.Int16)">
            <summary>
            Get firmware channel
            </summary>
            <param name="selectedFwId"></param>
            <param name="selectedPrimeCommMode"></param>
            <param name="selectedSecCommMode"></param>
            <returns>fwChId</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetFwChId(System.Int16,System.Int16)">
            <summary>
            Get firmware channel id
            </summary>
            <param name="selectedFwId"></param>
            <param name="protocolTypeId"></param>
            <returns>fwChId</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxFwChInfo(System.Int32)">
            <summary>
            Get box firmware info. 	
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [BoxId],[FwId],[FwName],[FwChId],[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum],[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetCommandProtocolTypesInfo(System.Int32,System.Int32,System.Int16)">
            <summary>
            Returns box protocol type Ids. 	
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <param name="commandTypeId"></param>
            <returns>DataSet [BoxProtocolTypeId],[BoxProtocolTypeName],[ChPriority]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetOutputProtocolTypesInfo(System.Int32,System.Int32,System.Int16)">
            <summary>
            Retrieves all supported protocol types for current output
            Throws exception in case of wrong result (see TblGenInterfaces class).
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <param name="outputId"></param>
            <returns>DataSet [BoxProtocolTypeId],[BoxProtocolTypeName],[ChPriority]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetSecondaryCommInfo(System.Int32,System.Int32,System.Int16)">
            <summary>
            Retrieves secondary communication info
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <param name="commandID"></param>
            <returns>DataSet [BoxProtocolTypeId],[CommModeId]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetPrimaryCommInfo(System.Int32,System.Int32,System.Int16)">
            <summary>
            Retrieves primary communication info
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <param name="commandID"></param>
            <returns>DataSet [BoxProtocolTypeId],[CommModeId]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.IsSamePrimaryProtocol(System.Int16,System.Int16)">
            <summary>
            Checks if both FW have the same primary protocol
            </summary>
            <param name="oldFwChId "></param>
            <param name="newFwChId "></param>
            <returns>true if it is same, otherwise returns false </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetAlarmInfo(System.Int32,VLF.CLS.Def.Enums.MessageType)">
            <summary>
            Retrieves alarm info for specific message type
            </summary>
            <returns>DataSet [AlarmLevel],[AlarmLevelName],[CreateAlarm]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <param name="boxId"></param>
            <param name="boxMsgInTypeId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Box.IsAlarm(VLF.CLS.Def.Enums.AlarmSeverity)">
            <summary>
            Check if we should create alarm for current severity
            </summary>
            <param name="alarmSeverity"></param> 
            <returns></returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateMsgSeverity(System.Int32,VLF.CLS.Def.Enums.MessageType,VLF.CLS.Def.Enums.AlarmSeverity)">
            <summary>
            Update box message severity
            </summary>
            <param name="boxId"></param>
            <param name="boxMsgInTypeId"></param>
            <param name="alarmLevel"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.AddMsgSeverity(System.Int32,System.Data.DataSet)">
            <summary>
            Add new message severity to the box.
            </summary>
            <param name="boxId"></param>
            <param name="dsBoxMessagesSeverity"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown if box messages severities are empty.</exception>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if message severity already exist for this box.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetAllSupportedMessagesByBoxId(System.Int32)">
            <summary>
            Retrieves all supported messages by box
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [BoxMsgInTypeId],[BoxMsgInTypeName],[AlarmLevel}</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetEmptyStreetAddress(System.Int32)">
            <summary>
            Retrieves records with empty StreetAddresses
            </summary>
            <returns>DataSet [BoxId],[Latitude],[Longitude]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetEmptyNearestLandmark">
            <summary>
            Retrieves records with empty NearestLandmark
            </summary>
            <returns>DataSet [BoxId],[Latitude],[Longitude]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="cmdTimeOut"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateNearestLandmark(System.Int32,System.String)">
            <summary>
            Updates record with nearestLandmark
            </summary>
            <param name="boxId"></param>
            <param name="nearestLandmark"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if street address already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateStreetAddress(System.Int32,System.String,System.Int32,System.Int16,System.Int16,System.String,System.Int16)">
            <summary>
            Updates record with street address and/or nearestLandmark
            </summary>
            <param name="boxId"></param>
            <param name="streetAddress"></param>
            <param name="cmdTimeOut"></param>
            <param name="usageYear"></param>
            <param name="usageMonth"></param>
            <param name="nearestLandmark"></param>
            <param name="mapId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Box.AddBoxSettings(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Add new box.
            </summary>
            <param name="boxId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="commModeId"></param>
            <param name="maxMsgs"></param>
            <param name="maxTxtMsgs"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if box already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.DeleteBoxSettings(System.Int32)">
            <summary>
            Delete existing box.
            Throws exception in case of wrong result (see TblOneIntPrimaryKey class).
            </summary>
            <param name="boxId"></param> 
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateBoxSettings(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Update box config Id.
            Throw exception in case of error.
            	- DASAppResultNotFoundException
            	- DASException
            </summary>
            <param name="boxId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="commModeId"></param>
            <param name="maxMsgs"></param>
            <param name="maxTxtMsgs"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxSettingsInfo(System.Int32)">
            <summary>
            Retrieves box max messages per protocol.
            </summary>
            <returns>DataSet [BoxProtocolTypeId],[CommModeId][MaxMsgs],[MaxTxtMsgs]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateProtocolTypeCommMode(System.Int32,System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="boxId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="commModeId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxCmdName(System.Int16)">
            <summary>
            Retrieves command name by id
            </summary>
            <param name="boxCmdOutTypeId"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.AddBox(System.Int32,System.Int16,System.Boolean,System.Boolean,System.Int32,System.Int64,System.Data.DataSet)">
            <summary>
            Add a new box with firmware features
            </summary>
            <param name="boxId"></param>
            <param name="fwChId"></param>
            <param name="boxArmed"></param>
            <param name="boxActive"></param>
            <param name="organizationId"></param>
            <param name="features"></param>
            <param name="dsBoxProtocolMaxMsgs"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if box already exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.UpdateBoxFeatures(System.Int32,System.Int64)">
            <summary>
            Update box features mask
            </summary>
            <param name="boxId">Box ID</param>
            <param name="features">Box Feature Mask</param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown DASAppInvalidValueException if new configuration has different hardware type.</exception>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown DASAppResultNotFoundException if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Box.IsIDAvailable(System.Int32)">
            <summary>
            Checks if Id is available
            </summary>
            <param name="boxId">Box Id</param>
            <returns>True if no box with current Id exists, false if yes</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetBoxesInfo(System.Boolean,System.Int32)">
            <summary>
            Get org. boxes, primary channels only, usage: Man. Console
            </summary>
            <param name="assigned">True - assigned, false - unassigned</param>
            <param name="organizationId">Org. Id</param>
            <returns>Boxes dataset:[vlfBox.BoxId, vlfBox.OrganizationId, vlfFirmwareChannelReference.FwChId, vlfFirmware.FwId, 
            vlfFirmware.FwName, vlfBoxHwType.BoxHwTypeId, vlfBoxHwType.BoxHwTypeName, vlfChannels.ChName, 
            vlfBoxProtocolType.BoxProtocolTypeId, vlfBoxProtocolType.BoxProtocolTypeName, vlfCommMode.CommModeId, 
            vlfCommMode.CommModeName, OAPPort]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.GetAllBoxIds(System.Int32)">
            <summary>
            Get all boxes for a company (assigned and unassigned)
            Usage: Man. console
            </summary>
            <param name="organizationId">Organization Id</param>
            <returns>ArrayList of Box Ids</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.ChangeOrganization(System.Int32,System.Int32,System.Int32)">
            <summary>
            Move Box to another Organization
            </summary>
            <param name="userId">Must be hgi user</param>
            <param name="boxId">Box Id to move</param>
            <param name="newOrgId">New organization Id</param>
            <returns>Updated rows</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.IsAssigned(System.Int32)">
            <summary>
            Check if current box is assigned to a vehicle
            </summary>
            <param name="boxId"></param>
            <returns>True if assigned, otherwise - false</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Box.AddMdtOTA(System.Int32,System.Int16,System.String)">
            <summary>
            Add new MdtOTA process record
            </summary>
            <param name="boxId"></param>
            <param name="customProp"></param>
        </member>
        <member name="T:VLF.DAS.Logic.StateRow">
            <summary>
            Parsing row data into fields
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.StateRow.Print">
            <summary>
            Prints the row
            </summary>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.Logic.Notification">
              \class      Notification
            \brief      this is one of the classes which will work both with the current events and with the history of them
        </member>
        <member name="F:VLF.DAS.Logic.Notification.DataFormatForNotifications">
            <summary>
                    BE VERY CAREFUL, the string notifications are in the same order as the Enums.NotificationType 
            </summary>
            <comment>
                    public enum NotificationType : short
                    {
                       No = 0,
                       DTC_Codes = 1,
                       MIL_Light_On = 2,
                       Service_Maintenance = 3,
                       Route_adherence = 4,
                       Abnormal_GPS = 5,           /// this is detected if the GPS bounce too far from the previous location
                       Abnormal_GPS_time = 6,      /// too much in the future or in the history
                       Fuel_transaction = 7,
                       Off_working_hours = 8,
                       Wireless_signal_lost = 9
                    }
              please see table vlfNotificationType in production
            </comment>
            
                     
        </member>
        <member name="M:VLF.DAS.Logic.Notification.GetData(VLF.CLS.Def.Enums.NotificationType,System.Object)">
            <summary>
                    that is the string which is saved in vlfNotification
            </summary>
            <param name="type"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Notification.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Notification.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Notification.AcknowledgeNotification(System.Int64,System.Int32,System.DateTime,System.String)">
            <summary>
                    updates the notification and moves it in history
                    maybe you don't allow them to close notifications
            </summary>
            <param name="notificationId"></param>
            <param name="userId"></param>
            <param name="when"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.Logic.PersonInfo">
            <summary>
            Provides interface to personal information functionality in database
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.AddPerson(VLF.CLS.Def.Structures.PersonInfoStruct@)">
            <summary>
            Add new person information.
            </summary>
            <param name="info"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if driver license or person alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.UpdateInfo(VLF.CLS.Def.Structures.PersonInfoStruct)">
            <summary>
            Update person information.
            </summary>
            <param name="info"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if person does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.DeletePersonByPersonId(System.String)">
            <summary>
            Delete existing person.
            </summary>
            <returns>rows affected</returns>
            <param name="personId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if person with person id does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.GetPersonInfoByDriverLicense(System.String)">
            <summary>
            Retrieves user info
            </summary>
            <returns>
            DataSet 
            [PersonId],[DriverLicense],[FirstName],[LastName],[MiddleName],
            [Birthday],[Address],[City],[StateProvince],[Country],
            [PhoneNo1],[PhoneNo2],[CellNo],[LicenseExpDate],[LicenseEndorsements],
            [Height],[Weight],[Gender],[EyeColor],[HairColor],[IdMarks],[Certifications],
            [Description]
            </returns>
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.GetAllPersonsInfo">
            <summary>
            Retrieves user info
            </summary>
            <returns>
            DataSet 
            [PersonId],[DriverLicense],[FirstName],[LastName],[MiddleName],
            [Birthday],[Address],[City],[StateProvince],[Country],
            [PhoneNo1],[PhoneNo2],[CellNo],[LicenseExpDate],[LicenseEndorsements],
            [Height],[Weight],[Gender],[EyeColor],[HairColor],[IdMarks],[Certifications],
            [Description]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.GetAllPersonsInfoByOrganizationId(System.Int32)">
            <summary>
            Retrieves all persons info by organization id
            </summary>
            <returns>
            DataSet 
            [PersonId],[DriverLicense],[FirstName],[LastName],[MiddleName],
            [Birthday],[Address],[City],[StateProvince],[Country],
            [PhoneNo1],[PhoneNo2],[CellNo],[LicenseExpDate],[LicenseEndorsements],
            [Height],[Weight],[Gender],[EyeColor],[HairColor],[IdMarks],[Certifications],
            [Description]
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.GetAllUnassignedPersonsInfoByOrganizationId(System.Int32)">
            <summary>
            Retrieves all unassigned to organization persons info
            </summary>
            <returns>
            DataSet 
            [PersonId],[DriverLicense],[FirstName],[LastName],[MiddleName],
            [Birthday],[Address],[City],[StateProvince],[Country],
            [PhoneNo1],[PhoneNo2],[CellNo],[LicenseExpDate],[LicenseEndorsements],
            [Height],[Weight],[Gender],[EyeColor],[HairColor],[IdMarks],[Certifications],
            [Description]
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.GetPersonInfoByPersonId(System.String)">
            <summary>
            Retrieves user info
            </summary>
            <returns>
            DataSet 
            [PersonId],[DriverLicense],[FirstName],[LastName],[MiddleName],
            [Birthday],[Address],[City],[StateProvince],[Country],
            [PhoneNo1],[PhoneNo2],[CellNo],[LicenseExpDate],[LicenseEndorsements],
            [Height],[Weight],[Gender],[EyeColor],[HairColor],[IdMarks],[Certifications],
            [Description]
            </returns>
            <param name="personId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.GetAllPersonsIds">
            <summary>
            Retrieves all persons ids
            </summary>
            <returns> ArrayList [PersonId] </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.GetAllUnassignedPersonsIds">
            <summary>
            Retrieves all unassigned persons ids
            </summary>
            <returns> ArrayList [PersonId] </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.GetAllUnassignedPersons">
            <summary>
            Retrieves all unassigned persons
            </summary>
            <returns> DataSet [PersonId, FirstName, LastName] </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.PersonInfo.GetAllPersonsInfo(System.Object)">
            <summary>
            Get all persons for organization
            </summary>
            <param name="orgId">Organization Id</param>
            <returns>Person info DataSet</returns>
        </member>
        <member name="T:VLF.DAS.Logic.MessageQueue">
            <summary>
            Provides interface to message queues and history functionality in database
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.AddMsgIn(VLF.CLS.Def.CMFIn)">
            <summary>
            Add new Msg in CMFIn format.
            </summary>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Throws DASAppDataAlreadyExistsException after number of attemps to add new information.</exception>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in other all error cases.</exception>
            <param name="cMFIn"></param>
            <comment>because MessageQueue could be called my multiple threads I added a critical section
            </comment>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.DeleteAllMsgInRecords">
            <summary>
            Delete all rows.
            </summary>
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.FlushBoxMsgIn(System.Int32)">
            <summary>
            Removes all messages forMsgIn by specified boxID
            </summary>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in other all error cases.</exception>
            <param name="boxID"></param>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.DrawNextXCmfMsgIn(System.Int32@,VLF.CLS.Def.CMFIn[]@)">
            <summary>
            Returns next message (older one) in the CMF format or null in case of no more results. 	
            Add new record to MsgInHst table without Blob data (only blob size).
            If record alredy exists, try to add new one with DateTime + VLF.CLS.Def.Const.nextDateTimeMillisecInterval
            Deletes old data by DateTimeReceived field.
            </summary>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Throws DASAppViolatedIntegrityConstraintsException after max retries (VLF.CLS.Def.Const.violatedIntegrityMaxRetries).</exception>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in other all error cases.</exception>
            <returns>next CMF msg</returns>		
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetVehiclesInHistoryByAddress(System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
            Get VehiclesInHistory By Address
            </summary>
            <param name="fleetId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetVehiclesInHistoryByLocation(System.Int32,System.DateTime,System.DateTime,System.Double,System.Double)">
            <summary>
            Get VehiclesInHistory By Location
            </summary>
            <param name="fleetId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.AddMsgOut(VLF.CLS.Def.CMFOut,System.SByte,System.Int16,System.Int16,System.Int32)">
            <summary>
            Add new Msg in CMFOut format.
            </summary>
            <param name="cMFOut"></param>
            <param name="priority"></param>
            <param name="dclId"></param>
            <param name="aslId"></param>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Throws DASAppDataAlreadyExistsException after number of attemps to add new information.</exception>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in other all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.DeleteAllMsgOutRecords">
            <summary>
            Delete all rows.
            </summary>
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.DrawNextCmfMsgOut(System.Int16)">
            <summary>
            Returns next message (older one) in CMFOut format or null if result hasn't been found. 	
            Add new record to MsgOutHst table.
            If record alredy exists, try to add new one with DateTime + VLF.CLS.Def.Const.nextDateTimeMillisecInterval
            Deletes old data by DateTime field.
            </summary>
            <param name="dclId"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Throws DASAppViolatedIntegrityConstraintsException after max retries (VLF.CLS.Def.Const.violatedIntegrityMaxRetries).</exception>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in other all error cases.</exception>
            <returns>next CMF msg</returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.DrawNextCmfMsgOut(System.Int16,System.DateTime)">
            <summary>
            Returns next message (older one) in CMFOut format or null if result hasn't been found. 	
            Add new record to MsgOutHst table.
            If record alredy exists, try to add new one with DateTime + VLF.CLS.Def.Const.nextDateTimeMillisecInterval
            Deletes old data by DateTime field.
            </summary>
            <param name="dclId"></param>
            <param name="currDateTime"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Throws DASAppViolatedIntegrityConstraintsException after max retries (VLF.CLS.Def.Const.violatedIntegrityMaxRetries).</exception>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in other all error cases.</exception>
            <returns>next CMF msg</returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.SetAck(System.Int32,System.DateTime,System.String)">
            <summary>
            Update acknowledged fields 
            </summary>
            <param name="boxId"></param>
            <param name="dateTime"></param>
            <param name="ackVal"></param>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.SetAck(System.Int32,VLF.CLS.Def.Enums.CommandType,System.String)">
            <summary>
            Update acknowledged fields 
            </summary>
            <param name="boxId"></param>
            <param name="commandType"></param>
            <param name="ackVal"></param>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.CheckMessageInMsgOut(System.Int32,VLF.CLS.Def.Enums.CommandType)">
            <summary>
            Check message in MsgOut table
            </summary>
            <param name="boxId"></param>
            <param name="commandType"></param>
            <returns>true if exists, otherwise returns false</returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetLastSingleMessageFromHistory(System.Int32,System.Int32,VLF.CLS.Def.Enums.MessageType)">
            <summary>
            Retrieves last message for current box from the history
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="msgType"></param>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed]
            </returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetLastDoSStartedFromHistory(System.String)">
            <summary>
            Retrieves last DoS message box id by client ip
            </summary>
            <param name="clientIp"></param>
            <returns> BoxId </returns>
            <remarks> If information does not exist, return 0</remarks>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetFleetMessagesFromHistory(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean@)">
            <summary>
            Retrieves messages from history by fleet id
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="includeCoordinate"></param>
            <param name="includeSensor"></param>
            <param name="includePositionUpdate"></param>
            <param name="includeInvalidGps"></param>
            <param name="requestOverflowed"></param>
            <remarks>
            1. Retrieves only specific messages from the history:
            Coordinate,Sensor,Speed,Fence,PositionUpdate,IPUpdate,KeyFobPanic
            2. Parse CustomProp field for Sensor and Fence messages, and add info into MsgDetails field
            3. Incase of IPUpdate message add new IP into MsgDetails field
            </remarks>
            <returns>
            DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed],[MsgDetails],[MsgDirection],[Acknowledged],[Scheduled]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetMessagesFromHistoryByVehicleId(System.Int32,System.Int64,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int16,System.String,System.String,System.String,System.Boolean@,System.Int32@)">
            <summary>
            Retrieves messages from history by vehicle Id
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="includeCoordinate"></param>
            <param name="includeSensor"></param>
            <param name="includePositionUpdate"></param>
            <param name="includeInvalidGps"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],
            [StreetAddress],[SequenceNum],[BoxArmed],[MsgDetails],[MsgDirection],
            [Acknowledged],[Scheduled]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetFleetOffHoursInfo(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean@,System.Int32@)">
            <summary>
            Retrieves off hours information from history by fleet id
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="dayFromHour"></param>
            <param name="dayFromMin"></param>
            <param name="dayToHour"></param>
            <param name="dayToMin"></param>
            <param name="weekendFromHour"></param>
            <param name="weekendFromMin"></param>
            <param name="weekendToHour"></param>
            <param name="weekendToMin"></param>
            <param name="includeCoordinate"></param>
            <param name="includeSensor"></param>
            <param name="includePositionUpdate"></param>
            <param name="includeInvalidGps"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <remarks>
            1. Retrieves only specific messages from the history:
            Coordinate,Sensor,Speed,Fence,PositionUpdate,IPUpdate,KeyFobPanic
            2. Parse CustomProp field for Sensor and Fence messages, and add info into MsgDetails field
            3. Incase of IPUpdate message add new IP into MsgDetails field
            </remarks>
            <returns>
            DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed],[MsgDetails],[MsgDirection],[Acknowledged],[Scheduled]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetVehicleOffHoursInfo(System.Int32,System.Int64,System.DateTime,System.DateTime,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean@,System.Int32@)">
            <summary>
            Retrieves off hours information from history by vehicle Id
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="dayFromHour"></param>
            <param name="dayFromMin"></param>
            <param name="dayToHour"></param>
            <param name="dayToMin"></param>
            <param name="weekendFromHour"></param>
            <param name="weekendFromMin"></param>
            <param name="weekendToHour"></param>
            <param name="weekendToMin"></param>
            <param name="includeCoordinate"></param>
            <param name="includeSensor"></param>
            <param name="includePositionUpdate"></param>
            <param name="includeInvalidGps"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],
            [StreetAddress],[SequenceNum],[BoxArmed],[MsgDetails],[MsgDirection],
            [Acknowledged],[Scheduled]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetMessageFromHistory(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Retrieves message from history by box id and DateTimeReceived
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="originDateTime"></param>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],
            [StreetAddress],[SequenceNum],[BoxArmed]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetLastMessagesFromHistory(System.Int16,System.Int32,System.Int16,System.DateTime,System.DateTime)">
            <summary>
            Retrieves last [num of records] messages from the history
            </summary>
            <param name="numOfRecords"></param>
            <param name="boxId"></param>
            <param name="msgType"></param>
            <param name="from"></param>
            <param name="to"></param>
            <remarks>
            Purpose:	Debug communication (vlfHistory)
            Note:		Does not aggregate user preferences into result (TimeZone,Metric/Imperial units,etc.)
            </remarks>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],
            [StreetAddress],[SequenceNum],[BoxArmed]
            </returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetLastUploadFirmwareMessageFromHistory(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Retrieves last [num of records] messages from the history
            </summary>
            <param name="boxId"></param>
            <param name="from"></param>
            <param name="userId"></param>
            <remarks>
            Purpose:	Debug communication (vlfHistory)
            Note:		Does not aggregate user preferences into result (TimeZone,Metric/Imperial units,etc.)
            </remarks>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],
            [StreetAddress],[SequenceNum],[BoxArmed]
            </returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetLastMessagesFromHistoryByOrganization(System.Int16,System.Int32,System.Int32,System.Int32,System.Int16,System.DateTime,System.DateTime)">
            <summary>
            Retrieves last [num of records] messages from the history
            </summary>
            <param name="numOfRecords"></param>
            <param name="boxId"></param>
            <param name="msgType"></param>
            <param name="from"></param>
            <param name="to"></param>
            <remarks>
            Purpose:	Debug communication (vlfHistory)
            Note:		Does not aggregate user preferences into result (TimeZone,Metric/Imperial units,etc.)
            </remarks>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],
            [StreetAddress],[SequenceNum],[BoxArmed]
            </returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetLastMessagesOutFromHistory(System.Int16,System.Int32,System.Int16,System.DateTime,System.DateTime)">
            <summary>
            Retrieves last [num of records] messages from the history
            </summary>
            <param name="numOfRecords"></param>
            <param name="boxId"></param>
            <param name="cmdType"></param>
            <param name="from"></param>
            <param name="to"></param>
            <remarks>
            Purpose:	Debug communication (vlfHistory)
            Note:		Does not aggregate user preferences into result (TimeZone,Metric/Imperial units,etc.)
            </remarks>
            <returns>DataSet [DateTime],[BoxId],[UserId],[Priority],[DclId],[AslId],
            [BoxCmdOutTypeId],[BoxCmdOutTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[CustomProp],[SequenceNum],[Acknowledged]
            </returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetLastMessagesOutFromHistoryByOrganization(System.Int16,System.Int32,System.Int32,System.Int32,System.Int16,System.DateTime,System.DateTime)">
            <summary>
            Retrieves last [num of records] messages from the history
            </summary>
            <param name="numOfRecords"></param>
            <param name="boxId"></param>
            <param name="cmdType"></param>
            <param name="from"></param>
            <param name="to"></param>
            <remarks>
            Purpose:	Debug communication (vlfHistory)
            Note:		Does not aggregate user preferences into result (TimeZone,Metric/Imperial units,etc.)
            </remarks>
            <returns>DataSet [DateTime],[BoxId],[UserId],[Priority],[DclId],[AslId],
            [BoxCmdOutTypeId],[BoxCmdOutTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[CustomProp],[SequenceNum],[Acknowledged]
            </returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetMsgOutLastSequenceNumber(System.Int32,System.Int16)">
            <summary>
            Get last sequence number from the message out history
            </summary>
            <param name="boxId"></param>
            <param name="boxProtocolTypeId"></param>
            <returns>Last Sequence Number</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetLastCommandFromHistory(System.Int32,System.DateTime)">
            <summary>
            Retrieves last UploadFirmwareStatus command from the history
            </summary>
            <param name="boxId"></param>
            <param name="fromDateTime"></param>
            <returns>DataSet [Description],[FwName],[FwId],[DateTime],[BoxId],[CustomProp],[Acknowledged]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetLastMessagesFromHistoryIgnored(System.Int16,System.Int32,System.Int16,System.DateTime,System.DateTime)">
            <summary>
            Retrieves last [num of records] ignored messages from the history
            </summary>
            <param name="numOfRecords"></param>
            <param name="boxId"></param>
            <param name="msgType"></param>
            <param name="from"></param>
            <param name="to"></param>
            <remarks>
            Purpose:	Debug communication (vlfHistory)
            Note:		Does not aggregate user preferences into result (TimeZone,Metric/Imperial units,etc.)
            </remarks>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed]
            </returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetDetailedMessageInFromHistory(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Retrieves detailed message in from history by box id and DateTime
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="originDateTime"></param>
            <returns>DataSet [BoxId],[DateTime],
            [MsgTypeId],[MsgTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[StreetAddress],[BoxArmed],
            [UserName],[FirstName],[LastName]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetDetailedMessageOutFromHistory(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Retrieves detailed message out from history by box id and DateTime
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="dateTime"></param>
            <returns>DataSet [BoxId],[DateTime],
            [MsgTypeId],[MsgTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [ValidGps],[Latitude],[Longitude],[Speed],[Heading],[SensorMask],
            [CustomProp],[StreetAddress],[BoxArmed],
            [UserName],[FirstName],[LastName]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetEmptyStreetAddressFromHistory(System.Int32)">
            <summary>
            Retrieves records with empty StreetAddress fields from the MsgIn history
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetLandMarksInfoByBoxId(System.Int32)">
            <summary>
            Retrieves landmarks info by box id 
            </summary>
            <returns>
            DataSet [OrganizationId],[LandmarkName],[Latitude],[Longitude],
            [Description],[ContactPersonName],[ContactPhoneNum],[Radius],
            [Email],[TimeZone],[DayLightSaving],[AutoAdjustDayLightSaving],
            [StreetAddress]
            </returns>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.UpdateStreetAddressInHistory(System.Int32,System.DateTime,System.String,System.Int32,System.Int16,System.Int16,System.String,System.Int16)">
            <summary>
            Updates record with street address and/or nearestLandmark
            </summary>
            <param name="boxId"></param>
            <param name="originDateTime"></param>
            <param name="streetAddress"></param>
            <param name="cmdTimeOut"></param>
            <param name="usageYear"></param>
            <param name="usageMonth"></param>
            <param name="nearestLandmark"></param>
            <param name="mapId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.UpdateStreetAddressInBoxAndHistory(System.Int32,System.DateTime,System.String,System.Int32,System.Int16,System.Int16,System.String,System.Int16)">
            <summary>
            Updates record with street address and/or nearestLandmark
            </summary>
            <param name="boxId"></param>
            <param name="originDateTime"></param>
            <param name="streetAddress"></param>
            <param name="cmdTimeOut"></param>
            <param name="usageYear"></param>
            <param name="usageMonth"></param>
            <param name="nearestLandmark"></param>
            <param name="mapId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.AddMsgInHst(VLF.CLS.Def.CMFIn)">
            <summary>
            Add new Msg in CMFIn format into the history.
            </summary>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Throws DASAppDataAlreadyExistsException after number of attemps to add new information.</exception>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in other all error cases.</exception>
            <param name="cMFIn"></param>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.AddTextMsg(System.Int32,System.DateTime,System.Int16,System.String,System.Int16,System.Int32,System.String)">
            <summary>
            Add new text message
            </summary>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Throws DASAppDataAlreadyExistsException information already exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all other error cases.</exception>
            <returns> current message id or -1 in case of error</returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetTextMessagesFullInfo(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Retrieves text messages full information
            </summary>
            <remarks>
            all box Ids -&gt; VLF.CLS.Def.Const.unassignedIntValue
            from DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            to DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            </remarks>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="directionType"></param>
            <returns>DataSet [VehicleId],[LicensePlate],[From],[To],
            [MsgId],[BoxId],[MsgDateTime],[TxtMsgTypeId],
            [MsgBody],[MsgDirection],[MsgResponse],[ResponseDateTime],[UserId]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetMessageFullInfo(System.Int32,System.Int32,System.Int64)">
            <summary>
            Retrieves message info
            </summary>
            <param name="userId"></param>
            <param name="msgId"></param>
            <param name="vehicleId"></param>
            <returns>DataSet [VehicleId],[LicensePlate],[From],[To],
            [MsgId],[BoxId],[MsgDateTime],[TxtMsgTypeId],
            [MsgBody],[MsgDirection],[MsgResponse],[ResponseDateTime],[UserId],
            [Acknowledged],[UserName],
            [StreetAddress],[Latitude],[Longitude],[Speed],[Heading]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.SetMsgResponse(System.Int32,System.DateTime,System.String)">
            <summary>
            Save message response
            </summary>
            <param name="msgId"></param>
            <param name="respondDateTime"></param>
            <param name="msgResponse"></param>
            <returns></returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.SetTextMsgResponse(System.Int32,System.DateTime,System.String)">
            <summary>
                    Save message response
            </summary>
            <param name="msgId"></param>
            <param name="respondDateTime"></param>
            <param name="msgResponse"></param>
            <returns></returns>
            <comment>
                    that is the part which enforces using vlfMsgTextNew, it is called only from SLS (I hope)
                    
            </comment>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.SetMsgUserId(System.Int32,System.Int32)">
            <summary>
            Set message user
            </summary>
            <param name="msgId"></param>
            <param name="userId"></param>
            <returns></returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.SetTxtMsgAck(System.Int32,System.String)">
            <summary>
            Set message ack
            </summary>
            <param name="msgId"></param>
            <param name="ack"></param>
            <returns></returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetUserTextMessagesFullInfo(System.Int32,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Retrieves user's messages 
            </summary>
            <remarks>
            from DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            to DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            1. In messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.MdtText
            2. Out messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.ClientText
            3. Both messages directions -&gt; MdtText,ClientText (all visible to client messages)
            </remarks>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="directionType"></param>
            <returns>DataSet [VehicleId],[LicensePlate],[From],[To],
            [MsgId],[BoxId],[MsgDateTime],[TxtMsgTypeId],
            [MsgBody],[MsgDirection],[MsgResponse],[ResponseDateTime],[UserId]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetFleetTextMessagesFullInfo(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Retrieves fleet's messages
            </summary>
            <remarks>
            from DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            to DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            1. In messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.MdtText
            2. Out messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.ClientText
            3. Both messages directions -&gt; MdtText,ClientText (all visible to client messages)
            </remarks>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="directionType"></param>
            <returns>DataSet [VehicleId],[LicensePlate],[From],[To],
            [MsgId],[BoxId],[MsgDateTime],[TxtMsgTypeId],
            [MsgBody],[MsgDirection],[MsgResponse],[ResponseDateTime],[UserId],[Scheduled]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetUserTextMessagesShortInfo(System.Int32,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Retrieves user's messages 
            </summary>
            <remarks>
            from DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            to DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            1. In messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.MdtText
            2. Out messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.ClientText
            3. Both messages directions -&gt; MdtText,ClientText (all visible to client messages)
            </remarks>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="directionType"></param>
            <returns>DataSet [VehicleId],[Description],[LicensePlate],
            [MsgId],[BoxId],[MsgDateTime],[MsgBody (20)]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetFleetTxtMsgs(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Retrieves message info
            </summary>
            <param name="userId"></param>
            <param name="msgId"></param>
            <param name="vehicleId"></param>
            <returns>DataSet [VehicleId],[LicensePlate],[From],[To],
            [MsgId],[BoxId],[MsgDateTime],[TxtMsgTypeId],
            [MsgBody],[MsgDirection],[MsgResponse],[ResponseDateTime],[UserId],
            [Acknowledged],[UserName],
            [StreetAddress],[Latitude],[Longitude],[Speed],[Heading]</returns>
            <exception cref="T:VLF.ERR.DASException">Throws DASException in all error cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetMessagesFromHistoryByFleetId(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Retrieves messages from history by fleet Id
            </summary>
            <param name="fleetId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <remarks>
            1. Retrieves only specific messages from the history:
            Coordinate,Sensor,Speed,Fence,PositionUpdate,IPUpdate,KeyFobPanic
            2. Parse CustomProp field for Sensor and Fence messages, and add info into MsgDetails field
            3. Incase of IPUpdate message add new IP into MsgDetails field
            </remarks>
            <returns>
            DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed],[MsgDetails],[MsgDirection],[Acknowledged],[Scheduled]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.AddTextMsg(VLF.CLS.Def.CMFIn,System.Int16)">
            <summary>
                  add latitude/longitude info for every message
            </summary>
            <param name="cmfIn"></param>
            <param name="txtMsgType"></param>
            <param name="msgDirection"></param>
            <param name="userId"></param>
            <param name="strAck"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetInvalidGPSStatistic(System.Int32,System.Int32)">
            <summary>
            Retrieves statistic for invalid GPS within 24 hours
            </summary>
            <param name="InvalidGPSPercent"></param>
            <param name="Hours"></param>
            <returns>
            DataSet [BoxId],[LicensePlate],[VehicleId],[Description],
            [OrganizationName],[InvalidMsgs],[ValidMsgs],[PercentInvalidMsgs]
            </returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetBoxesWithoutIpUpdates(System.Int32)">
            <summary>
            Retrieves boxes without IP Updates  for all boxes within 24 hours
            </summary>
            <param name="Hours"></param>
            <returns>
            DataSet [BoxId],[LicensePlate],[VehicleId],[Description],
            [OrganizationName]
            </returns>
        </member>
        <member name="M:VLF.DAS.Logic.MessageQueue.GetBoxesReportedFrequency(System.Int32,System.Int32,System.Int16)">
            <summary>
            Retrieves boxes reported Frequency  for all boxes within 24 hours
            </summary>
            <param name="Hours"></param>
            <param name="TotalMsg"></param>
            <param name="OrganizationId"></param>
            <returns>
            DataSet [BoxId],[TotalMessages],[OrganizationName]
            </returns>
        </member>
        <member name="T:VLF.DAS.Logic.Maintenance">
            <summary>
            Provides interface to maintenance functionality in database
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.CleanUpAllTables">
            <summary>
            CleanUp all data from all tables.
            </summary>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.CleanUpAllDynamicTables">
            <summary>
            CleanUp all data from all tables.
            </summary>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.InitStaticTables">
            <summary>
            Fill all static tables with data from enums.
            Throws DASException exception in case of wrong result.
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.FillBoxProtocolTypeCmdOutType(System.Int16,VLF.CLS.Def.Enums.CommandType[],System.Int16[])">
            <summary>
            Fills vlfBoxProtocolTypeCmdOutType table with protocol specific commands.
            </summary>
            <param name="boxProtocolType"></param>
            <param name="cmdOutTypes"></param>
            <param name="commAddressType"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.FillBoxProtocolTypeMsgInType(System.Int16,VLF.CLS.Def.Enums.MessageType[])">
            <summary>
            Fills vlfBoxProtocolTypeMsgInType table with protocol specific messages.
            </summary>
            <param name="boxProtocolType"></param>
            <param name="msgInTypes"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.CleanUpDynamicTbls">
            <summary>
            CleanUp all dynamic data tables.
            </summary>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.DeleteAllRecords(System.String)">
            <summary>
            Delete all rows.
            </summary>
            <param name="tableName"></param>
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.FillBoxMsgTypes">
            <summary>
            Fills vlfBoxMsgInType table with message id and name.
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.FillTxtMsgTypes">
            <summary>
            Fills vlfTxtMsgType table with message id and name.
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.FillCommModes">
            <summary>
            Fills vlfCommMode table with communication mode id and name.
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.FillCommAddressType">
            <summary>
            Fills vlfCommAddressType table with communication address type id and name.
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.FillBoxCommandTypes">
            <summary>
            Fills vlfBoxCmdOutType table with message id and name.
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.FillBoxProtocolTypes">
            <summary>
            Fills vlfBoxProtocolType table with protocol id and name.
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.FillUserGroup">
            <summary>
            Fills vlfUserGroup table with user group id and name.
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.FillPreferences">
            <summary>
            Fills vlfPreference table with preference id and name.
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.AddNewRow(System.String,System.String,System.Int16,System.String,System.Int16,System.String,System.String,System.String)">
            <summary>
            Add new row.
            Throws exception in case of wrong result.
            	- DASException
            	- DASAppDataAlreadyExistsException
            </summary>
            <param name="tableName"></param>
            <param name="rowFieldName1"></param>
            <param name="rowFieldValue1"></param>
            <param name="rowFieldName2"></param>
            <param name="rowFieldValue2"></param>
            <param name="rowFieldName3"></param>
            <param name="rowFieldValue3"></param>
            <param name="msgPostfix"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.AddNewRow(System.String,System.String,System.Int16,System.String,System.String,System.String)">
            <summary>
            Add new row.
            Throws exception in case of wrong result.
            	- DASException
            	- DASAppDataAlreadyExistsException
            </summary>
            <param name="tableName"></param>
            <param name="rowFieldName1"></param>
            <param name="rowFieldValue1"></param>
            <param name="rowFieldName2"></param>
            <param name="rowFieldValue2"></param>
            <param name="msgPostfix"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.IsFieldValueExist(System.String,System.String,System.Int16)">
            <summary>
            Returns true if field with specific value exists in table.
            Throws exception in case of wrong result.
            	- DASException
            	- DASAppDataAlreadyExistsException
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.GetCmdTypeLenByProtocolType(System.Int16,VLF.CLS.Def.Enums.CommandType)">
            <summary>
            Retrieves command len by protocol type
            </summary>
            <param name="protocolType"></param>
            <param name="cmdType"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Maintenance.GetMsgTypeLenByProtocolType(System.Int16,VLF.CLS.Def.Enums.MessageType)">
            <summary>
            Retrieves msg len by protocol type
            </summary>
            <param name="protocolType"></param>
            <param name="msgType"></param>
        </member>
        <member name="T:VLF.DAS.Logic.Fleet">
            <summary>
            Provides interface to fleet functionality in database
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.AddVehicleToFleet(System.Int32,System.Int64)">
            <summary>
            Add new vehicle to fleet.
            </summary>
            <param name="vehicleId"></param>
            <param name="fleetId"></param>
            <returns>Int</returns>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown if unable to retrieve organization info for current fleet.</exception>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if fleet and vehicle do no assigned to same organization..</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.DeleteVehicleFromFleet(System.Int32,System.Int64)">
            <summary>
            Delete existing vehicle from the fleets.
            </summary>
            <param name="fleetId"></param> 
            <param name="vehicleId"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.DeleteAllVehiclesFromFleet(System.Int32)">
            <summary>
            Delete existing vehicle assignments from the fleet and the fleet.
            </summary>
            <param name="fleetId"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetAllUnassingToFleetsVehiclesInfo(System.Int32)">
            <summary>
            Retreive unassigned to any fleet vehicles.
            </summary>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetAllUnassingToFleetVehiclesInfo(System.Int32,System.Int32)">
            <summary>
            Retreive all active vehicles info that unassigned to current fleet.
            </summary>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetVehiclesInfoByFleetId(System.Int32)">
            <summary>
            Returns vehicle information by fleet id. 
            </summary>
            <param name="fleetId"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetVehiclesInfoByFleetId(System.Int32,System.Int64)">
            <summary>
            Returns vehicle information by fleet id filtered by feature mask
            </summary>
            <param name="fleetId">Fleet Id</param>
            <param name="featureMask">Firmware feature mask inherited by a box</param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetVehiclesFullInfobyFleetId(System.Int32)">
            <summary>
            Returns complete vehicle information by fleet id
            </summary>
            <param name="fleetId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetIdlingDurationForFleetId(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns>
                 [BoxId],[LicensePlate],[VehicleDescription],[VehicleId],[VinNum],[OriginDateTime],[BoxMsgInTypeId], [CustomProp]
            </returns>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetVehiclesLastKnownPositionInfo(System.Int32,System.Int32,System.String)">
            <summary>
            Returns vehicles last known position information by fleet id. 
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <param name="language"></param>
            <returns>
            DataSet 
            [LicensePlate],[VehicleId],[BoxId],[OriginDateTime],
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[StreetAddress],
            [Description],[BoxArmed],[LastCommunicatedDateTime],[GeoFenceEnabled],
            [IconTypeId],[IconTypeName],[VehicleTypeName],
            [LastStatusDateTime],[LastStatusSensor],[LastStatusSpeed],
            [PrevStatusDateTime],[PrevStatusSensor],[PrevStatusSpeed],
            [FwTypeId],[Dormant],[DormantDateTime]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetVehiclesLastKnownPositionInfo(System.Int32,System.Int32)">
            <summary>
            Returns vehicles last known position information by fleet id. 
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <param name="language"></param>
            <returns>
            DataSet 
            [LicensePlate],[VehicleId],[BoxId],[OriginDateTime],
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[StreetAddress],
            [Description],[BoxArmed],[LastCommunicatedDateTime],[GeoFenceEnabled],
            [IconTypeId],[IconTypeName],[VehicleTypeName],
            [LastStatusDateTime],[LastStatusSensor],[LastStatusSpeed],
            [PrevStatusDateTime],[PrevStatusSensor],[PrevStatusSpeed],
            [FwTypeId],[Dormant],[DormantDateTime]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetVehiclesLastKnownPositionInfoByVehiclesXML(System.Int32,System.String)">
            <summary>
            Returns vehicles last known position information by vehicles XMLS. 
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <returns>
            DataSet 
            [LicensePlate],[VehicleId],[BoxId],[OriginDateTime],
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[StreetAddress],
            [Description],[BoxArmed],[LastCommunicatedDateTime],[GeoFenceEnabled],
            [IconTypeId],[IconTypeName],[VehicleTypeName],
            [LastStatusDateTime],[LastStatusSensor],[LastStatusSpeed],
            [PrevStatusDateTime],[PrevStatusSensor],[PrevStatusSpeed],
            [FwTypeId],[Dormant],[DormantDateTime]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetVehiclesLastKnownPositionInfoByVehiclesXML_New(System.Int32,System.String,System.String)">
            <summary>
            Returns vehicles last known position information by vehicles XMLS. 
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <param name="language"></param>
            <returns>
            DataSet 
            [LicensePlate],[VehicleId],[BoxId],[OriginDateTime],
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[StreetAddress],
            [Description],[BoxArmed],[LastCommunicatedDateTime],[GeoFenceEnabled],
            [IconTypeId],[IconTypeName],[VehicleTypeName],
            [LastStatusDateTime],[LastStatusSensor],[LastStatusSpeed],
            [PrevStatusDateTime],[PrevStatusSensor],[PrevStatusSpeed],
            [FwTypeId],[Dormant],[DormantDateTime]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetsInfoByVehicleId(System.Int64,System.Int32)">
            <summary>
            Returns fleets information by vehicle id. 
            </summary>
            <param name="vehicleId"></param>
            <param name="userId"></param>
            <returns>DataSet [FleetId],[OrganizationName],[FleetName],[Description],[OrganizationId]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetsInfoByLicensePlate(System.String,System.Int32)">
            <summary>
            Returns fleets information by vehicle id. 
            </summary>
            <param name="licensePlate"></param>
            <param name="userId"></param>
            <returns>DataSet [FleetId],[OrganizationName],[FleetName],[Description],[OrganizationId]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetListOfVehiclesByFleetId(System.Int32)">
            <summary>
            Retrieves array of vehicles in the fleet, in case of empty result returns null.
            </summary>
            <param name="fleetId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns> array of vehicles</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetListOfFleetsByVehicleId(System.Int64,System.Int32)">
            <summary>
            Retrieves array of fleets by vehicle id, in case of empty result returns null.
            </summary>
            <param name="vehicleId"></param>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns> array of fleets</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetTotalVehiclesByFleetId(System.Int32)">
            <summary>
            Returns total number of vehicles in the fleet . 
            </summary>
            <param name="fleetId"></param>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetTotalFleetsByVehicleId(System.Int64,System.Int32)">
            <summary>
            Returns total number of fleets by vehicle id. 
            </summary>
            <param name="vehicleId"></param>
            <param name="userId"></param>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetAllActiveVehiclesCfgInfo(System.Int32)">
            <summary>
            Gets all vehicles active assignment configuration information for current fleet
            </summary>
            <param name="fleetId"></param>
            <returns>DataSet [Description],[BoxId],[FwId],[FwName],[FwDateReleased],[CommModeId],[BoxProtocolTypeId],[FwTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetMaintenanceInfo(System.Int32,System.Int32)">
            <summary>
            Returns fleet maintenance information.
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <returns>DataSet [BoxId],[VehicleId],[Description],
            [LastSrvOdo],[CurrentOdo],[MaxSrvInterval],
            [LastSrvEngHrs],[CurrentEngHrs],[EngHrsSrvInterval],
            [Email],[TimeZone],[DayLightSaving],[AutoAdjustDayLightSaving],
            [LicensePlate],[ModelYear],[MakeName],[ModelName],
            [NextServiceDescription],[VehicleTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetMaintenanceHistory(System.Int32,System.Int32)">
            <summary>
            Returns fleet maintenance history.
            </summary>
            <param name="fleetId"></param>
            <returns>DataSet [VehicleId],[ServiceDateTime],[ServiceDescription],[ServiceOdo]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetVehicles(System.Int32,System.String)">
            <summary>
            Get vehicles short info;
            Usage: vehicles drop down list or combobox
            </summary>
            <param name="fleetId">Fleet ID</param>
            <param name="sortByFieldName">Column name to sort a result set</param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[Description]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetVehicles(System.Int32)">
            <summary>
            Get fleet vehicles
            Usage: Man. Console - export to excel file for updating vehicles info
            </summary>
            <param name="fleetId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.AddUserToFleet(System.Int32,System.Int32)">
            <summary>
            Add user to fleet
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.DeleteUserFromAllFleets(System.Int32)">
            <summary>
            Delete exist user from all fleets
            </summary>
            <param name="userId"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.DeleteAllUsersFromFleet(System.Int32)">
            <summary>
            Delete all users from the fleet and fleet
            </summary>
            <param name="fleetId"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.DeleteUserFromFleet(System.Int32,System.Int32)">
            <summary>
            Delete exist user from the fleet
            </summary>
            <param name="fleetId"></param> 
            <param name="userId"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetsInfoByUserId(System.Int32)">
            <summary>
            Returns fleets information by user id. 
            </summary>
            <param name="userId"></param>
            <returns>DataSet [OrganizationName],[FleetId],[FleetName],[FleetDescription]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetUnassignedFleetsInfoByUserId(System.Int32)">
            <summary>
            Returns unassigned fleets information to current user. 
            </summary>
            <param name="userId"></param>
            <returns>DataSet [OrganizationName],[FleetId],[FleetName],[FleetDescription]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetsInfoByOrganizationName(System.String)">
            <summary>
            Returns fleets information by organizationName. 
            </summary>
            <param name="organizationName"></param>
            <returns>DataSet [FleetId],[FleetName],[Description],[OrganizationId],[OrganizationName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetUsersInfoByFleetId(System.Int32)">
            <summary>
            Returns users info by fleet id. 
            </summary>
            <param name="fleetId"></param>
            <returns>DataSet [UserId],[UserName],[Password],[DriverLicense],[FirstName],[LastName],[ContactInfo],[OrganizationId]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetUnassignedUsersInfoByFleetId(System.Int32)">
            <summary>
            Retieves all users (except HGIAdmin user group) unassigned to the fleet.
            </summary>
            <param name="fleetId"></param>
            <returns>DataSet [UserId],[UserName],[Password],[DriverLicense],[FirstName],[LastName],[ContactInfo],[OrganizationId]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetTotalFleetsByUserId(System.Int32)">
            <summary>
            Returns total number of fleets assigned to this user. 
            </summary>
            <param name="userId"></param>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetTotalUsersByFleetId(System.Int32)">
            <summary>
            Returns total number of users assigned to this fleet. 
            </summary>
            <param name="fleetId"></param>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.AddFleet(System.String,System.Int32,System.String)">
            <summary>
            Add new fleet.
            - Add new fleet
            - Assign user to the fleet
            </summary>
            <param name="fleetName"></param>
            <param name="organizationId"></param>
            <param name="description"></param>
            <returns>int next fleet id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if fleet alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.AddFleet(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Add new fleet.
            - Add new fleet
            - Assign user to the fleet
            </summary>
            <param name="userId"></param>
            <param name="fleetName"></param>
            <param name="organizationId"></param>
            <param name="description"></param>
            <returns>int next fleet id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if fleet alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.UpdateInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Update fleet information.
            </summary>
            <param name="fleetId"></param>
            <param name="fleetName"></param>
            <param name="organizationId"></param>
            <param name="description"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if fleet alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.DeleteFleetByFleetId(System.Int32)">
            <summary>
            Delete existing fleets
            </summary>
            <param name="fleetId"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.DeleteOrganizationFleets(System.Int32)">
            <summary>
            Delete existing organization fleets
            </summary>
            <param name="orgId"></param> 
            <returns>Rows Affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetInfoByFleetId(System.Int32)">
            <summary>
            Retrieves Fleet info
            </summary>
            <returns>DataSet [FleetId],[FleetName],[Description],[OrganizationId],[OrganizationName]</returns>
            <param name="fleetId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.IsDefaultFleet(System.Int32)">
            <summary>
            Check if current fleet is default
            </summary>
            <returns>true if default,otherwise false</returns>
            <param name="fleetId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetIdByFleetName(System.Int32,System.String)">
            <summary>
            Returns fleet id by fleet name.
            </summary>
            <param name="organizationId"></param> 
            <param name="fleetName"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetNameByFleetId(System.Int32)">
            <summary>
            Returns fleet name by fleet Id. 	
            </summary>
            <param name="fleetId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetServices(System.Int64,System.Int16)">
            <summary>
            Get Fleet Services
            </summary>
            <param name="fleetId"></param>
            <param name="servicesFlag"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetServices(System.Int64,System.Int16,System.Int16)">
            <summary>
            Get Fleet Services
            </summary>
            <param name="fleetId"></param>
            <param name="operTypeId"></param>
            <param name="servicesFlag"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetServicesHistory(System.Int64)">
            <summary>
            Get Fleet Services History
            </summary>
            <param name="fleetId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.AddEmail(System.Int32,System.String,System.Int16,System.Int16,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add email to fleet.
            </summary>
            <param name="fleetId"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="formatType"></param>
            <param name="notify"></param>
            <param name="warning"></param>
            <param name="critical"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if email alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.UpdateEmail(System.Int32,System.String,System.String,System.Int16,System.Int16,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update fleet email.
            </summary>
            <param name="fleetId"></param>
            <param name="oldEmail"></param>
            <param name="newEmail"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="formatType"></param>
            <param name="notify"></param>
            <param name="warning"></param>
            <param name="critical"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if fleet does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.DeleteEmailFromFleet(System.Int32,System.String)">
            <summary>
            Delete existing email from fleet.
            </summary>
            <returns>rows affected</returns>
            <param name="fleetId"></param> 
            <param name="email"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if fleet does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.DeleteAllEmailsFromFleet(System.Int32)">
            <summary>
            Delete all emails from fleet.
            </summary>
            <returns>rows affected</returns>
            <param name="fleetId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if fleet does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetEmails(System.Int32)">
            <summary>
            Retrieves fleet emails
            </summary>
            <param name="fleetId"></param> 
            <returns>DataSet [FleetId],[FleetMame],[Email],[TimeZone],
            [DayLightSaving],[FormatType],[Notify],[Warning],[Critical],[AutoAdjustDayLightSaving]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetPeripheralsInfoByFleetId(System.Int32)">
            <summary>
            Returns Box-Peripheral information by fleet id. 
            </summary>
            <param name="fleetId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetVehiclesLastKnownPositionInfoWithPeripheral(System.Int32,System.Int32)">
            <summary>
            Returns vehicles last known position information with peripheral by fleet id. 
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <returns>
            DataSet 
            [LicensePlate],[VehicleId],[BoxId],[OriginDateTime],
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[StreetAddress],
            [Description],[BoxArmed],[LastCommunicatedDateTime],[GeoFenceEnabled],
            [IconTypeId],[IconTypeName],[VehicleTypeName],
            [LastStatusDateTime],[LastStatusSensor],[LastStatusSpeed],
            [PrevStatusDateTime],[PrevStatusSensor],[PrevStatusSpeed],
            [FwTypeId],[Dormant],[DormantDateTime]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetFleetBoxes(System.Int32)">
            <summary>
            Get list of box id
            </summary>
            <param name="fleetId"></param>
            <returns>List of int</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Fleet.GetMdtsByFleetId(System.Int32,System.Int16)">
            <summary>
            Get MdtOTA process status
            </summary>
            <param name="fleetId"></param>
            <returns>status percentage</returns>
        </member>
        <member name="T:VLF.DAS.Logic.MsgOutLiteHst">
            \class  MsgOutLite
            \brief  this class is only to operate insertion/deletion in vlfMsgIn/vlfMsgOut
                    and as a helper for bulk operations
        </member>
        <member name="M:VLF.DAS.Logic.MsgOutLiteHst.#ctor(System.String)">
            <summary>
                 used to write in vlfMsgOut
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.MsgOutLiteHst.AddMsgOut(VLF.CLS.Def.CMFOut,System.SByte,System.Int16,System.Int16,System.Int32)">
            \fn     public void AddMsgOut(CMFOut cMFOut, SByte priority, short dclId, short aslId, int userId)
            \brief  this is the 
        </member>
        <member name="T:VLF.DAS.Logic.PushConfiguration">
            <summary>
                 this is the class describing the push methods used at the organization level 
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.PushConfiguration.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.PushConfiguration.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.PushConfiguration.GetPushConfiguration(System.Int64)">
            <summary>
              it returns  [pushId] [pushType] [configuration] [typeOfMessages] [assembly]
            </summary>
            <param name="pushId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.PushConfiguration.GetPushConfigurationByOrg(System.Int32)">
            <summary>
            Get PushCon figuration By Organization
            </summary>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.PushConfiguration.GetUnassignedPushTypesByOrg(System.Int32)">
            <summary>
            Get Unassigned Push Types for Organization
            </summary>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.Logic.MsgOutLite">
            \class  MsgOutLite
            \brief  this class is only to operate insertion/deletion in vlfMsgIn/vlfMsgOut
                    and as a helper for bulk operations
        </member>
        <member name="M:VLF.DAS.Logic.MsgOutLite.#ctor(System.String)">
            <summary>
                 used to write in vlfMsgOut
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.MsgOutLite.AddMsgOut(VLF.CLS.Def.CMFOut,System.SByte,System.Int16,System.Int16,System.Int32)">
            \fn     public void AddMsgOut(CMFOut cMFOut, SByte priority, short dclId, short aslId, int userId)
            \brief  this is the 
        </member>
        <member name="T:VLF.DAS.Logic.Report">
            <summary>
            Provides interface to report functionality in database
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Report.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Report.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetDetailedTripReport(System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,System.Boolean@,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            Prepares detailed trip report
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="includeStreetAddress"></param>
            <param name="includeSensors"></param>
            <param name="includePosition"></param>
            <param name="includeIdleTime"></param>
            <param name="includeSummary"></param>
            <param name="showLastStoredPosition"></param>
            <param name="userId"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <param name="outMaxOverflowed"></param>
            <param name="outMaxFleetRecords"></param>
            <remarks>
            1. On Ignition On satrt trip
            2. On Ignition Off stop trip
            3. If Street address is selected, include it into report
            4. Shows sensors changes
            5. Shows vehicle stops (Stop interval is configurable)
            6. Calculates trip statistics:
            	6.1 Trip Duration
            	6.2 Trip Distance
            	6.3 Trip Average Speed
            	6.4 Trip Stops
            	6.5 Trip Cost
            	
            7. Calculates all trips statistics:
            	7.1 Total Trips
            	7.2 Total Distance (mile/kms)
            	7.3 Total Trips Duration
            	7.4 Total Average Speed
            	7.5 Total Cost
            </remarks>
            <returns> DataSet [TripIndex],[Reson],[Date/Time],[Location],[Speed],[Description] </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetTripReport(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.String,System.Boolean@,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            Prepares trip report
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="showLastStoredPosition"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <param name="outMaxOverflowed"></param>
            <param name="outMaxFleetRecords"></param>
            <remarks>
            1. On Ignition On satrt trip
            2. On Ignition Off stop trip
            3. Calculates trip statistics:
            	3.1 Trip Duration
            	3.2 Trip Distance
            	3.3 Trip Average Speed
            	3.4 Trip Stops
            	3.5 Trip Cost
            </remarks>
            <returns> DataSet [TripIndex],[Reson],[Date/Time],[Location],[Speed],[Description] </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetStopReport(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean@,System.Int32@)">
            <summary>
            Prepares fleet stop  report
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="showLastStoredPosition"></param>
            <param name="minStopDuration"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns> DataSet [StopIndex],[ArrivalDateTime],[Location],
            [DepartureDateTime],[StopDuration],[Remarks],[Latitude],[Longitude] 
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetStopReportByLandmark(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.String,System.Boolean@,System.Int32@)">
            <summary>
            Prepares fleet stop report by landmark
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="showLastStoredPosition"></param>
            <param name="minStopDuration"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns> DataSet [StopIndex],[ArrivalDateTime],[Location],
            [DepartureDateTime],[StopDuration],[Remarks],[Latitude],[Longitude] 
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetDetailedTripReport(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,System.Boolean@,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            Prepares detailed trip report
            </summary>
            <param name="licensePlate"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="includeStreetAddress"></param>
            <param name="includeSensors"></param>
            <param name="includePosition"></param>
            <param name="includeIdleTime"></param>
            <param name="includeSummary"></param>
            <param name="showLastStoredPosition"></param>
            <param name="userId"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <param name="outMaxOverflowed"></param>
            <param name="outMaxRecords"></param>
            <remarks>
            1. On Ignition On satrt trip
            2. On Ignition Off stop trip
            3. If Street address is selected, include it into report
            4. Shows sensors changes
            5. Shows vehicle stops (Stop interval is configurable)
            6. Calculates trip statistics:
            	6.1 Trip Duration
            	6.2 Trip Distance
            	6.3 Trip Average Speed
            	6.4 Trip Stops
            	6.5 Trip Cost
            	
            7. Calculates all trips statistics:
            	7.1 Total Trips
            	7.2 Total Distance (mile/kms)
            	7.3 Total Trips Duration
            	7.4 Total Average Speed
            	7.5 Total Cost
            </remarks>
            <returns> DataSet [TripIndex],[Reson],[Date/Time],[Location],[Speed],[Description] </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetTripReport(System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.Boolean@,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            Prepares trip report
            </summary>
            <param name="licensePlate"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="showLastStoredPosition"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <param name="outMaxOverflowed"></param>
            <param name="outMaxRecords"></param>
            <remarks>
            1. On Ignition On satrt trip
            2. On Ignition Off stop trip
            3. Calculates trip statistics:
            	3.1 Trip Duration
            	3.2 Trip Distance
            	3.3 Trip Average Speed
            	3.4 Trip Stops
            	3.5 Trip Cost
            </remarks>
            <returns> DataSet [TripIndex],[Reson],[Date/Time],[Location],[Speed],[Description] </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetStopReport(System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean@,System.Int32@)">
            <summary>
            Prepares stop report
            </summary>
            <param name="licensePlate"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="showLastStoredPosition"></param>
            <param name="minStopDuration"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns> DataSet [StopIndex],[ArrivalDateTime],[Location],[DepartureDateTime],
            [StopDuration],[Remarks],[Latitude],[Longitude] </returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetOffHourReport(System.String,System.String,System.String,System.Int32,System.Boolean,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.String,System.Boolean@,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            Prepares Off Hour report
            </summary>
            <summary>
            Prepares trip report
            </summary>
            <param name="licensePlate"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="showLastStoredPosition"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <param name="outMaxOverflowed"></param>
            <param name="outMaxRecords"></param>
            <remarks>
            1. On Ignition On satrt trip
            2. On Ignition Off stop trip
            3. Calculates trip statistics:
            	3.1 Trip Duration
            	3.2 Trip Distance
            	3.3 Trip Average Speed
            	3.4 Trip Stops
            	3.5 Trip Cost
            </remarks>
            <returns> DataSet [TripIndex],[Reson],[Date/Time],[Location],[Speed],[Description] </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetOffHourReport(System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.String,System.Boolean@,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            Prepares fleet Off Hour report
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="showLastStoredPosition"></param>
            <param name="dayFromHour"></param>
            <param name="dayFromMin"></param>
            <param name="dayToHour"></param>
            <param name="dayToMin"></param>
            <param name="weekendFromHour"></param>
            <param name="weekendFromMin"></param>
            <param name="weekendToHour"></param>
            <param name="weekendToMin"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <param name="outMaxOverflowed"></param>
            <param name="outMaxFleetRecords"></param>
            <returns> DataSet [StopIndex],[ArrivalDateTime],[Location],
            [DepartureDateTime],[StopDuration],[Remarks],[Latitude],[Longitude] 
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetStopReportByLandmark(System.String,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.String,System.Boolean@,System.Int32@)">
            <summary>
            Prepares stop report by landmark
            </summary>
            <param name="licensePlate"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="showLastStoredPosition"></param>
            <param name="minStopDuration"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns> DataSet [BoxId],[Location],[StopDuration],[StopDurationVal],[VehicleId] </returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetTripActivityReport(System.String,System.String,System.String,System.Int32,System.Boolean,System.String,System.Boolean@,System.Int32@)">
            <summary>
            Prepares trip activity report
            </summary>
            <remarks>
            1. On Ignition On satrt trip
            2. On Ignition Off stop trip
            3. Calculates trip statistics:
            	3.1 Trip Duration
            	3.2 Trip Distance
            	3.3 Trip Average Speed
            	3.4 Trip Stops
            	3.5 Trip Cost
            </remarks>
            <param name="licensePlate"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="showLastStoredPosition"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns> DataSet [TripIndex],[Reson],[Date/Time],[Location],[Speed],[Description] </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetAlarmReport(System.Int32,System.String,System.String,System.String,System.Boolean@,System.Int32@)">
            <summary>
            Retrieves alarm information. 
            </summary>
            <param name="userId"></param>
            <param name="licensePlate"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[AlarmSeverity],[AlarmType],
            [DateTimeAck],[DateTimeClosed],[Description],
            [BoxId],[OriginDateTime],[ValidGps],
            [BoxMsgInTypeId],[BoxMsgInTypeName],
            [BoxProtocolTypeId],[BoxProtocolTypeName]
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[CustomProp],[StreetAddress],
            [UserId],[UserName],[DriverLicense],[FirstName],[LastName]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetVehicleAlarmsReport(System.Int32,System.String,System.String,System.String)">
            <summary>
            Prepares vehicle alarms report
            </summary>
            <param name="userId"></param>
            <param name="licensePlate"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[AlarmSeverity],[AlarmType],
            [DateTimeAck],[DateTimeClosed],[Description],
            [BoxId],[OriginDateTime],[ValidGps],
            [BoxMsgInTypeId],[BoxMsgInTypeName],
            [BoxProtocolTypeId],[BoxProtocolTypeName]
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[CustomProp],[StreetAddress],
            [UserId],[UserName],[DriverLicense],[FirstName],[LastName]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetAlarmsReport(System.Int32,System.Int32,System.String,System.String,System.Boolean@,System.Int32@)">
            <summary>
            Prepares fleet alarms report
            </summary>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[AlarmSeverity],[AlarmType],
            [DateTimeAck],[DateTimeClosed],[Description],
            [BoxId],[OriginDateTime],[ValidGps],
            [BoxMsgInTypeId],[BoxMsgInTypeName],
            [BoxProtocolTypeId],[BoxProtocolTypeName]
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[CustomProp],[StreetAddress],
            [UserId],[UserName],[DriverLicense],[FirstName],[LastName]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetSystemUsageExceptionReportForAllOrganizations(System.String,System.String)">
            <summary>
            Retrieves system usage exseption report. 
            </summary>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns>
            DataSet [OrganizationName],[Description],[BoxId],[MaxMsgs],[MaxTxtMsgs],[BoxProtocolTypeName],[OrganizationId],[TotalMsgInSize],[TotalMsgOutSize]
            </returns>
            <remarks> order by OrganizationName</remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetSystemUsageReportByOrganization(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves system usage report by organization. 
            </summary>
            <param name="organizationId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="showExceptionOnly"></param>
            <returns>
            DataSet [Description],[BoxId],[MaxMsgs],[MaxTxtMsgs],[BoxProtocolTypeName],[TotalMsgInSize],[TotalMsgOutSize]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetSystemUsageReportByBox(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves system usage report by box. 
            </summary>
            <param name="boxId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="showExceptionOnly"></param>
            <returns>
            DataSet [Description],[BoxId],[MaxMsgs],[MaxTxtMsgs],[BoxProtocolTypeName],[TotalMsgInSize],[TotalMsgOutSize]
            </returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetExceptionReport(System.String,System.String,System.String,System.Int32,System.Int16,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean@,System.Int32@)">
            <summary>
            Retrieves exception report
            </summary>
            <remarks>
            1. If sosLimit=-1 do not include intto report
            2. If noDoorSnsHrs=-1 do not include into report
            </remarks>
            <returns>[Type],[DateTime],[VehicleDescription],[Remarks1],
            [Remarks2],[BoxId"],[VehicleId]</returns>
            <param name="licensePlate"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="sosLimit"></param>
            <param name="noDoorSnsHrs"></param>
            <param name="includeTar"></param>
            <param name="includeMobilize"></param>
            <param name="fifteenSecDoorSns"></param>
            <param name="leash50"></param>
            <param name="mainAndBackupBatterySns"></param>
            <param name="tamperSns"></param>
            <param name="anyPanicSns"></param>
            <param name="threeKeypadAttemptsSns"></param>
            <param name="altGPSAntennaSns"></param>
            <param name="controllerStatus"></param>
            <param name="leashBrokenSns"></param>
            <param name="driverDoor"></param>
            <param name="passengerDoor"></param>
            <param name="sideHopperDoor"></param>
            <param name="rearHopperDoor"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetExceptionReport(System.Int32,System.String,System.String,System.Int32,System.Int16,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean@,System.Int32@)">
            <summary>
            Retrieves exception report
            </summary>
            <remarks>
            1. If sosLimit=-1 do not include intto report
            2. If noDoorSnsHrs=-1 do not include into report
            </remarks>
            <returns>[Type],[DateTime],[VehicleDescription],[Remarks1],
            [Remarks2],[BoxId"],[VehicleId]</returns>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="sosLimit"></param>
            <param name="noDoorSnsHrs"></param>
            <param name="includeTar"></param>
            <param name="includeMobilize"></param>
            <param name="fifteenSecDoorSns"></param>
            <param name="leash50"></param>
            <param name="mainAndBackupBatterySns"></param>
            <param name="tamperSns"></param>
            <param name="anyPanicSns"></param>
            <param name="threeKeypadAttemptsSns"></param>
            <param name="altGPSAntennaSns"></param>
            <param name="controllerStatus"></param>
            <param name="leashBrokenSns"></param>
            <param name="driverDoor"></param>
            <param name="passengerDoor"></param>
            <param name="sideHopperDoor"></param>
            <param name="rearHopperDoor"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetVehicleLatencyReport(System.Int64,System.String,System.String,System.Data.DataSet)">
            <summary>
            Prepares Latency report
            </summary>
            <param name="vehicleId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="dsParams"></param>
            <returns>
            DataSet [OrganizationName],[Description],[BoxId],[CommModeName],[NumOfMsgs],[DiffInSec]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetLatencyReport(System.Int32,System.String,System.String,System.Data.DataSet)">
            <summary>
            Prepares Fleet Latency report
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="dsParams"></param>
            <returns>
            DataSet [OrganizationName],[Description],[BoxId],[CommModeName],[NumOfMsgs],[DiffInSec]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetOrganizationLatencyReport(System.Int32,System.String,System.String,System.Data.DataSet)">
            <summary>
            Prepares Organization Latency report
            </summary>
            <param name="organizationId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="dsParams"></param>
            <returns>
            DataSet [OrganizationName],[Description],[BoxId],[CommModeName],[NumOfMsgs],[DiffInSec]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.InsertSecheduledReport(System.Int32,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.String,System.Int32,System.DateTime,System.String,System.Boolean)">
            <summary>
            Populates vlfReport table. 
            </summary>
            <param name="userID"></param>
            <param name="periodStart"></param>        
            <param name="periodEnd"></param>
            <param name="deliveryDeadLine"></param>
            <param name="xmlParams"></param>
            <param name="emails"></param>
            <param name="url"></param>
            <param name="reportType"></param>
            <param name="statusDate"></param>
            <returns>
            int 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetScheuledReportsByUser(System.Int32)">
            <summary>
            Gets All scheduled reports for. 
            </summary>
            <param name="userID"></param>        
            <returns>
            DataSet 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetScheuledReportsByStatus(System.Int32)">
            <summary>
            Gets All scheduled reports for. 
            </summary>
            <param name="userID"></param>        
            <returns>
            DataSet 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.UpdateScheuledReportDatesAndURL(System.Int32,System.DateTime,System.DateTime,System.DateTime,System.String,System.Int32)">
            <summary>
            Updates report record . 
            </summary>
            <param name="reportID"></param>  
            <param name="newDelivery"></param> 
            <param name="newFrom"></param> 
            <param name="newTo"></param> 
            <param name="url"></param>
            <param name="status"></param>
            <returns>
            int 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.DeleteSecheduledReport(System.Int32)">
            <summary>
            Deletes a scheduled report. 
            </summary>
            <param name="reportID"></param>
            <returns>
            int 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetReportsName(System.Int32)">
            <summary>
            gets gui report name reports. 
            </summary>
            <param name="guiID"></param>        
            <returns>
            string 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetVehicleGeozoneDetailsReport(System.Int32,System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Get Vehicle Geozone Details Report
            </summary>
            <param name="userId">User Id for timezone</param>
            <param name="licensePlate">Vehicle License Plate</param>
            <param name="geozoneNo">Geozone No</param>
            <param name="dtFrom">Start date for search</param>
            <param name="dtTo">End date for search</param>
            <returns>DataSet -> Tables: GeozoneDetails [VehicleId, Description, GeozoneNo, GeozoneName, DateIn, DateOut, Duration];</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetVehicleGeozoneReport(System.Int32,System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Get Vehicle Geozone Report
            </summary>
            <param name="userId">User Id for timezone</param>
            <param name="licensePlate">Vehicle License Plate</param>
            <param name="geozoneNo">Geozone No</param>
            <param name="dtFrom">Start date for search</param>
            <param name="dtTo">End date for search</param>
            <returns>DataSet -> Tables: GeozoneDetails [VehicleId, Description, GeozoneNo, GeozoneName, DateIn, DateOut, Duration]; GeozoneTotal [GeozoneNo, TotalTime]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetGeozoneDetailsReport(System.Int32,System.Int32,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Get Fleet Geozone Details Report
            </summary>
            <param name="userId">User Id for timezone</param>
            <param name="fleetId">Fleet Id</param>
            <param name="geozoneNo">Geozone No</param>
            <param name="dtFrom">Start date for search</param>
            <param name="dtTo">End date for search</param>
            <returns>DataSet -> Tables: GeozoneDetails [VehicleId, Description, GeozoneNo, GeozoneName, DateIn, DateOut, Duration]; GeozoneTotal [GeozoneNo, TotalTime]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetGeozoneReport(System.Int32,System.Int32,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Get Fleet Geozone Report
            </summary>
            <param name="userId">User Id for timezone</param>
            <param name="fleetId">Fleet Id</param>
            <param name="geozoneNo">Geozone No</param>
            <param name="dtFrom">Start date for search</param>
            <param name="dtTo">End date for search</param>
            <returns>DataSet -> Tables: GeozoneDetails [VehicleId, Description, GeozoneNo, GeozoneName, DateIn, DateOut, Duration]; GeozoneTotal [GeozoneNo, TotalTime]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetLandmarkVehicleSummaryReport(System.Int32,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get Landmark Report for a vehicle
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="landmarkName"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns>[Description][StopDuration - sec][IdlingDuration - sec]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetLandmarkFleetSummaryReport(System.Int32,System.Int32,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get Landmark Report for a fleet
            </summary>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <param name="landmarkName"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns>FleetLandmarkReport->LandmarkDetails->[Description][StopDuration - sec][IdlingDuration - sec]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetLandmarkDetailsReport(System.Int32,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get Landmark Details Report for all vehicles
            </summary>
            <param name="userId"></param>
            <param name="landmarkName"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns>[Description][StopDuration - sec][IdlingDuration - sec]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetLandmarkVehicleDetailsReport(System.Int32,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get Landmark Vehicle Details Report for all vehicles
            </summary>
            <param name="userId"></param>
            <param name="licensePlate"></param>
            <param name="landmarkName"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns>[Description][StopDuration - sec][IdlingDuration - sec]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetLandmarkFleetDetailsReport(System.Int32,System.Int32,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get Landmark Details Report for a fleet
            </summary>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <param name="landmarkName"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns>FleetLandmarkReport->LandmarkDetails->[Description][StopDuration - sec][IdlingDuration - sec]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetVehicleInactivityReport(System.Int32,System.String,System.Int16,System.DateTime,System.DateTime)">
            <summary>
            Calculate Vehicle Inactivity Report for CN company
            </summary>
            <param name="userID"></param>
            <param name="licensePlate"></param>
            <param name="sensorId"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetFleetInactivityReport(System.Int32,System.Int32,System.Int16,System.DateTime,System.DateTime)">
            <summary>
            Inactivity Report 4 Fleet
            </summary>
            <param name="userID"></param>
            <param name="fleetId"></param>
            <param name="sensorId"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns>Fleet vehicles dataset with added column</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.FillTripReportParams(System.String,System.Data.DataSet,System.Int32,System.Boolean,System.Data.DataTable@,System.Data.DataTable@,System.Double@,System.Double@,System.Int16@)">
            <summary>
            Fill trip report parameters
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Report.FillTripReportParams(System.String,System.Data.DataSet,System.Int32,System.Boolean,System.Data.DataTable@,System.Data.DataTable@,System.Double@,System.Double@,System.Boolean@)">
            <summary>
            Fill trip report parameters
            </summary>
            <param name="licensePlate"></param>
            <param name="dsResult"></param>
            <param name="userId"></param>
            <param name="tblLandmarks"></param>
            <param name="tblVehicleSensors"></param>
            <param name="tblVehicleGeozones"></param>
            <param name="carCost"></param>
            <param name="measurementUnits"></param>
            <param name="isTrailer"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetConfigParameter(System.String,System.Int16,System.String,System.Int32)">
            <summary>
            Retrieves configuration value
            </summary>
            <returns>[KeyValue]</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if module name does not exist.</exception>
            <param name="moduleName"></param>
            <param name="groupID"></param>
            <param name="paramName"></param>
            <param name="defaultVal"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Report.FormatTimeString(System.Int64)">
            <summary>
            Format time for landmark report
            </summary>
            <param name="seconds">Seconds value</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetIdlingSummaryReportPerOrganization(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Get Idling Summary Report Per Organization
            </summary>
            <param name="userId"></param>
            <param name="orgId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetActivitySummaryReportPerOrganization(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Get Activity Summary Report Per Organization
            </summary>
            <param name="orgId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetActivitySummaryReportPerVehicle(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Get Activity Summary Report Per Vehicle
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetTimeAtLandmarkReport(System.Int32,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get Time at Landmark
            </summary>
            <param name="userId"></param>
            <param name="licensePlate"></param>
            <param name="landmark"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetTimeAtLandmarkFleetReport(System.Int32,System.Int32,System.String,System.DateTime,System.DateTime)">
            <summary>
            Get Time at Landmark
            </summary>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <param name="landmark"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetDailyVehicleUtilizationReport(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Daily Vehicle Utilization Report
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetDailyFleetUtilizationReport(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Single)">
            <summary>
            Daily Fleet Utilization Report
            </summary>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetSpeedViolationsReportForFleet(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Speed Violations Report For Fleet
            </summary>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="speed1"></param>
            <param name="speed2"></param>
            <param name="speed3"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetSpeedViolationsDetailsReportForFleet(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Speed Violations Report For Fleet
            </summary>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="speed1"></param>
            <param name="speed2"></param>
            <param name="speed3"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetCNFleetUtilizationReport(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Get CN Fleet Utilization Report
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetCNGetMonthlyFleetSummary(System.Int32,System.DateTime)">
            <summary>
            Get CN Fleet Monthly Utilization Report
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.CN_GetSummaryActivityPerMonth(System.Int32,System.DateTime)">
            <summary>
            Get CN Summary Activity Per Month 
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetTripsSummaryReport(System.Int32,System.String,System.Int32,System.DateTime,System.DateTime)">
            <summary>
                   Get Trips Summary Report
                   GUID : 40
            </summary>
            <param name="userId"></param>
            <param name="licensePlate"></param>
            <param name="sensorNum"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetVehiclesStatusReport(System.Int32)">
            <summary>
            Get Vehicles Status Report (CN Report)
            </summary>
            <param name="OrgId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetStateMileagePerFleet(System.Int32,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Get State Mileage Per Fleet
            </summary>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="summary"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Report.GetStateMileagePerVehicle(System.String,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Get State Mileage Per Box
            </summary>
            <param name="boxId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="summary"></param>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.Logic.ReportScheduler">
            <summary>
            Scheduled reports
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.ReportScheduler.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.ReportScheduler.AddSchedule(System.DateTime,System.DateTime,System.Boolean,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.DateTime,System.Int16,System.Int16,System.DateTime,System.DateTime,System.Int16,System.String)">
            <summary>
            Add new scheduled report
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="isfleet"></param>
            <param name="fleetid"></param>
            <param name="parameters"></param>
            <param name="email"></param>
            <param name="userid"></param>
            <param name="guiid"></param>
            <param name="status"></param>
            <param name="statusdate"></param>
            <param name="frequency"></param>
            <param name="freqparam"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
            <param name="deliveryMethod"></param>
            <param name="lang"></param>
        </member>
        <member name="M:VLF.DAS.Logic.ReportScheduler.AddSchedule(System.DateTime,System.DateTime,System.Boolean,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.DateTime,System.Int16,System.Int16,System.DateTime,System.DateTime,System.Int16,System.String,System.Int16)">
            <summary>
            Add new scheduled report, incl. file format
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="isfleet"></param>
            <param name="fleetid"></param>
            <param name="parameters"></param>
            <param name="email"></param>
            <param name="userid"></param>
            <param name="guiid"></param>
            <param name="status"></param>
            <param name="statusdate"></param>
            <param name="frequency"></param>
            <param name="freqparam"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
            <param name="deliveryMethod"></param>
            <param name="lang"></param>
            <param name="format"></param>
        </member>
        <member name="M:VLF.DAS.Logic.ReportScheduler.DeleteSchedule(System.Int32,System.Int32)">
            <summary>
            Delete scheduled report
            </summary>
            <param name="reportid"></param>
            <param name="userid"></param>
        </member>
        <member name="M:VLF.DAS.Logic.ReportScheduler.GetScheduledReportsByUserID(System.Int32)">
            <summary>
            Get Scheduled Reports By UserID
            </summary>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.ReportScheduler.DeleteScheduledReportByReportID(System.Int32)">
            <summary>
            Delete Scheduled Report By ReportID
            </summary>
            <param name="reportid"></param>
        </member>
        <member name="M:VLF.DAS.Logic.ReportScheduler.GetReportFilesByUserId(System.Int32)">
            <summary>
            Get Report Files By UserId
            </summary>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.ReportScheduler.GetReportFilesByReportId(System.Int32)">
            <summary>
            Get Report Files By ReportId
            </summary>
            <param name="reportid"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.ReportScheduler.DeleteReportFile(System.Int32)">
            <summary>
            Delete Report File by Row Id
            </summary>
            <param name="rowid"></param>
        </member>
        <member name="T:VLF.DAS.Logic.UserGroup">
            <summary>
            Provides interface to user group functionality in database
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.AddGroupSecurity(System.Int16,System.Int32,System.Int32)">
            <summary>
            Adds new group security
            </summary>
            <param name="userGroupId"></param>
            <param name="operationId"></param>
            <param name="operationType"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if group security already exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.DeleteGroupSecurity(System.Int16)">
            <summary>
            Delete group security
            </summary>
            <param name="userGroupId"></param>
            <returns> int rows affected</returns>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.DeleteGroupSecurity(System.Int16,System.Int32,System.Int32)">
            <summary>
            Delete group security
            </summary>
            <param name="userGroupId"></param>
            <param name="operationId"></param>
            <param name="operationType"></param>
            <returns> int rows affected</returns>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetGroupSecurityInfo(System.Int16)">
            <summary>
            Retieves group security information. 	
            Throw DASException exception in case of error.
            </summary>
            <param name="userGroupId"></param>
            <returns>[UserGroupId],[OperationId],[OperationType]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetGroupSecurityFullInfo(System.Int16)">
            <summary>
            Retieves group security full info
            </summary>
            <param name="groupId"></param>
            <returns>[OperationType],[OperationTypeName],[OperationId],[OperationName],[OperationAction]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetAllGroupSecurityFullInfo">
            <summary>
            Retieves group security full info
            </summary>
            <returns>[OperationType],[OperationTypeName],[OperationId],[OperationName],[OperationAction]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetUserControls(System.Int32)">
            <summary>
            Retieves user controls
            </summary>
            <param name="userId"></param>
            <returns>[ControlId]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetUserReports(System.Int32)">
            <summary>
            Retieves user reports
            </summary>
            <param name="userId"></param>
            <returns>[ReportTypesId],[ReportTypesName],[GuiId],[GuiName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetUserReportsByCategory(System.Int32,System.Int32)">
            <summary>
            Retieves user reports
            </summary>
            <param name="userId"></param>
            <returns>[ReportTypesId],[ReportTypesName],[GuiId],[GuiName]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.AuthorizeOperation(System.Int32,VLF.CLS.Def.Enums.OperationType,System.Int32)">
            <summary>
            Authorize user operation
            </summary>
            <returns>true if user allows  this operation, otherwise return false</returns>
            <param name="userId"></param>
            <param name="operationType"></param>
            <param name="operationId"></param>
            
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.AuthorizeWebMethod(System.Int32,System.String)">
            <summary>
            Authorize user operation
            </summary>
            <param name="userId"></param>
            <param name="methodName"></param>
            <returns>true if user is auth. for this operation, otherwise - false</returns>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.AuthorizeWebMethod(System.Int32,System.String,System.String)">
            <summary>
            Authorize user operation
            </summary>
            <param name="userId"></param>
            <param name="methodName"></param>
            <param name="className"></param>
            <returns>true if user is auth. for this operation, otherwise - false</returns>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.AddUserGroup(System.String)">
            <summary>
            Add new user group.
            </summary>
            <param name="userGroupName"></param>
            <returns>vod</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user group name already exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.SetUserGroupName(System.String,System.String)">
            <summary>
            Update user group name
            </summary>
            <param name="oldUserGroupName"></param> 
            <param name="newUserGroupName"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.SetUserGroupName(System.Int16,System.String)">
            <summary>
            Update user group name
            </summary>
            <param name="userGroupId"></param> 
            <param name="newUserGroupName"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.DeleteUserGroup(System.String)">
            <summary>
            Delete exist user group by name.
            </summary>
            <param name="userGroupName"></param>
            <returns>int rows affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.DeleteUserGroup(System.Int16)">
            <summary>
            Delete exist user group by Id
            </summary>
            <param name="userGroupId"></param> 
            <returns>int rows affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetUserGroupNameById(System.Int16)">
            <summary>
            user group name by id from "vlfUserGroup" table
            </summary>
            <param name="userGroupId"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetUserGroupIdByName(System.String)">
            <summary>
            user group id by name from "vlfUserGroup" table
            </summary>
            <param name="userGroupName"></param>
            <returns>short</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetAllUserGroupNames">
            <summary>
            Retrieves all user group names.
            </summary>
            <returns>ArrayList</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetAllUserGroups(System.Boolean)">
            <summary>
            Retrieves all user group names.
            </summary>
            <returns>DataSet [UserGroupId],[UserGroupName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.AddUserToGroup(System.Int16,System.String,VLF.CLS.Def.Structures.UserInfo)">
            <summary>
            Add new user to user group.
            </summary>
            <param name="userGroupId"></param>
            <param name="userName"></param>
            <param name="userInfo"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user alredy exists in the group</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.AddUserToGroup(System.String,System.String,VLF.CLS.Def.Structures.UserInfo)">
            <summary>
            Add new user to user group.
            </summary>
            <param name="userGroupName"></param>
            <param name="userName"></param>
            <param name="userInfo"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user alredy exists in the group</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.AssignUserToGroup(System.Int32,System.Int16)">
            <summary>
            Assign existing user to user group.
            </summary>
            <param name="userId"></param>
            <param name="userGroupId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user alredy exists in the group</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.AssignUserToGroup(System.Int32,System.String)">
            <summary>
            Assign existing user to user group.
            </summary>
            <param name="userId"></param>
            <param name="userGroupName"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user alredy exists in the group</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.AddUserToGroupAssignFleet(System.Int16,System.String,VLF.CLS.Def.Structures.UserInfo)">
            <summary>
            Create new user, add to user group, assign default fleet
            </summary>
            <param name="userGroupId"></param>
            <param name="userName"></param>
            <param name="userInfo"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user alredy exists in the group</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.DeleteGroupAssignment(System.Int16)">
            <summary>
            Delete existing user group assignment.
            </summary>
            <param name="userGroupId"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if group does not exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.DeleteUserAssignment(System.Int32,System.Int16)">
            <summary>
            Delete existing user assignment.
            </summary>
            <param name="userId"></param> 
            <param name="userGroupId"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user or group does not exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.DeleteUserAssignment(System.Int32,System.String)">
            <summary>
            Delete existing user assignment.
            </summary>
            <param name="userId"></param> 
            <param name="userGroupName"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user or group does not exists.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetUsersByUserGroup(System.Int32,System.String)">
            <summary>
            Returns all user assigned to the group. 
            </summary>
            <param name="currUserId"></param>
            <param name="userGroupName"></param>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetUsersByUserGroup(System.Int32,System.Int16)">
            <summary>
            Returns all user assigned to the group. 
            </summary>
            <param name="currUserId"></param>
            <param name="userGroupId"></param>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetAllUnassignedUsersToUserGroup(System.Int16,System.Int32)">
            <summary>
            Returns all user assigned to the group in current organization. 
            </summary>
            <param name="userGroupId"></param>
            <param name="organizationId"></param>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetAllUnassignedUsersToUserGroup(System.String,System.Int32)">
            <summary>
            Returns all user assigned to the group. 
            </summary>
            <param name="userGroupName"></param>
            <param name="organizationId"></param>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetUsersArrayByGroup(System.Int32,System.Int16)">
            <summary>
            Returns all user assigned to the group. 
            </summary>
            <param name="currUserId"></param>
            <param name="userGroupId"></param>
            <returns>ArrayList of users ids assigned to the group</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetAssignedGroupsByUser(System.Int32)">
            <summary>
            Returns all groups included this user. 
            </summary>
            <param name="userId"></param>
            <returns>DataSet [UserGroupId],[UserGroupName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetAssignedGroupsByOrganizationName(System.String)">
            <summary>
            Returns all groups included users from current organization. 
            </summary>
            <param name="organizationName"></param>
            <returns>DataSet [UserGroupId],[UserGroupName]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetGroupsArrayByUser(System.Int32)">
            <summary>
            Returns all groups included this user. 
            </summary>
            <param name="userId"></param>
            <returns>ArrayList of groups ids included this user</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.UserGroup.GetTotalAssignedGroupsByUser(System.Int32)">
            <summary>
            Returns total number of groups included this user. 
            </summary>
            <param name="userId"></param>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.Logic.Wex">
            \class     Wex
            \brief     for now is used only for fuelTransaction
                       in the future I see at least two other interfaces
                       - push locations and info for special landmarks (fuel stations)
                       - 
        </member>
        <member name="M:VLF.DAS.Logic.Wex.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Wex.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Wex.GetFuelTransactionHist(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Get Fuel Transaction History
            </summary>
            <param name="organizationId"></param>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.Logic.DriverManager">
            <summary>
            Provides interface to driver functionality in database
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.AddDriver(System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Char,System.Int16,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add a new driver
            </summary>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="license"></param>
            <param name="classLicense"></param>
            <param name="licenseIssued"></param>
            <param name="licenseExpired"></param>
            <param name="orgId"></param>
            <param name="gender"></param>
            <param name="height"></param>
            <param name="homePhone"></param>
            <param name="cellPhone"></param>
            <param name="additionalPhone"></param>
            <param name="smsPwd"></param>       
            <param name="smsid"></param>
            <param name="email"></param>
            <param name="address"></param>
            <param name="city"></param>
            <param name="zipcode"></param>
            <param name="state"></param>
            <param name="country"></param>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.AddDrivers(System.Data.DataTable)">
            <summary>
            Add multiple Drivers
            </summary>
            <param name="dataTable">Table containing drivers info</param>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.UpdateDriver(System.Int32,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Char,System.Int16,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Update driver data
            </summary>
            <param name="driverId"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="license"></param>
            <param name="classLicense"></param>
            <param name="licenseIssued"></param>
            <param name="licenseExpired"></param>
            <param name="orgId"></param>
            <param name="gender"></param>
            <param name="height"></param>
            <param name="homePhone"></param>
            <param name="cellPhone"></param>
            <param name="additionalPhone"></param>
            <param name="smsPwd"></param>       
            <param name="smsid"></param>
            <param name="email"></param>
            <param name="address"></param>
            <param name="city"></param>
            <param name="zipcode"></param>
            <param name="state"></param>
            <param name="country"></param>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.DeleteDriver(System.Int32)">
            <summary>
            Delete driver
            </summary>
            <param name="driverId"></param>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetDriver(System.Int32)">
            <summary>
            Retrieves driver info
            </summary>
            <returns>
            </returns>
            <param name="driverId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetDriversForOrganization(System.Int32)">
            <summary>
            Get all drivers for the organization
            </summary>
            <param name="orgId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.AddDriverAssignment(System.Int32,System.Int64,System.Int32,System.String)">
            <summary>
            Add new driver assignment.
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="driverId"></param>
            <param name="description"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if driver assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.AddDriverAssignment(System.Int32,System.Int64,System.Int32,System.DateTime,System.String)">
            <summary>
            Add new driver assignment.
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="driverId"></param>
            <param name="assgnDate"></param>
            <param name="description"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if driver assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.DeleteActiveDriverAssignment(System.Int32,System.Int64,System.Int32,System.String)">
            <summary>
            Delete existing driver assignment
            
            Updates both assign. and history tables
            </summary>
            <param name="userId"></param>
            <param name="licensePlate"></param>
            <param name="description"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in exception cases</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.DeleteActiveDriverAssignments(System.Int32,System.Int32,System.String)">
            <summary>
            Delete all existing driver assignments.
            </summary>
            <param name="userId"></param> 
            <param name="driverId"></param> 
            <param name="description"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetAllActiveDriversAssignments">
            <summary>
            Get all active drivers assignments
            </summary>
            <remarks>
            TableName	= "AllActiveDriversAssignments"
            DataSetName = "Driver"
            </remarks>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
            <returns>DataSet [AssignedDateTime],[LicensePlate],[PersonId],[Description]</returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetDriverActiveAssignment(System.Int64)">
            <summary>
            Returns driver assignment by vehicle Id 
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [AssignedDateTime],[PersonId],[DriverLicense],[FirstName],[LastName],[Description]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetDriverActiveAssignments(System.Int32)">
            <summary>
            Returns all driver active assignments by driver Id. 
            </summary>
            <param name="driverId"></param>
            <returns>DataSet [AssignedDateTime],[PersonId],[LicensePlate],[DriverLicense],[FirstName],[LastName],[Description]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetUnassignedDriversForOrganization(System.Int32)">
            <summary>
            Retrieves all unassigned drivers per organization
            </summary>
            <returns>
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetAssignedDriversForOrganization(System.Int32)">
            <summary>
            Retrieves all assigned drivers per organization
            </summary>
            <returns>
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetDriversListByUserFleetAssigment(System.Int32)">
            <summary>
            Retrieves all drivers by user fleet assigment 
            </summary>
            <returns>
            </returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.AddAssignmentHistory(System.Int32,System.Int64,System.Int32,System.String,System.DateTime,System.DateTime)">
            <summary>
            Add driver Assignment History (asgn. + unassgn.)
            </summary>
            <param name="driverId"></param>
            <param name="vehicleId"></param>
            <param name="userId"></param>
            <param name="description"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns>Rows affected</returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetDriverAssignmentHistory(System.Int32)">
            <summary>
            Get Driver Assignment History
            </summary>
            <param name="driverId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetDriverAssignmentHistory(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Get Driver Assignment History by dates
            </summary>
            <param name="driverId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetVehicleAssignmentHistory(System.Int64)">
            <summary>
            Get Driver Assignment History
            </summary>
            <param name="vehicleId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetVehicleAssignmentHistory(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Get Driver Assignment History by dates
            </summary>
            <param name="vehicleId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetDriverVehicleAssignmentHistory(System.Int32,System.Int64)">
            <summary>
            Get Driver Assignment History
            </summary>
            <param name="driverId"></param>
            <param name="vehicleId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetDriverVehicleAssignmentHistory(System.Int32,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Get Driver Assignment History by dates
            </summary>
            <param name="driverId"></param>
            <param name="vehicleId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetAssignmentVehiclesByDriverId(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Get all Assigned Vehicles List
            </summary>
            <param name="driverId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.ValidateField(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Field validation
            </summary>
            <param name="fieldName"></param>
            <param name="field"></param>
            <param name="minLength"></param>
            <param name="maxLength"></param>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.ValidateField(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Field validation
            </summary>
            <param name="fieldName"></param>
            <param name="field"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.AddHoursOfService(System.Int32,System.DateTime,System.Int16,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.String,System.Int16)">
            <summary>
            Add new HoursOfService process record
            </summary>
            <param name="driverId"></param>
            <param name="timestamp"></param>       
            <param name="state"></param>
            <param name="cycle"></param>
            <param name="IsSecondDay"></param>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.DisableHOS(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add new HoursOfService process record
            </summary>
            <param name="hoursOfServiceId"></param>
            <param name="changedByServiceId"></param>       
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetHOSbyDateTime(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Retrieves list of HoursOfService based on DateTime
            </summary>
            <param name="vehicleId"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetHoursOfServiceStateTypes">
            <summary>
            Get Hours Of Service State Types
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetHoursOfServiceRules">
            <summary>
            Get Hours Of Service Duty Cycles
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.ValidateHOSentry(System.Int32,System.DateTime,System.Int32,System.Int32@,System.Int16@)">
            <summary>
            Validate HOS entry
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetHOSnotificationsByDateTime(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Retrieves list of HoursOfService based on DateTime
            </summary>
            <param name="driverId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.AssignDrivers(System.Int32,System.Data.DataTable)">
            <summary>
            Add multiple assignments
            </summary>
            <param name="userId"></param>
            <param name="dataTable">Table containing assignments info</param>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.AuthenticateDriver(System.Int32,System.String,System.String)">
            <summary>
                 
            </summary>
            <param name="boxId"></param>
            <param name="SMSID"></param>
            <param name="SMSPwd"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.AddDriverMsg(System.Int32,System.Int32,System.String,System.String,System.DateTime)">
            <summary>
            Add new driver text msgs (email) 
            </summary>
            <param name="driverId"></param>
            <param name="userId"></param>
            <param name="email"></param>
            <param name="msgBody"></param>
            <param name="msgDateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.DriverManager.GetDriverMsgs(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Get Driver Messages
            </summary>
            <param name="driverId"></param>
            <param name="fromDate"></param>
            <param name="toDate"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.Logic.Form.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Logic.Form.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:VLF.DAS.Logic.Form.AddForm(System.Int32)">
            <summary>
            Add a new form to an organization
            </summary>
            <param name="orgID">Organization id</param>
            returned value: a new form id
        </member>
        <member name="M:VLF.DAS.Logic.Form.UpdateForm(System.Int32,System.Int32)">
            <summary>
            Update existing form info
            </summary>
            <param name="orgID">Organization id</param>
            <param name="formID">Form id</param>
            returned value: a new version id
        </member>
        <member name="M:VLF.DAS.Logic.Form.DeleteForm(System.Int32,System.Int32)">
            <summary>
            Delete existing form
            </summary>
            <param name="orgID">Organization id</param>
            <param name="formID">Form id</param>
        </member>
        <member name="M:VLF.DAS.Logic.Form.GetMaxFormID(System.Int32)">
            <summary>
            Return max form id
            </summary>
            <param name="orgID">Organization id</param>
            <returns>Max form id value</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Form.GetFormVersion(System.Int32,System.Int32)">
            <summary>
            Return current version id
            </summary>
            <param name="orgID">Organization id</param>
            <param name="formID">Form id</param>
            <returns>Version id of the form</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Form.GetFormInfo(System.Int32,System.Int32)">
            <summary>
            Return form info
            </summary>
            <param name="orgID">Organization id</param>
            <param name="formID">Form id</param>
            <returns>Form info dataset</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Form.GetData(System.Int32,System.Int32)">
            <summary>
            Get data for a form
            </summary>
            <param name="orgID">Organization id</param>
            <param name="formID">Form id</param>
            <returns>Data for a specific form of an org.</returns>
        </member>
        <member name="M:VLF.DAS.Logic.Form.InsertData(System.Int32,System.Int32,System.Int32,System.Int32,System.Int16,System.String,System.DateTime)">
            <summary>
            Insert a new row in the data table
            </summary>
            <param name="orgID">Organization id</param>
            <param name="vehID">Vehicle id</param>
            <param name="formID">Form id</param>
            <param name="fieldID">Field id</param>
            <param name="dir">Message direction</param>
            <param name="value">Message value</param>
            <param name="dateSent">Message date</param>
        </member>
    </members>
</doc>

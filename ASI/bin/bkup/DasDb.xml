<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DasDb</name>
    </assembly>
    <members>
        <member name="T:VLF.DAS.DB.VehicleType">
            <summary>
            Provides interfaces to vlfVehicleType table.
            </summary>
        </member>
        <member name="T:VLF.DAS.DB.Tbl2UniqueFields">
            <summary>
            Table structure is: [int],[string]
            Primary key is: first field (Id in generaly)
            Constraints:   - string field is Unique
            </summary>
        </member>
        <member name="T:VLF.DAS.DB.TblOneIntPrimaryKey">
            <summary>
            Provides interface to tables with one primary key
            </summary>
        </member>
        <member name="T:VLF.DAS.DB.TblGenInterfaces">
            <summary>
            Base class for all database classes.
            </summary>
        </member>
        <member name="F:VLF.DAS.DB.TblGenInterfaces.tableName">
            <summary>
            Table name for datbase class
            </summary>
        </member>
        <member name="F:VLF.DAS.DB.TblGenInterfaces.sqlExec">
            <summary>
            Instance of SQL executer
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.TblGenInterfaces.#ctor(System.String,VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="tableName"></param>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.TblGenInterfaces.DeleteRowsByStrField(System.String,System.String,System.String)">
            <summary>
            Deletes all rows by field name.
            </summary>
            <remarks>Useful only to char type fields</remarks>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="msgPostfix"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TblGenInterfaces.DeleteRowsBySql(System.String,System.String,System.String)">
            <summary>
            Deletes all rows by field name.
            </summary>
            <remarks>Useful only to char type fields</remarks>
            <param name="sql"></param>
            <param name="prefixMsg"></param>
            <param name="msgPostfix"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TblGenInterfaces.DeleteRowsByIntField(System.String,System.Int64,System.String)">
            <summary>
            Deletes all rows type by id.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="msgPostfix"></param>
            <remarks>Useful for all int related fields</remarks>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TblGenInterfaces.DeleteAllRecords">
            <summary>
            Delete all rows.
            </summary>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TblGenInterfaces.GetAllRecords">
            <summary>
            Retrieves all records from specific table
            </summary>
            <returns>dataset</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TblGenInterfaces.GetRecordCount">
            <summary>
            Retrieves record count from specific table
            </summary>
            <returns>total number of record in the table</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TblGenInterfaces.GetRowsByStringField(System.String,System.String,System.String)">
            <summary>
            Get rows by condition
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="msgPostfix"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.TblGenInterfaces.GetRowsByIntField(System.String,System.Int32,System.String)">
            <summary>
            Get rows by condition
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="msgPostfix"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.TblOneIntPrimaryKey.#ctor(System.String,VLF.DAS.SQLExecuter)">
            <summary>
            Useful only if in the table one primary key.
            </summary>
            <param name="tableName"></param>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.TblOneIntPrimaryKey.GetRecordCount(System.String)">
            <summary>
            Retrieves record count from specific table
            </summary>
            <returns>total number of record in the table</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TblOneIntPrimaryKey.GetMaxRecordIndex(System.String)">
            <summary>
            Retrieves max record index from specific table
            </summary>
            <param name="primaryKeyFieldName"></param>
            <returns>max record index</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TblOneIntPrimaryKey.AddNewRow(System.String,System.String,System.String,System.String)">
            <summary>
            Adds new row.
            Useful only for tables with specific structure:
            1. field one is PK and int related type.
            2. field two is UNIQUE and char related type.
            </summary>
            <param name="rowIdFieldName"></param>
            <param name="valueFieldName"></param>
            <param name="fieldValue"></param>
            <param name="msgPostfix"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TblOneIntPrimaryKey.GetFieldObjValueByRowId(System.String,System.Int32,System.String,System.String)">
            <summary>
            Returns first appearance of field value by id. 
            </summary>
            <remarks>
            Useful for fields with UNIQUE constrains only.
            Useful for string fields only.
            </remarks>
            <param name="rowIdFieldName"></param>
            <param name="rowId"></param>
            <param name="valueFieldName"></param>
            <param name="msgPostfix"></param>
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Tbl2UniqueFields.#ctor(System.String,VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="tableName"></param>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Tbl2UniqueFields.GetFieldValueByRowId(System.String,System.Int32,System.String,System.String)">
            <summary>
            Returns first appearance of field value by id. 
            </summary>
            <remarks>
            Useful for fields with UNIQUE constrains only.
            Useful for string fields only.
            </remarks>
            <param name="rowIdFieldName"></param>
            <param name="rowId"></param>
            <param name="valueFieldName"></param>
            <param name="msgPostfix"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.VehicleType.AddVehicleType(System.String)">
            <summary>
            Add new vehicle type.
            </summary>
            <param name="vehicleTypeName"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleType.DeleteVehicleType(System.String)">
            <summary>
            Deletes exist vehicle type by name.
            </summary>
            <param name="vehicleTypeName"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleType.DeleteVehicleType(System.Int16)">
            <summary>
            Delete exist vehicle type by Id
            Throws exception in case of wrong result (see TblGenInterfaces class).
            </summary>
            <param name="vehicleTypeId"></param> 
        </member>
        <member name="M:VLF.DAS.DB.VehicleType.GetTypeById(System.Int16)">
            <summary>
            Retrieves box hardware type name by id from "vlfVehicleType" table
            </summary>
            <param name="vehicleTypeId"></param>
            <returns>name</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.VehicleType.RecordCount">
            <summary>
            Retrieves record count of "vlfVehicleType" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.VehicleType.MaxRecordIndex">
            <summary>
            Retrieves max record index from "vlfVehicleType" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.VehicleInfo">
            <summary>
            Provides interfaces to vlfVehicleInfo table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.AddVehicleInfo(VLF.CLS.Def.Structures.VehicInfo,System.Int32,System.Boolean@)">
            <summary>
            Add new vehicle info.
            </summary>
            <param name="vehicInfo"></param>
            <param name="organizationId"></param>
            <param name="vehicleExist"></param>
            <returns>new vehicle id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.AddVehicleWorkingHours(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Add new vehicle info.
            </summary>
            <param name="vehicleId"></param>
            <param name="weekdayStart"></param>
            <param name="weekdayEnd"></param>
            <param name="weekendStart"></param>
            <param name="weekendEnd"></param>
            <returns>new vehicle id</returns>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if vehicle does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.UpdateVehicleWorkingHours(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates vehicle working hours.
            </summary>
            <param name="vehicleId"></param>
            <param name="weekdayStart"></param>
            <param name="weekdayEnd"></param>
            <param name="weekendStart"></param>
            <param name="weekendEnd"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if vehicle does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.UpdateVehicleInfo(VLF.CLS.Def.Structures.VehicInfo,System.Int64,System.Int32)">
            <summary>
            Updates vehicle information.
            </summary>
            <param name="vehicInfo"></param>
            <param name="vehicleId"></param>
            <param name="organizationId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.UpdateVehicleAdditionalInfo(System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            Updates vehicle additional information.
            </summary>
            <param name="vehicleId"></param>
            <param name="field1"></param>
            <param name="field2"></param>
            <param name="field3"></param>
            <param name="field4"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if vehicle does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.SetDayLightSaving(System.Boolean)">
            <summary>
            Set DayLight Savings.
            </summary>
            <returns>void</returns>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.SetAutoAdjustDayLightSaving(System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Set AutoAdjustDayLightSaving.
            </summary>
            <returns>void</returns>
            <param name="vehicleId"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.DeleteVehicInfo(System.Int64)">
            <summary>
            Deletes existing vehicle.
            </summary>
            <param name="vehicleId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.DeleteVehicleWorkingHours(System.Int64)">
            <summary>
            Deletes vehicle working hours
            </summary>
            <param name="vehicleId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetVehicleInfoByVehicleId(System.Int64)">
            <summary>
            Returns vehicle information by vehicle id. 
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeModelId],
            [MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],
            [Description],[CostPerMile],[OrganizationId],[IconTypeId],[IconTypeName],
            [Email],[TimeZone],[DayLightSaving],[FormatType],[Notify],[Warning],[Critical],[AutoAdjustDayLightSaving],
            [VehicleTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetVehicleAdditionalInfo(System.Int64)">
            <summary>
            Returns vehicle additional information. 
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [VehicleId],[Field1],[Field2],[Field3],[Field4]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetVehicleWorkingHours(System.Int64)">
            <summary>
            Returns vehicle working hours. 
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [VehicleId],[WeekdayStart],[WeekdayEnd],[WeekendStart],[WeekendEnd]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetVehicleOrganization(System.Int64)">
            <summary>
            Retrieves vehicle organization. 
            </summary>
            <param name="vehicleId"></param>
            <returns>OrganizationId</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetVehicleInfoByBoxId(System.Int32)">
            <summary>
            Returns vehicle information by box id. 
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeModelId],
            [MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],
            [Description],[CostPerMile],[OrganizationId],[IconTypeId],[IconTypeName]
            [Email],[TimeZone],[DayLightSaving],[FormatType],[Notify],[Warning],[Critical],[AutoAdjustDayLightSaving],
            [VehicleTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetVehicleInfoByLicensePlate(System.String)">
            <summary>
            Returns vehicle information by license plate. 
            </summary>
            <param name="licensePlate"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeModelId],
            [MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],
            [Description],[CostPerMile],[OrganizationId],[IconTypeId],[IconTypeName],
            [Email],[TimeZone],[DayLightSaving],[FormatType],[Notify],[Warning],[Critical],[AutoAdjustDayLightSaving],
            [VehicleTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetAllVehiclesInfo">
            <summary>
            Returns all vehicles information. 
            </summary>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeModelId],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description],[CostPerMile]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetVehicleIdByVinNumber(System.String)">
            <summary>
            Get vehicle id by vin number from vehicle information table.
            </summary>
            <param name="vinNum"></param>
            <returns>Int64</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetVehicleIdByDescription(System.String,System.Int32)">
            <summary>
            Get vehicle id by description from vehicle information table.
            </summary>
            <param name="description"></param>
            <param name="organizationId"></param>
            <returns>Int64</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetVehicleInfoIntFieldByLicensePlate(System.String,System.String)">
            <summary>
            Get vehicle information field by license plate
            </summary>
            <param name="resultFieldName"></param>
            <param name="licensePlate"></param>
            <returns>Int64</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetVehicleInfoStrFieldByLicensePlate(System.String,System.String)">
            <summary>
            Get vehicle information field by license plate
            </summary>
            <param name="resultFieldName"></param>
            <param name="licensePlate"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.SetVehicleInfoStrFieldByLicensePlate(System.String,System.String,System.String)">
            <summary>
            Updates field value by field name.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="licensePlate"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.SetVehicleInfoDoubleFieldByLicensePlate(System.String,System.Double,System.String)">
            <summary>
            Updates field value by field name.
            </summary>
            <returns>void</returns>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="licensePlate"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.SetVehicleInfoIntFieldByLicensePlate(System.String,System.Int64,System.String)">
            <summary>
            Updates field value by field name.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="licensePlate"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetAllUnassignedVehiclesInfo(System.Int32)">
            <summary>
            Get all unassigned vehicle info
            </summary>
            <returns>DataSet [VehicleId],[VinNum],[MakeModelId],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description],[CostPerMile]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetActiveVehicleInfoBy(System.String,System.Object)">
            <summary>
            Returns vehicle information by query field. 
            </summary>
            <remarks>
            Suitable only for query fields:
            - "LicensePlate"
            - "VehicleId"
            - "BoxId"
            </remarks>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeModelId],
            [MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],
            [Description],[CostPerMile],[OrganizationId],[IconTypeId],[IconTypeName]
            [OrganizationName]
            [Email],[TimeZone],[DayLightSaving],[FormatType],[Notify],[Warning],[Critical],[AutoAdjustDayLightSaving],
            [VehicleTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetAllVehiclesActivesInfo(System.Int32)">
            <summary>
            Gets all Vehicles active assignment information
            </summary>
            <remarks>
            TableName	= "AllActiveVehiclesAssignments"
            DataSetName = "Vehicle"
            </remarks>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],
            [MakeModelId],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],
            [ModelYear],[Color],[Description],[CostPerMile],
            [IconTypeId],[IconTypeName],
            [Email],[TimeZone],[DayLightSaving],[FormatType],[Notify],[Warning],[Critical],[AutoAdjustDayLightSaving]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.DB.VehicleInfo.GetUserAllVehiclesActiveInfo(System.Int32)" -->
        <member name="M:VLF.DAS.DB.VehicleInfo.GetOrganizationAllActiveVehiclesCfgInfo(System.Int32)">
            <summary>
            Gets all vehicles active assignment configuration information for current organization
            </summary>
            <param name="organizationId"></param>
            <returns>DataSet [Description],[BoxId],[FwId],[FwName],[FwDateReleased],[CommModeId],[BoxProtocolTypeId],[FwTypeId],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetOrganizationVehicles(System.Int32)">
            <summary>
            Get all organization vehicles
            </summary>
            <returns>DataSet [VehicleId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetFleetAllActiveVehiclesCfgInfo(System.Int32)">
            <summary>
            Gets all vehicles active assignment configuration information for current fleet
            </summary>
            <param name="fleetId"></param>
            <returns>DataSet [Description],[BoxId],[FwId],[FwName],[FwDateReleased],[CommModeId],[BoxProtocolTypeId],[FwTypeId],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleInfo.GetActiveVehicleCfgInfo(System.Int64)">
            <summary>
            Gets vehicle active assignment configuration information
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [Description],[BoxId],[FwId],[FwName],[FwDateReleased],[CommModeId],[BoxProtocolTypeId],[FwTypeId],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.SensorReport">
            <summary>
                 Generates sensors reporting functionality
            </summary>
            
        </member>
        <member name="M:VLF.DAS.DB.SensorReport.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.SensorReport.Exec_GetIdlingDurationForFleet(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
                 run sp_GetIdlingDurationForFleet2 which takes into consideration the user preferences 
            </summary>
            <param name="fleetName"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.SensorReport.Exec_GetSensorsPerFleet(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
                 calling sp_sp_GetSensorsPerFleet2 @fleetId, @sensorId, @dtFrom, @dtTo
                 returns [BoxId, OriginDateTime, BoxMsgInTypeId, CustomProp]
            </summary>
            <param name="fleetId"></param>
            <param name="sensorId"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.SensorReport.Exec_GetSensorsPerFleet2(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
                 calling sp_sp_GetSensorsPerFleet3 @fleetId, @sensorId, @dtFrom, @dtTo
                 returns [BoxId, OriginDateTime, BoxMsgInTypeId, CustomProp, VehicleId]
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <param name="sensorId"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.SensorReport.AddSensorRow(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32)">
            \comment  add one/multiple rows to the report 
            1) the ON..OFF case in the same day
              if firstDateTime.DayOfYear EQ lastDateTime then add one row  
            2) the ON..OFF in different days
              if firstDateTime.DayOfYear LT lastDateTime.DayOfYear
                  add multiple rows 
        </member>
        <member name="M:VLF.DAS.DB.SensorReport.CrossSensorRow(System.Int32,System.Int32,System.DateTime,System.DateTime,System.DateTime,System.Int32,System.Boolean)">
            \comment this fucntion is called when you have ON sensor in one day [lastDateTime]
                      and OFF in another day [newDateTime]
                  Steps:
                      close the firstDateTime row
                      fill all days but newDateTime with 100% utilization 
                      
            close the last row for a boxId ONLY when the row has the STATUS ON for sensorId
                      the value added to the report is computed with a specific date in mind 
                      here you have to fill also the [WorkingHours] and [MinutesInUse] field
        </member>
        <member name="M:VLF.DAS.DB.SensorReport.AddIdlingRow(System.Int32,System.DateTime,System.DateTime,System.Int32)">
            \fn     private void AddIdlingRow(int boxId, DateTime firstDateTime, DateTime lastDateTime, int duration)
            \brief  add a row in tblIdlingDuration table
        </member>
        <member name="M:VLF.DAS.DB.SensorReport.FillIdlingDuration(System.DateTime,System.DateTime,System.Data.DataSet)">
            <summary>
                 rowData has the following fields
                          [vlfMsgInHst.BoxId], [vlfMsgInHst.OriginDateTime], 
                          [vlfMsgInHst.BoxMsgInTypeId],	[vlfMsgInHst.CustomProp] 
            </summary>
            <param name="firstDateTime_"></param>
            <param name="lastDateTime_"></param>
            <param name="rowData"> this is the data obtained after you run 
              exec       sp_GetIdlingDurationForFleet @fleetName, @fromDate, @toDate
            </param>
            <comment>  
              (gb) 2006/12/14   added the summary for every day (the sum of all idling periods ) with a date of 2000/01/01
            </comment>
        </member>
        <member name="M:VLF.DAS.DB.SensorReport.FillFleetUtilization(System.Int32,System.DateTime,System.DateTime,System.Data.DataSet)">
            \fn     public void FillFleetUtilization(int paramSensor, DateTime firstDateTime_, DateTime lastDateTime_, DataSet rowData)
            
             \brief  this function receives all messages between specific hours and calculates the utilization of the time
                     based on the messages receives
                     A normal protocol is like this:
                        - the device is powered on    - MSG power on
                        - the sensor X is powered on  - SENSOR status ON
                        - the sensor X is powered off - the interval between SENSOR ON/OFF is added to a suplimentary column named UtilSensor
                        - the device is powered off   - MSG power off and the interval between POWER ON/OFF is added to a suplimentary column named UtilPower
                     Special cases:
                        - the table is starting with MSG power off - the interval is computed from 0 A.M
                        - the power off is received without SENSOR status off - it's possible ????
                        - the difference between ON/OFF is longer than 24 hours - suplimentary rows are added with utilization 100%
                     This function is producing a table like 
                     BoxId --- DateTime(Off) --- SensorId --- MinutesInUse  
                     This table contains for every box a graphic for every day when the sensors was between ON..OFF
                     For daily reports you have to aggregate those rows in one with ALL sensors like
                     BoxId --- SensorId --- Date --- MinutesInUse
                     The general report will have for a given period
                     BoxId --- Period --- SensorId --- MinutesInUse
             \comment rowData is the table returned after you called 
                      sp_GetSensorsPerFleet @fleetName, @sensorId, @dateFrom, @dateTo
                        having rows 
                     [vlfMsgInHst.BoxId], [vlfMsgInHst.OriginDateTime], [vlfMsgInHst.BoxMsgInTypeId], 	
                     [vlfMsgInHst.CustomProp]
        </member>
        <member name="P:VLF.DAS.DB.SensorReport.result">
            <summary>
                 returns the tblSensorsUsage and  tblIdlingDuration in a dataset
            </summary>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.DB.CommandScheduler">
            <summary>
            Provides interfaces to vlfCommandScheduler table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.AddTask(System.Int32,System.DateTime,System.Int32,System.Int16,System.String,System.Int16,System.Int16,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Add new task
            </summary>
            <returns> current task id or -1 in case of error</returns>
            <param name="userId"></param>
            <param name="time"></param>
            <param name="boxId"></param>
            <param name="commandID"></param>
            <param name="customProp"></param>
            <param name="protocolType"></param>
            <param name="commMode"></param>
            <param name="transmissionPeriod"></param>
            <param name="transmissionInterval"></param>
            <param name="usingDualMode"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Throws DASAppDataAlreadyExistsException information already exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.DeleteTask(System.Int64)">
            <summary>
            Delete existing task
            </summary>
            <returns>rows affected</returns>
            <param name="taskId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if task does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.DeleteTasksByBoxId(System.Int32)">
            <summary>
            Delete box tasks
            </summary>
            <param name="boxId"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.ReScheduledTask(System.Int64,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Reschedule task
            </summary>
            <param name="taskId"></param>
            <param name="transmissionPeriod"></param>
            <param name="transmissionInterval"></param>
            <param name="usingDualMode"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.GetUserTasks(System.Int32)">
            <summary>
            Get user tasks
            </summary>
            <param name="userId"></param>
            <returns>DataSet [TaskId],[RequestDateTime],[BoxId],[UserId],[BoxCmdOutTypeId],
            [BoxProtocolTypeId],[CommModeId],[TransmissionPeriod],[TransmissionInterval],
            [CustomProp],[LastDateTimeSent],[UsingDualMode],[VehicleId],
            [Description],[LicensePlate]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.ResetBoxCmdsScheduledDateTime(System.Int32)">
            <summary>
            Reset Box Cmds Scheduled DateTime
            </summary>
            <param name="boxId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.UpdateLastDateTimeSent(System.Int64,System.DateTime)">
            <summary>
            Update last DateTime sent
            </summary>
            <param name="taskId"></param>
            <param name="lastDateTimeSent"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.InitScheduledTasks">
            <summary>
                 put value 0 for RequestStatus 
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.UpdateScheduledTask(System.Int64,System.Byte,System.DateTime)">
            <summary>
                    
            </summary>
            <param name="taskId"></param>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>       
        </member>
        <member name="M:VLF.DAS.DB.CommandScheduler.GetCurrentlyScheduledTasks">
            <summary>
            Get currently scheduled tasks
            </summary>
            <returns>DataSet [TaskId],[RequestDateTime],[BoxId],[UserId],[BoxCmdOutTypeId],
            [BoxProtocolTypeId],[CommModeId],[TransmissionPeriod],[TransmissionInterval],
            [CustomProp],[LastDateTimeSent],[UsingDualMode]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.DB.CommandScheduler.GetCurrentlyScheduledTasks(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.DB.CommandScheduler.AddTaskInHistory(System.Int64,System.DateTime)" -->
        <member name="T:VLF.DAS.DB.BoxConfig">
            <summary>
            Provides interfaces to vlfFirmware table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetConfigInfo(System.Int16)">
            <summary>
            Retrieves configurations info. 	
            </summary>
            <param name="fwChId "></param>
            <returns>DataSet [FwChId],[ChPriority],[FwId],[FwName],[ChId],[ChName],[CommModeId],[CommModeName],[BoxProtocolTypeId],[BoxProtocolTypeName],[BoxHwTypeId],[BoxHwTypeName],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetConfigInfoByFwId(System.Int16)">
            <summary>
            Retrieves configurations info. 	
            </summary>
            <param name="fwChId "></param>
            <returns>DataSet [FwChId],[ChPriority],[ChName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetDefCommInfo(System.Int16)">
            <summary>
            Get box default communication info
            </summary>
            <param name="fwChId"></param>
            <returns>DataSet [CommAddressTypeId],[CommAddressTypeName],[CommAddressValue],[FwChId],[BoxHwTypeName],[BoxProtocolTypeId],[CommModeId],[ChId],[ChName],[ChPriority],[OAPPort] </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetAllConfigInfo">
            <summary>
            Get box configuration information. 
            </summary>
            <returns>DataSet[FwChId],[FwId],[FwName],[ChId],[ChName],[ChPriority],[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetAllPrimaryChannelsByFwId(System.Int16)">
            <summary>
            Get all primary channels by FwId
            </summary>
            <param name="fwId"></param>
            <returns>DataSet [BoxProtocolTypeId],[BoxProtocolTypeName],[CommModeId],[CommModeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetAllChannelsByFwId(System.Int16)">
            <summary>
            Get all channels by FwId, both primary and secondary
            </summary>
            <param name="fwId">Firmware Id</param>
            <returns>DataSet [FwChId], [FwId], [ChId], [ChName], [ChPriority]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetAllChannelsByFwId(System.Int16,System.Int16)">
            <summary>
            Get all channels by FwId
            </summary>
            <param name="fwId">Firmware Id</param>
            <param name="chPriority">Channel priority (0 - primary, 1 - secondary)</param>
            <returns>DataSet [FwChId], [FwId], [ChId], [ChName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetAllSecondaryChannelsByFwId(System.Int16)">
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetAllSecondaryChannelsByFwChId(System.Int16)">
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetAllSecondaryChannels(System.Int16,System.Int16)">
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetPrimaryFirmwareChannelInfo(System.Int16,System.Int16)">
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetFirmwareInfo(System.Int16)">
            <summary>
            Get Firmware Information. 
            </summary>
            <param name="fwId"></param>
            <returns>DataSet [FwChId],[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum],[BoxProtocolTypeId],[BoxProtocolTypeName],[CommModeId],[CommModeName],[ChPriority],[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetFirmwareInfoOnly(System.Int16)">
            <summary>
            Get Firmware Information. 
            </summary>
            <param name="fwId"></param>
            <returns>DataSet [FwId],[BoxHwTypeId],[FwName],[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones],[BoxHwTypeName],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetAllFirmwareInfo(System.Int16)">
            <summary>
            Get box configuration information. 
            </summary>
            <param name="selectedFwTypeId"></param>
            <returns>DataSet [FwId],[BoxHwTypeId],[FwName],[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones],[BoxHwTypeName],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetAllSupportedMessagesByFwChId(System.Int16)">
            <summary>
            Retrieves all supported messages by FW channel
            </summary>
            <param name="fwChId"></param>
            <returns>DataSet [BoxMsgInTypeId],[BoxMsgInTypeName],[AlarmLevel]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetPrimaryCommInfo(System.Int32,System.Int32,System.Int16)">
            <summary>
            Retrieves primary communication info
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <param name="commandID"></param>
            <returns>DataSet [BoxProtocolTypeId],[CommModeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetSecondaryCommInfo(System.Int32,System.Int32,System.Int16)">
            <summary>
            Retrieves secondary communication info
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <param name="commandID"></param>
            <returns>DataSet [BoxProtocolTypeId],[CommModeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.DB.BoxConfig.IsCompatibleFirmware(System.Int16,System.Int16,System.Int16)" -->
        <member name="M:VLF.DAS.DB.BoxConfig.FirmwareTypes">
            <summary>
            Get all firmware types information. 
            </summary>
            <returns>DataSet[FwTypeId],[FwTypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.HardwareTypes">
            <summary>
            Get all hardware types information. 
            </summary>
            <returns>DataSet[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetChannelsInfo">
            <summary>
            Retrieves Channels info. 	
            </summary>
            <returns>DataSet [ChId],[ChName],[BoxProtocolTypeId],[CommModeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.DB.BoxConfig.GetCommModesInfo" -->
        <member name="M:VLF.DAS.DB.BoxConfig.IsSamePrimaryProtocol(System.Int16,System.Int16)">
            <summary>
            Checks if both FW have the same primary protocol
            </summary>
            <param name="oldFwChId "></param>
            <param name="newFwChId "></param>
            <returns>true if it is same, otherwise returns false </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetFwChId(System.Int16,System.Int16,System.Boolean)">
            <summary>
            Get firmware CH id channels by FwId and CommModeId
            </summary>
            <param name="fwId"></param>
            <param name="commModeId"></param>
            <param name="isDual"></param>
            <returns>Fw Ch Id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.GetMaxFWId">
            <summary>
            Retrieves max record index from specific table
            </summary>
            <param name="primaryKeyFieldName"></param>
            <returns>max record index</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.AddFirmware(System.Int16,System.String,System.Int16,System.String,System.String,System.String,System.Int32,System.Int16)">
            <summary>
            Add new firmware.
            </summary>
            <param name="boxHwTypeId"></param>
            <param name="fwName"></param>
            <param name="fwTypeId"></param>
            <param name="fwLocalPath"></param>
            <param name="fwOAPPath"></param>
            <param name="fwDateReleased"></param>
            <param name="maxGeozones"></param>
            <param name="oAPPort"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.UpdateFirmwareInfo(System.Int16,System.String,System.String,System.Int32,System.Int16)">
            <summary>
            Update firmware info.
            </summary>
            <param name="fwId"></param>
            <param name="fwLocalPath"></param>
            <param name="fwOAPPath"></param>
            <param name="maxGeozones"></param>
            <param name="oAPPort"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if FW does not exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.AddFwChId">
            <summary>
            Add new FwChId.
            </summary>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.AddFirmwareCfg(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Add new firmware cfg.
            </summary>
            <param name="fwChId"></param>
            <param name="chId"></param>
            <param name="fwId"></param>
            <param name="chPriority"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.DeleteFirmware(System.Int16)">
            <summary>
            Delete Fw Id.
            </summary>
            <returns>void</returns>
            <param name="fwId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxConfig.DeleteFirmwareCfg(System.Int16)">
            <summary>
            Deletes firmware channel cfg
            </summary>
            <param name="fwChId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Model">
            <summary>
            Provides interfaces to vlfModel table
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Model.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Model.AddModel(System.String)">
            <summary>
            Adds new Model.
            </summary>
            <param name="modelName"></param>
            <returns>model id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if model name alredy exists</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Model.DeleteModel(System.Int32)">
            <summary>
            Deletes exist box hardware type by Id
            </summary>
            <param name="modelId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if model id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Model.GetModelNameById(System.Int32)">
            <summary>
            Retrieves box Protocol type name by id from "vlfModel" table
            </summary>
            <param name="modelId"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.Model.RecordCount">
            <summary>
            Retrieves record count of "vlfModel" table
            </summary>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.Model.MaxRecordIndex">
            <summary>
            Retrieves max record index from "vlfModel" table
            </summary>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.FleetVehicles">
            <summary>
            Provides interfaces to vlfFleetVehicles table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.AddVehicleToFleet(System.Int32,System.Int64)">
            <summary>
            Add new vehicle to fleet.
            </summary>
            <param name="fleetId"></param>
            <param name="vehicleId"></param>
            <returns>Int64</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle alredy exists in the fleet.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.PurgeVehicleFromAllFleets(System.Int64)">
            <summary>
            Purge existing vehicle from all fleets.
            </summary>
            <remarks>
            Cannot delete from default fleet.
            </remarks>
            <param name="vehicleId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.DeleteVehicleFromFleet(System.Int32,System.Int64)">
            <summary>
            Delete existing vehicle from the fleets.
            </summary>
            <remarks>
            Cannot delete from default fleet.
            </remarks>
            <param name="fleetId"></param> 
            <param name="vehicleId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.DeleteAllVehiclesFromFleet(System.Int32)">
            <summary>
            Delete existing vehicle assignments from the fleet.
            </summary>
            <param name="fleetId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.GetListOfFleetsByVehicleId(System.Int64,System.Int32)">
            <summary>
            Retrieves array of fleets by vehicle id, in case of empty result returns null.
            </summary>
            <param name="vehicleId"></param>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns> array of fleets</returns>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.GetListOfVehiclesByFleetId(System.Int32)">
            <summary>
            Retrieves array of vehicles in the fleet, in case of empty result returns null.
            </summary>
            <param name="fleetId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns> array of vehicles</returns>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.GetVehiclesInfoByFleetId(System.Int32)">
            <summary>
            Returns vehicle information by fleet id. 
            </summary>
            <param name="fleetId"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.GetVehiclesLastKnownPositionInfo(System.Int32,System.Int32)">
            <summary>
            Returns vehicles last known position information by fleet id. 
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <returns>
            DataSet 
            [LicensePlate],[VehicleId],[BoxId],[OriginDateTime],
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[StreetAddress],
            [Description],[BoxArmed],[LastCommunicatedDateTime],[GeoFenceEnabled],
            [IconTypeId],[IconTypeName],[VehicleTypeName],
            [LastStatusDateTime],[LastStatusSensor],[LastStatusSpeed],
            [PrevStatusDateTime],[PrevStatusSensor],[PrevStatusSpeed].
            [FwTypeId],[Dormant],[DormantDateTime]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VLF.DAS.DB.FleetVehicles.GetIdlingDurationForFleetId(System.Int32,System.Int32,System.DateTime,System.DateTime)" -->
        <member name="M:VLF.DAS.DB.FleetVehicles.GetFleetsInfoByVehicleId(System.Int64,System.Int32)">
            <summary>
            Returns fleets information by vehicle id. 
            </summary>
            <param name="vehicleId"></param>
            <param name="userId"></param>
            <returns>DataSet [FleetId],[OrganizationName],[FleetName],[Description],[OrganizationId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.GetAllUnassingToFleetsVehiclesInfo(System.Int32)">
            <summary>
            Retrieve unassigned to any fleet vehicles for current organization.
            </summary>
            <param name="organizationId"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.GetAllUnassingToFleetVehiclesInfo(System.Int32,System.Int32)">
            <summary>
            Retrieve all active vehicles info that unassigned to current fleet for current organization.
            </summary>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[VinNum],[MakeName],[ModelName],[VehicleTypeName],[StateProvince],[ModelYear],[Color],[Description]</returns>
            <param name="organizationId"></param>
            <param name="fleetId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetVehicles.IsVehicleExistInFleet(System.Int32,System.Int64)">
            <summary>
            Retrieves array of vehicles in the fleet, in case of empty result returns null.
            </summary>
            <param name="fleetId"></param>
            <param name="vehicleId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns> true if vehicle exist, otherwise false</returns>
        </member>
        <member name="T:VLF.DAS.DB.TxtMsgType">
            <summary>
            Provides interfaces to vlfTxtMsgType table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgType.AddRecord(System.Int16,System.String,System.String)">
            <summary>
            Adds new box MsgIn type.
            </summary>
            <param name="txtMsgTypeId"></param>
            <param name="txtMsgTypeName"></param>
            <param name="txtDispMsgTypeName"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgType.DeleteRecord(System.String)">
            <summary>
            Deletes existing text message type by name.
            </summary>
            <param name="txtMsgTypeName"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgType.DeleteRecord(System.Int16)">
            <summary>
            Deletes existing text message type by Id
            </summary>
            <returns>rows affected</returns>
            <param name="txtMsgTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgType.GetNameById(System.Int16)">
            <summary>
            Retrieves text message type name by id from "vlfTxtMsgType" table
            Throws exception in case of wrong result (see Tbl2UniqueFields class).
            </summary>
            <param name="txtMsgTypeId"></param>
            <returns>name</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgType.GetTxtMsgTypeInfoById(System.Int16)">
            <summary>
            Retrieves text message type name by id from "vlfTxtMsgType" table
            </summary>
            <param name="txtMsgTypeId"></param>
            <returns>DataSet [TxtMsgTypeId],[TxtMsgTypeName],[DisplaiedTxtMsgTypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.TblTwoPrimaryKeys">
            <summary>
            Provedes interfaces for two primary keys tables.
            Table structure is: [int],[int],..... 
            Primary keys are: ([int],[int])
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.TblTwoPrimaryKeys.#ctor(System.String,VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="tableName"></param>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.TblTwoPrimaryKeys.DeleteRowsByFields(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Deletes row by two primary keys.
            </summary>
            <param name="rowFieldName1"></param>
            <param name="rowFieldValue1"></param>
            <param name="rowFieldName2"></param>
            <param name="rowFieldValue2"></param>
            <param name="msgPostfix"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data deos not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TblTwoPrimaryKeys.GetList(System.String,System.Int32,System.String,System.String)">
            <summary>
            Retrieves array of int values, in case of empty result returns null.
            Throws DASException exception in case of error.
            </summary>
            <param name="rowSearchFieldName"></param>
            <param name="rowSearchFieldValue"></param>
            <param name="rowResultFieldName"></param>
            <param name="msgPostfix"></param>
            <returns>array [int]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.TblConnect2TblsWithoutRules">
            <summary>
            Provides interfaces for connection tables without rules.
            Table structure is: [int],[int]
            Primary keys are: both
            Constraints:   
            (otherTbl [1 -- many] currentTBL [many -- 1] otherTbl)
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.TblConnect2TblsWithoutRules.#ctor(System.String,VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="tableName"></param>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.TblConnect2TblsWithoutRules.AddNewRow(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Adds new row.
            </summary>
            <param name="rowFieldName1"></param>
            <param name="rowFieldValue1"></param>
            <param name="rowFieldName2"></param>
            <param name="rowFieldValue2"></param>
            <param name="msgPostfix"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.TblConnect2TblsWithRules">
            <summary>
            Provedes interfaces for connection tables with rules.
            Table structure is: [int],[int],[sting]
            Primary keys are: both
            Constraints:   
            (otherTbl [1 -- many] currentTBL [many -- 1] otherTbl)
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.TblConnect2TblsWithRules.#ctor(System.String,VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="tableName"></param>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.TblConnect2TblsWithRules.AddNewRow(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Add new row.
            </summary>
            <param name="rowFieldName1"></param>
            <param name="rowFieldValue1"></param>
            <param name="rowFieldName2"></param>
            <param name="rowFieldValue2"></param>
            <param name="rowFieldName3"></param>
            <param name="rowFieldValue3"></param>
            <param name="msgPostfix"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.TblConnect2TblsWithIntAdditField">
            <summary>
            Provedes interfaces for connection tables with rules.
            Table structure is: [int],[int],[int]
            Primary keys are: both
            Constraints:   
            (otherTbl [1 -- many] currentTBL [many -- 1] otherTbl)
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.TblConnect2TblsWithIntAdditField.#ctor(System.String,VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="tableName"></param>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.TblConnect2TblsWithIntAdditField.AddNewRow(System.String,System.Int32,System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Adds new row.
            </summary>
            <param name="rowFieldName1"></param>
            <param name="rowFieldValue1"></param>
            <param name="rowFieldName2"></param>
            <param name="rowFieldValue2"></param>
            <param name="rowFieldName3"></param>
            <param name="rowFieldValue3"></param>
            <param name="msgPostfix"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Dcl">
            <summary>
            Provides interfaces to vlfDcl table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.AddDcl(VLF.CLS.Def.Enums.CommMode,System.Int16,System.String,System.String,VLF.CLS.Def.Enums.ServiceState)">
            <summary>
            Add new DCL type.
            </summary>
            <param name="commModeId"></param>
            <param name="boxProtocolGroupId"></param>
            <param name="dclName"></param>
            <param name="description"></param>
            <param name="serviceState"></param>
            <returns>new dcl id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.DeleteDcl(System.Int16)">
            <summary>
            Delete exist DCL type.
            </summary>
            <param name="dclId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.DeleteDcl(System.String)">
            <summary>
            Delete exist DCL type.
            </summary>
            <param name="dclName"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.UpdateDclInfo(System.Int16,VLF.CLS.Def.Enums.CommMode,System.Int16,System.String,VLF.CLS.Def.Enums.ServiceState,System.Int16)">
            <summary>
            Update DCL type info.
            </summary>
            <param name="dclId"></param>
            <param name="commModeId"></param>
            <param name="boxProtocolGroupId"></param>
            <param name="description"></param>
            <param name="serviceState"></param>
            <param name="pid"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.GetDclInfo(System.Int16)">
            <summary>
            Retrieves DCL info
            </summary>
            <param name="dclId"></param>
            <returns>DataSet [DclId],[CommModeId],[BoxProtocolGroupId ],[DclName],[Description],
            [ServiceState],[PID],[BoxProtocolTypeId],[BoxProtocolTypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.GetProtocolTypesInfoByProtocolGroup(System.Int16)">
            <summary>
            Retrieves Protocol types info by protocol group
            </summary>
            <param name="boxProtocolGroupId"></param>
            <remarks>
            If Assembly is null, returns empty string ("")
            If ClassName is null, returns empty string ("")
            </remarks>
            <returns>DataSet [BoxProtocolTypeId],[BoxProtocolTypeName],[Assembly],[ClassName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.GetBoxCommInfoByCommAddressValue(System.String)">
            <summary>
            Retrieves Protocol types info by protocol group
            </summary>
            <param name="commAddressValue"></param>
            <returns>DataSet [BoxId],[BoxProtocolTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.GetDclId(System.Int32,VLF.CLS.Def.Enums.ProtocolTypes,VLF.CLS.Def.Enums.CommMode)">
            <summary>
            Retrieves DCL id by box Id, protocol type and communication mode
            </summary>
            <param name="boxId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="commModeId"></param>
            <remarks>
            If dcl with current configuration does not exist, returns VLF.CLS.Def.Const.unassignedIntValue
            </remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>dcl id</returns>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.GetOTADclId(VLF.CLS.Def.Enums.CommMode)">
            <summary>
            Retrieves DCL id by protocol type and communication mode
            </summary>
            <param name="boxProtocolTypeId"></param>
            <param name="commModeId"></param>
            <remarks>
            If dcl with current configuration does not exist, returns VLF.CLS.Def.Const.unassignedIntValue
            </remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>dcl id</returns>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.GetDclInfoByStatus(VLF.CLS.Def.Enums.ServiceState)">
            <summary>
            Retrieves DCL ids by service state
            </summary>
            <param name="serviceState"></param>
            <returns>DataSet [DclId],[DclName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.GetDclIdByName(System.String)">
            <summary>
            Retrieves DCL Id by name from "vlfDcl" table
            </summary>
            <param name="dclName"></param>
            <returns>dcl id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.GetDclStatusByName(System.String)">
            <summary>
            Retrieves DCL Status by name from "vlfDcl" table
            </summary>
            <param name="dclName"></param>
            <returns>DCL status <see cref="T:VLF.CLS.Def.Enums.ServiceState"/>/</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.GetDclIdList">
            <summary>
            Retrieves list of DCL Id by name from "vlfDcl" table
            </summary>
            <returns>In case of empty table returns null.</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.SetCommModeId(System.Int16,VLF.CLS.Def.Enums.CommMode)">
            <summary>
            Updates DCL type id from "vlfDcl" table
            </summary>
            <param name="dclId"></param>
            <param name="commModeId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.SetBoxProtocolTypeId(System.Int16,VLF.CLS.Def.Enums.ProtocolTypes)">
            <summary>
            Updates DCL Protocol Type Id
            </summary>
            <param name="dclId"></param>
            <param name="boxProtocolTypeId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.SetDclTypeName(System.Int16,System.String)">
            <summary>
            Updates DCL type name from "vlfDCl" table
            </summary>
            <param name="dclId"></param>
            <param name="dclName"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Dcl.SetDclDescription(System.Int16,System.String)">
            <summary>
            Updates DCL description in the "vlfDCl" table
            </summary>
            <param name="dclId"></param>
            <param name="description"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.Dcl.RecordCount">
            <summary>
            Retrieves record count from "vlfDcl" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.Dcl.MaxRecordIndex">
            <summary>
            Retrieves max record index from "vlfDcl" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.BoxCommInfo">
            <summary>
            Provides interfaces to vlfBoxCommInfo table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.AddCommInfo(System.Int32,System.Int16,System.String)">
            <summary>
            Add new box communication info.
            </summary>
            <param name="boxId"></param>
            <param name="commAddressTypeId"></param>
            <param name="commAddressValue"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown DASAppDataAlreadyExistsException if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.UpdateCommInfo(System.Int32,System.Int16,System.String)">
            <summary>
            Update box communication info.
            </summary>
            <param name="boxId"></param>
            <param name="commAddressTypeId"></param>
            <param name="commAddressValue"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.DeleteCommInfo(System.Int32,System.Int16)">
            <summary>
            Delete existing box communication info.
            </summary>
            <param name="boxId"></param> 
            <param name="commAddressTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.DeleteCommInfoByBoxId(System.Int32)">
            <summary>
            Delete existing box communication info.
            </summary>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.GetCommInfoByBoxId(System.Int32)">
            <summary>
            Returns only first box. 	
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [CommAddressTypeId],[CommAddressValue],[CommAddressTypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.GetCommInfoAddressValue(System.Int32,System.Int16)">
            <summary>
            Returns only first box. 	
            </summary>
            <param name="boxId"></param>
            <param name="commAddressTypeId"></param>
            <returns>CommAddressValue</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.GetBoxIdByCommAddressValue(System.String)">
            <summary>
            Returns only first box id by CommAddressValue. 	
            </summary>
            <param name="commAddressValue"></param>
            <returns>box id</returns>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown DASAppWrongResultException in case of unexpected multiple rows result.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.GetBoxConfigInfoByCommAddressValue(System.String)">
            <summary>
            Returns box configuration info by CommAddressValue. 	
            </summary>
            <param name="commAddressValue"></param>
            <returns>DataSet [BoxId],[BoxHwTypeId],[BoxProtocolTypeId],[CommModeId],[FwChId],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown DASAppWrongResultException in case of unexpected multiple rows result.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.ValidateCommAddressTypeByBoxId(System.Int32,System.Int16)">
            <summary>
            Prevents inconsistent insert of the "commAddressTypeId" field to the 
            "vlfBoxCommInfo" table by checking valid dependency in the 
            "vlfCommModeAddressType" table.
            In case of inconsistency throws exception.
            </summary>
            <param name="boxId"></param>
            <param name="commAddressTypeId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if communication address type doesn't match to box configuration.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.ValidateCommAddressValue(System.Int16,System.String)">
            <summary>
            Validate commAddressValue by commAddressValue
            </summary>
            <param name="commAddressTypeId"></param>
            <param name="commAddressValue"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.IsFreeCommInfo(System.Int32,System.Int16,System.String)">
            <summary>
            Check if communication info does not assigned to another box
            </summary>
            <param name="boxId"></param>
            <param name="commInfo"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>true if phone is free, otherwise returns false</returns>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.GetPrimaryServerIp(System.Int32,System.Int16)">
            <summary>
            Get Primary Server Ip. 	
            </summary>
            <param name="boxId"></param>
            <param name="commModeId"></param>
            <returns>serverIp</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCommInfo.GetBoxServerConfig(System.Int32,System.Int32)">
            <summary>
                 Get box - server configuration
            </summary>
            <param name="commModeId"></param>
            <param name="protocolTypeId"></param>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.DB.PersonInfo">
            <summary>
            Provides interfaces to vlfPersonInfo table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.AddPerson(VLF.CLS.Def.Structures.PersonInfoStruct@)">
            <summary>
            Add new person information.
            </summary>
            <param name="info"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if driver license or person alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.UpdateInfo(VLF.CLS.Def.Structures.PersonInfoStruct)">
            <summary>
            Update person information.
            </summary>
            <param name="info"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if person does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.UpdateInfo(System.String,System.String,System.String)">
            <summary>
            Update person information.
            </summary>
            <param name="personId"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if person does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.GetPersonInfoByDriverLicense(System.String)">
            <summary>
            Retrieves user info
            </summary>
            <returns>
            DataSet 
            [PersonId],[DriverLicense],[FirstName],[LastName],[MiddleName],
            [Birthday],[Address],[City],[StateProvince],[Country],
            [PhoneNo1],[PhoneNo2],[CellNo],[LicenseExpDate],[LicenseEndorsements],
            [Height],[Weight],[Gender],[EyeColor],[HairColor],[IdMarks],[Certifications],
            [Description]
            </returns>
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.GetPersonInfoByPersonId(System.String)">
            <summary>
            Retrieves person info
            </summary>
            <returns>
            DataSet 
            [PersonId],[DriverLicense],[FirstName],[LastName],[MiddleName],
            [Birthday],[Address],[City],[StateProvince],[Country],
            [PhoneNo1],[PhoneNo2],[CellNo],[LicenseExpDate],[LicenseEndorsements],
            [Height],[Weight],[Gender],[EyeColor],[HairColor],[IdMarks],[Certifications],
            [Description]
            </returns>
            <param name="personId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.GetAllPersonsInfoByOrganizationId(System.Int32)">
            <summary>
            Retrieves all persons info by organization id
            </summary>
            <returns>
            DataSet 
            [PersonId],[DriverLicense],[FirstName],[LastName],[MiddleName],
            [Birthday],[Address],[City],[StateProvince],[Country],
            [PhoneNo1],[PhoneNo2],[CellNo],[LicenseExpDate],[LicenseEndorsements],
            [Height],[Weight],[Gender],[EyeColor],[HairColor],[IdMarks],[Certifications],
            [Description]
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.GetAllUnassignedPersonsInfoByOrganizationId(System.Int32)">
            <summary>
            Retrieves all unassigned to organization persons info
            </summary>
            <returns>
            DataSet 
            [PersonId],[DriverLicense],[FirstName],[LastName],[MiddleName],
            [Birthday],[Address],[City],[StateProvince],[Country],
            [PhoneNo1],[PhoneNo2],[CellNo],[LicenseExpDate],[LicenseEndorsements],
            [Height],[Weight],[Gender],[EyeColor],[HairColor],[IdMarks],[Certifications],
            [Description]
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.GetAllPersonsIds">
            <summary>
            Retrieves all persons ids
            </summary>
            <returns> ArrayList [PersonId] </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.GetAllUnassignedPersonsIds">
            <summary>
            Retrieves all unassigned persons ids
            </summary>
            <returns> ArrayList [PersonId] </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.DeletePersonByPersonId(System.String)">
            <summary>
            Delete existing person.
            </summary>
            <returns>rows affected</returns>
            <param name="personId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if person with person id not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.DeletePersonByDriverLicense(System.String)">
            <summary>
            Delete existing person.
            </summary>
            <returns>rows affected</returns>
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if person with person id not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.PersonInfo.IsDriverLicenseExist(System.String)">
            <summary>
            Checks if person with same driver license already exists.
            </summary>
            <returns>bool</returns>
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.MsgOut">
            <summary>
            Provides interfaces to vlfMsgOut table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.AddMsg(VLF.CLS.Def.CMFOut,System.SByte,System.Int16,System.Int16,System.Int32)">
            <summary>
            Add new Msg.
            </summary>
            <param name="cMFOut"></param>
            <param name="priority"></param>
            <param name="dclId"></param>
            <param name="aslId"></param>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists (after number of attemps).</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.DrawNextCmfMsg(System.Int16,System.Int32@,VLF.CLS.Def.CMFOut[]@)">
            <summary>
            Returns next message (older one) in CMFOut format or null if result hasn't been found. 	
            Add new record to MsgOutHst table.
            If record alredy exists, try to add new one with DateTime + Const.nextDateTimeMillisecInterval
            Deletes old data by DateTime field.
            </summary>
            <returns>
            CMFOut,In case of error or after max retries (Const.violatedIntegrityMaxRetries) throws DASAppViolatedIntegrityConstraintsException exception.
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.DrawNextCmfMsg(System.Int16)">
            <summary>
            Returns next message (older one) in CMFOut format or null if result hasn't been found. 	
            Add new record to MsgOutHst table.
            If record alredy exists, try to add new one with DateTime + Const.nextDateTimeMillisecInterval
            Deletes old data by DateTime field.
            </summary>
            <returns>
            CMFOut,In case of error or after max retries (Const.violatedIntegrityMaxRetries) throws DASAppViolatedIntegrityConstraintsException exception.
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.DrawNextCmfMsg(System.Int16,System.DateTime)">
            <summary>
            Returns next message (older one) in CMFOut format or null if result hasn't been found. 	
            Add new record to MsgOutHst table.
            If record alredy exists, try to add new one with DateTime + Const.nextDateTimeMillisecInterval
            Deletes old data by DateTime field.
            </summary>
            <remarks>
            In case of error or after max retries (Const.violatedIntegrityMaxRetries)
            throws DASAppViolatedIntegrityConstraintsException exception.
            </remarks>
            <returns>CMFOut</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.DeleteBoxAllMsgs(System.Int32,System.String,System.String)">
            <summary>
            Deletes all messages from the history related to the box
            </summary>
            <param name="boxId"></param>
            <param name="tableName"></param>
            <param name="where"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.SetAck(System.Int32,System.DateTime,System.String)">
            <summary>
            Update acknowledged fields 
            </summary>
            <param name="boxId"></param>
            <param name="dateTime"></param>
            <param name="ackVal"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.SetAck(System.Int32,VLF.CLS.Def.Enums.CommandType,System.String)">
            <summary>
            Update acknowledged fields 
            </summary>
            <param name="boxId"></param>
            <param name="commandType"></param>
            <param name="ackVal"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.CheckMessageInMsgOut(System.Int32,VLF.CLS.Def.Enums.CommandType)">
            <summary>
            Check message in MsgOut table
            </summary>
            <param name="boxId"></param>
            <param name="commandType"></param>
            <returns>true if exists, otherwise returns false</returns>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.GetDetailedMessageFromHistory(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Retrieves message from history by box id and DateTime
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="dateTime"></param>
            <returns>DataSet [BoxId],[DateTime],
            [MsgTypeId],[MsgTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [ValidGps],[Latitude],[Longitude],[Speed],[Heading],[SensorMask],
            [CustomProp],[StreetAddress],[BoxArmed],
            [UserName],[FirstName],[LastName]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.GetLastMessagesFromHistory(System.Int16,System.Int32,System.Int16,System.DateTime,System.DateTime)">
            <summary>
            Retrieves last [num of records] messages from the history
            </summary>
            <param name="numOfRecords"></param>
            <param name="boxId"></param>
            <param name="cmdType"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns>DataSet [DateTime],[BoxId],[UserId],[Priority],[DclId],[AslId],
            [BoxCmdOutTypeId],[BoxCmdOutTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[CustomProp],[SequenceNum],[Acknowledged]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.GetLastCommandFromHistory(System.Int32,System.DateTime)">
            <summary>
            Retrieves last UploadFirmwareStatus command from the history
            </summary>
            <param name="boxId"></param>
            <param name="fromDateTime"></param>
            <returns>DataSet [Description],[FwName],[FwId],[DateTime],[BoxId],[CustomProp],[Acknowledged],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.AppendMsg(VLF.CLS.Def.CMFOut,System.Int64,System.SByte,System.Int16,System.Int16,System.Int32)">
            <summary>
            Add new Msg.
            </summary>
            <param name="cMFOut"></param>
            <param name="dateTime"></param>
            <param name="priority"></param>
            <param name="dclId"></param>
            <param name="aslId"></param>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.DeleteMsg(System.Int64,System.Int32)">
            <summary>
            Deletes exist message.
            </summary>
            <param name="dateTime"></param>
            <param name="boxId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.ValidateProtocolTypeByCmdOutType(System.Int16,System.Int16)">
            <summary>
            Prevents inconsistent insert of the "boxProtocolTypeId" field to the 
            "vlfMsgOut" table by checking valid dependency in the 
            "vlfBoxCmdOutType,vlfBoxProtocolTypeCmdOutType,vlfBoxProtocolType" tables.
            </summary>
            <param name="boxProtocolTypeId"></param>
            <param name="boxCmdOutTypeId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.AddToHistory(VLF.CLS.Def.CMFOut,System.DateTime,System.SByte,System.Int16,System.Int16,System.Int32)">
            <summary>
            Add Msg to the history.
            </summary>
            <param name="cMFOut"></param>
            <param name="dateTime"></param>
            <param name="priority"></param>
            <param name="dclId"></param>
            <param name="aslId"></param>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.RetrievesNextMsg(System.Int16,System.Int32,System.String)">
            <summary>
            Retrieves next record by dcl id
            </summary>
            <param name="dclId"></param>
            <param name="prefixMsg"></param>
            <returns>DataSet [DateTime],[BoxId],[UserId],[Priority],[DclId],[AslId],
            [BoxCmdOutTypeId],[BoxCmdOutTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[CustomProp],[SequenceNum],[Acknowledged]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.RetrievesNextMsg(System.Int16,System.DateTime,System.String)">
            <summary>
            Retrieves next record by dcl id
            </summary>
            <param name="dclId"></param>
            <param name="currTime"></param>
            <param name="prefixMsg"></param>
            <returns>DataSet [DateTime],[BoxId],[UserId],[Priority],[DclId],[AslId],
            [BoxCmdOutTypeId],[BoxCmdOutTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[CustomProp],[SequenceNum],[Acknowledged]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOut.GetLastSequenceNumber(System.Int32,System.Int16)">
            <summary>
            Get last sequence number from the history
            </summary>
            <param name="boxId"></param>
            <param name="boxProtocolTypeId"></param>
            <returns>Last Sequence Number</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.MsgOut.RecordCount">
            <summary>
            Retrieves record count of "vlfMsgOut" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.MsgInTblStruct">
            <summary>
            "vlfMsgIn" table structure
            </summary>
        </member>
        <member name="T:VLF.DAS.DB.MsgIn">
            <summary>
            Provides interfaces to vlfMsgIn table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.AddMsg(VLF.CLS.Def.CMFIn)">
            <summary>
            Add new Msg.
            </summary>
            <param name="cMFIn"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists (after number of ritries).</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.DrawNextXCmfMsg(System.Int32@,VLF.CLS.Def.CMFIn[]@)">
            \here you can shortcut on getting 
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.DrawNextCmfMsg(VLF.CLS.Def.CMFIn@)">
            <summary>
            Returns next message (older one) in the CMF format or null in case of no more results. 	
            Add new record to MsgInHst table without Blob data (only blob size).
            If record alredy exists, try to add new one with DateTime + Const.nextDateTimeMillisecInterval
            Deletes old data by DateTimeReceived field.
            </summary>
            <returns>true if new message hasbeen added succesfuly,otherwise throws </returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown in case of duplicated messages.</exception>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown after max retries (Const.violatedIntegrityMaxRetries).</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.FlushBoxMsg(System.Int32)">
            <summary>
            Removes all messages for specified boxID
            </summary>
            <param name="boxID"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetLastMessagesFromHistory(System.Int16,System.Int32,System.Int16,System.DateTime,System.DateTime)">
            <summary>
            Retrieves last [num of records] messages from the history
            </summary>
            <param name="numOfRecords"></param>
            <param name="boxId"></param>
            <param name="msgType"></param>
            <param name="from"></param>
            <param name="to"></param>
            <remarks>
            Purpose:	Debug communication (vlfHistory)
            Note:		Does not aggregate user preferences into result (TimeZone,Metric/Imperial units,etc.)
            </remarks>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetLastMessagesFromHistoryIgnored(System.Int16,System.Int32,System.Int16,System.DateTime,System.DateTime)">
            <summary>
            Retrieves last [num of records] ignored messages from the history
            </summary>
            <param name="numOfRecords"></param>
            <param name="boxId"></param>
            <param name="msgType"></param>
            <param name="from"></param>
            <param name="to"></param>
            <remarks>
            Purpose:	Debug communication (vlfHistory)
            Note:		Does not aggregate user preferences into result (TimeZone,Metric/Imperial units,etc.)
            </remarks>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetLastMessagesFromHistory(System.Int16,System.String,System.String)">
            <summary>
            Retrieves last [num of records] messages from the history
            </summary>
            <remarks>
            Purpose:	Debug communication (vlfHistory)
            Note:		Does not aggregate user preferences into result (TimeZone,Metric/Imperial units,etc.)
            </remarks>
            <param name="numOfRecords"></param>
            <param name="sqlAddWhere"></param>
            <param name="tableName"></param>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetLastDoSStartedFromHistory(System.String)">
            <summary>
            Retrieves last DoS message box id by client ip
            </summary>
            <param name="clientIp"></param>
            <returns> BoxId </returns>
            <remarks> If information does not exist, return 0</remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetLastSingleMessageFromHistory(System.Int32,System.Int32,VLF.CLS.Def.Enums.MessageType)">
            <summary>
            Retrieves last message for current box from the history
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="msgType"></param>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetMessageFromHistory(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Retrieves message from history by box id and DateTimeReceived
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="dateTime"></param>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetDetailedMessageFromHistory(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Retrieves message from history by box id and DateTime
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="originDateTime"></param>
            <returns>DataSet [BoxId],[DateTime],
            [MsgTypeId],[MsgTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[StreetAddress],[BoxArmed],
            [UserName],[FirstName],[LastName]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetMessagesFromHistoryByBoxId(System.Int32,System.Boolean,System.Int32,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int16,System.String,System.Boolean@,System.Int32@)">
            <summary>
            Retrieves messages from history by vehicle Id
            </summary>
            <param name="userId"></param>
            <param name="isSuperUser"></param>
            <param name="boxId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="tblLandmarks"></param>
            <param name="includeCoordinate"></param>
            <param name="includeSensor"></param>
            <param name="includePositionUpdate"></param>
            <param name="includeInvalidGps"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <remarks>
            1. Retrieves only specific messages from the history:
            Coordinate,Sensor,Speed,Fence,PositionUpdate,IPUpdate,KeyFobPanic
            2. Parse CustomProp field for Sensor and Fence messages, and add info into MsgDetails field
            3. Incase of IPUpdate message add new IP into MsgDetails field
            </remarks>
            <returns>
            DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed],[MsgDetails],[MsgDirection],[Acknowledged],[Scheduled]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetBoxOffHoursInfo(System.Int32,System.Boolean,System.Int32,System.DateTime,System.DateTime,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean@,System.Int32@)">
            <summary>
            Retrieves off hours information from history by box Id
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="dayFromHour"></param>
            <param name="dayFromMin"></param>
            <param name="dayToHour"></param>
            <param name="dayToMin"></param>
            <param name="weekendFromHour"></param>
            <param name="weekendFromMin"></param>
            <param name="weekendToHour"></param>
            <param name="weekendToMin"></param>
            <param name="tblLandmarks"></param>
            <param name="includeCoordinate"></param>
            <param name="includeSensor"></param>
            <param name="includePositionUpdate"></param>
            <param name="includeInvalidGps"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <remarks>
            1. Retrieves only specific messages from the history:
            Coordinate,Sensor,Speed,Fence,PositionUpdate,IPUpdate,KeyFobPanic
            2. Parse CustomProp field for Sensor and Fence messages, and add info into MsgDetails field
            3. Incase of IPUpdate message add new IP into MsgDetails field
            </remarks>
            <returns>
            DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed],[MsgDetails],[MsgDirection],[Acknowledged],[Scheduled]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.DeleteBoxAllMsgs(System.Int32,System.String,System.String)">
            <summary>
            Deletes all messages from the history related to the box
            </summary>
            <param name="boxId"></param>
            <param name="tableName"></param>
            <param name="where"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetEmptyStreetAddressFromHistory(System.Int32)">
            <summary>
            Retrieves records with empty StreetAddress fields from the MsgIn history
            </summary>
            <param name="cmdTimeOut"></param>
            <returns>DataSet [BoxId],[OriginDateTime],[Latitude],[Longitude]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.UpdateStreetAddressInHistory(System.Int32,System.DateTime,System.String,System.Int32,System.String)">
            <summary>
            Updates record with street address and/or nearestLandmark
            </summary>
            <remarks>
            BoxId and DateTimeReceived are index fields
            </remarks>
            <param name="boxId"></param>
            <param name="originDateTime"></param>
            <param name="streetAddress"></param>
            <param name="cmdTimeOut"></param>
            <param name="nearestLandmark"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.UpdateNearestLandmarkInHistory(System.Int32,System.DateTime,System.String)">
            <summary>
            Updates record with street address and/or nearestLandmark
            </summary>
            <remarks>
            BoxId and DateTimeReceived are index fields
            </remarks>
            <param name="boxId"></param>
            <param name="originDateTime"></param>
            <param name="streetAddress"></param>
            <param name="cmdTimeOut"></param>
            <param name="nearestLandmark"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetEmptyNearestLandmarkFromHistory">
            <summary>
            Retrieves records with empty Landmark fields from the MsgIn history
            </summary>
            <param name="cmdTimeOut"></param>
            <returns>DataSet [BoxId],[OriginDateTime],[Latitude],[Longitude]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.AppendMsg(VLF.CLS.Def.CMFIn)">
            <summary>
            Add new Msg into MsgIn table.
            </summary>
            <param name="cMFIn"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.DeleteMsg(System.Int64,System.Int32)">
            <summary>
            Deletes exist message.
            </summary>
            <param name="dateTimeReceived"></param>
            <param name="boxId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.ValidateProtocolTypeByMsgInType(System.Int16,System.Int16)">
            <summary>
            Prevents inconsistent insert of the "boxProtocolTypeId" field to the 
            "vlfMsgIn" table by checking valid dependency in the 
            "vlfBoxMsgInType,vlfBoxProtocolTypeMsgInType,vlfBoxProtocolType" tables.
            </summary>
            <param name="boxProtocolTypeId"></param>
            <param name="boxMsgInTypeId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.AddToHistory(VLF.CLS.Def.CMFIn,System.String)">
            <summary>
            Backup Msg to the MsgIn history table.
            Delete exist message.
            </summary>
            <param name="cMFIn"></param>
            <param name="currTableName"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.RetrievesNextMsg(System.Int32,System.String)">
            <summary>
            Retrieves next record.
            </summary>
            <param name="prefixMsg"></param>
            <returns>DataSet [DateTimeReceived],[BoxId],[DclId],[BoxMsgInTypeId],
            [BoxProtocolTypeId],[OriginDateTime],[CommInfo1],[CommInfo2],[ValidGps],
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[CustomProp],
            [BlobData],[BlobDataSize],[SequenceNum],[IsArmed]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetMessagesFromHistory(System.Int32,System.String,System.String)">
            <summary>
            Retrieves messages from history by filter
            </summary>
            <param name="userId"></param>
            <param name="sqlAddFrom"></param>
            <param name="sqlWhere"></param>
            <returns>DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetMessageFromHistory(System.Int32,System.DateTime)">
            <summary>
            Retrieves specific messages from history by box and originated time
            </summary>
            <param name="boxId"></param>
            <param name="originDateTime"></param>
            <returns>DataSet [DclId],[BoxMsgInTypeId],[BoxProtocolTypeId],
            [CommInfo1],[CommInfo2],
            [ValidGps],[Latitude],[Longitude],[Speed],[Heading],
            [SensorMask],[CustomProp],[BoxArmed]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetInvalidGPSStatistic(System.Int32,System.Int32)">
            <summary>
            Retrieves statistic for invalid GPS within 24 hours
            </summary>
            <param name="InvalidGPSPercent"></param>
            <param name="Hours"></param>
            <returns>
            DataSet [BoxId],[LicensePlate],[VehicleId],[Description],
            [OrganizationName],[InvalidMsgs],[ValidMsgs],[PercentInvalidMsgs]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetBoxesWithoutIpUpdates(System.Int32)">
            <summary>
            Retrieves boxes without IP Updates  for all boxes within 24 hours
            </summary>
            <param name="Hours"></param>
            <returns>
            DataSet [BoxId],[LicensePlate],[VehicleId],[Description],
            [OrganizationName]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetBoxesReportedFrequency(System.Int32,System.Int32,System.Int16)">
            <summary>
            Retrieves boxes reported Frequency  for all boxes within 24 hours
            </summary>
            <param name="Hours"></param>
            <param name="TotalMsg"></param>
            <param name="OrganizationId"></param>
            <returns>
            DataSet [BoxId],[TotalMessages],[OrganizationName]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgIn.GetMessagesFromHistoryByFleetId(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Retrieves messages from history by fleet Id
            </summary>
            <param name="fleetId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <remarks>
            1. Retrieves only specific messages from the history:
            Coordinate,Sensor,Speed,Fence,PositionUpdate,IPUpdate,KeyFobPanic
            2. Parse CustomProp field for Sensor and Fence messages, and add info into MsgDetails field
            3. Incase of IPUpdate message add new IP into MsgDetails field
            </remarks>
            <returns>
            DataSet [BoxId],[DateTimeReceived],[OriginDateTime],[DclId],
            [BoxMsgInTypeId],[BoxMsgInTypeName],[BoxProtocolTypeId],[BoxProtocolTypeName],
            [CommInfo1],[CommInfo2],[ValidGps],[Latitude],[Longitude],
            [Speed],[Heading],[SensorMask],[CustomProp],[BlobDataSize],[StreetAddress],
            [SequenceNum],[BoxArmed],[MsgDetails],[MsgDirection],[Acknowledged],[Scheduled]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.MsgIn.RecordCount">
            <summary>
            Retrieves record count of "vlfMsgIn" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Images">
            <summary>
            Provides interfaces to vlfImages table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Images.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Images.AddImage(System.Int32,System.Int16,System.Int16,System.Int32,System.Byte[],System.String)">
            <summary>
            Add new Image.
            </summary>
            <param name="boxId"></param>
            <param name="dclId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="imageSize"></param>
            <param name="imageData"></param>
            <param name="description"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Images.DeleteImageByImageIndex(System.Int32)">
            <summary>
            Deletes information by box id
            </summary>
            <param name="imageIndex"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Images.GetImageInfoByImageIndex(System.Int32)">
            <summary>
            Returns only first image. 
            </summary>
            <param name="imageIndex"></param>
            <returns>DataSet [ImageIndex],[DateTime},[ImageSize],[ImageData],[Description]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Images.DeleteImagesByLicensePlate(System.String)">
            <summary>
            Deletes information by license plate
            </summary>
            <param name="licensePlate"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Images.GetImagesInfoByLicensePlate(System.String)">
            <summary>
            Returns only first image. 
            </summary>
            <param name="licensePlate"></param>
            <returns>DataSet [ImageIndex],[DateTime},[ImageSize],[ImageData],[Description]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Images.SetDescription(System.Int32,System.String)">
            <summary>
            Update description  by image index.
            </summary>
            <param name="imageIndex"></param>
            <param name="description"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Images.AddToHistory(System.DateTime,System.DateTime,System.Int32,System.Int16,System.Int16,System.Int16,System.String,System.Int32)">
            <summary>
            Adds msg to history
            </summary>
            <remarks>
            Backup Msg to the history.
            Deletes exist message.
            </remarks>
            <param name="originDateTime"></param>
            <param name="dateTimeReceived"></param>
            <param name="boxId"></param>
            <param name="dclId"></param>
            <param name="boxMsgInTypeId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="customProp"></param>
            <param name="blobDataSize"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Images.GetImageIndexByLicensePlate(System.String)">
            <summary>
            Retrieves array of active images by license plate
            </summary>
            <param name="licensePlate"></param>
            <returns>In case of empty result, returns null.</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Images.IsImageExist(System.Int32)">
            <summary>
            Checks if image exist
            </summary>
            <param name="imageIndex"></param>
            <returns> True if image index exists, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Make">
            <summary>
            Provides interfaces to vlfMake table
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Make.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Make.AddMake(System.String)">
            <summary>
            Adds new Make.
            </summary>
            <param name="makeName"></param>
            <returns>make id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if make name alredy exists</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Make.DeleteMake(System.String)">
            <summary>
            Deletes exist make by name.
            </summary>
            <param name="makeName"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if make name does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Make.DeleteMake(System.Int32)">
            <summary>
            Deletes exist box hardware type by Id
            </summary>
            <param name="makeId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if make id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Make.GetMakeNameById(System.Int32)">
            <summary>
            Retrieves make name by id
            </summary>
            <param name="makeId"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Make.GetAllMakesNames">
            <summary>
            Retrieves all makes names.
            </summary>
            <returns>ArrayList [string]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.Make.RecordCount">
            <summary>
            Retrieves record count of "vlfMake" table
            </summary>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.Make.MaxRecordIndex">
            <summary>
            Retrieves max record index from "vlfMake" table
            </summary>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.BoxOutputsCfg">
            <summary>
            Provide interfaces to vlfBoxOutputsCfg table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.AddOutput(System.Int32,System.Int16,System.Int16,System.String,System.String)">
            <summary>
            Add new output.
            </summary>
            <param name="boxId"></param>
            <param name="boxHwTypeId"></param>
            <param name="outputId"></param>
            <param name="outputName"></param>
            <param name="outputAction"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if output id and name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.AddOutputs(System.Int32,System.Int16,System.Data.DataSet)">
            <summary>
            Add new outputs.
            </summary>
            <param name="boxId"></param>
            <param name="boxHwTypeId"></param>
            <param name="dsOutputsCfg"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if output id and name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.UpdateOutput(System.Int32,System.Int16,System.String,System.String)">
            <summary>
            Update output information.
            </summary>
            <param name="boxId"></param>
            <param name="outputId"></param>
            <param name="outputName"></param>
            <param name="outputAction"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not have info for current output.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.DeleteOutputsByBoxId(System.Int32)">
            <summary>
            Delete all outputs related to the box.
            </summary>
            <returns>void</returns>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if box id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.GetOutputsInfoByBoxId(System.Int32,System.Int32)">
            <summary>
            retrieves output info by box id and filter by User Id
            </summary>
            <param name="boxId"></param> 
            <param name="userId"></param> 
            <returns>DataSet [OutputId][OutputName][OutputAction]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.GetOutputsInfoStructByBoxId(System.Int32,System.Int32)">
            <summary>
            Retrieves output info structure [OutputId][OutputName][OutputAction] by box id and user id
            </summary>
            <param name="boxId"></param> 
            <param name="userId"></param> 
            <returns>string[,] of [OutputId][OutputName][OutputAction]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.GetOutputsNamesByBoxId(System.Int32,System.Int32)">
            <summary>
            Retrieves outputs names by box id and user id.
            </summary>
            <param name="boxId"></param> 
            <param name="userId"></param> 
            <returns>ArrayList</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.GetOutputsIdsArrayByBoxId(System.Int32,System.Int32)">
            <summary>
            retrieves outputs ids by box id and user id
            </summary>
            <param name="boxId"></param> 
            <param name="userId"></param> 
            <returns>ArrayList</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.GetMaxSupportedOutputsByHwType(System.Int16)">
            <summary>
            Retrieves max number of supported outputs for specific Hw type.
            Note: if box does not exist return 0
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxOutputsCfg.GetCurrentSupportedOutputsByBoxId(System.Int32)">
            <summary>
            Retrieves current number of supported outputs for specific box id.
            Note: if box does not exist return VLF.CLS.Def.Const.unassignedIntValue
            </summary>
            <param name="boxId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Box">
            <summary>
            Provides interfaces to vlfBox table.
            </summary>
            <comment> I added the option to queue some of the NonQuery statements in queue
                      and have a timer execute them at once
            </comment>
        </member>
        <member name="M:VLF.DAS.DB.Box.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Box.AddBox(System.Int32,System.Int16,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Add new box.
            </summary>
            <param name="boxId"></param>
            <param name="fwChId"></param>
            <param name="boxArmed"></param>
            <param name="boxActive"></param>
            <param name="organizationId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if box already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.DeleteRecord(System.Int32)">
            <summary>
            Delete existing box.
            Throws exception in case of wrong result (see TblOneIntPrimaryKey class).
            </summary>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetAllAssignedBoxIds(System.Boolean,System.Int32)">
            <summary>
            Retrieves all assigned/free boxes ids.
            </summary>
            <remarks>
            Assgned is true
            Free is false
            </remarks>
            <returns>[BoxId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="assigned"></param>
            <param name="organizationId"></param>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetAllAssignedBoxIdsDs(System.Boolean,System.Int32)">
            <summary>
            Retrieves all assigned boxes ids.
            </summary>
            <remarks>
            Assgned is true
            Free is false
            </remarks>
            <returns>[BoxId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="assigned"></param>
            <param name="organizationId"></param>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetAllAssignedBoxesInfo(System.Boolean,System.Int32)">
            <summary>
            Retrieves all assigned/free boxes info.
            </summary>
            <remarks>
            Assgned is true
            Free is false
            </remarks>
            <returns>DataSet [BoxId],[FwChId],[FwId],[FwName],[BoxHwTypeId],[BoxHwTypeName],[ChName],[BoxProtocolTypeId],[BoxProtocolTypeName],[CommModeId],[CommModeName],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="assigned"></param>
            <param name="organizationId"></param>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetAllAssignedBoxIdsInfo(System.Boolean,System.Int32)">
            <summary>
            Retrieves all assigned/free boxes info.
            </summary>
            <remarks>
            Assgned is true
            Free is false
            </remarks>
            <returns>DataSet [BoxId],[BoxHwTypeName],[BoxProtocolTypeName],[CommModeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="assigned"></param>
            <param name="organizationId"></param>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetBoxOrganization(System.Int32)">
            <summary>
            Retrives box organization
            </summary>
            <returns>OrganizationId</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="boxId"></param>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetBoxInfoByCommInfo(System.String)">
            <summary>
            Retrives box information by communication info
            </summary>
            <returns>DataSet [BoxId],[CommAddressTypeId],[CommAddressTypeName],[OrganizationId],[OrganizationName],[Description],[FleetName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="commInfo"></param>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetBoxLastValidGpsDateTime(System.Int32)">
            <summary>
            Get box last valid GPS datetime
            </summary>
            <param name="boxId"></param>
            <returns>[OriginDateTime]/// </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetBoxLastCommunicatedDateTime(System.Int32)">
            <summary>
            Get box last communicated datetime
            </summary>
            <param name="boxId"></param>
            <returns>[OriginDateTime]/// </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetBoxLastInfo(System.Int32,System.Int32)">
            <summary>
            Get box last information
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <returns>DataSet [BoxId],
            [OriginDateTime],[Latitude],[Longitude],[Speed],[Heading],[StreetAddress],
            [LastCommunicatedDateTime],[SensorMask],[BoxArmed],[GeoFenceEnabled],
            [LastStatusDateTime],[BoxActive]
            [LastStatusSensor],[LastStatusSpeed],[PrevStatusDateTime],[PrevStatusSensor],[PrevStatusSpeed]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetNextSensorStatus(System.Int32,System.DateTime)">
            <summary>
            Get box next sensor status information
            </summary>
            <param name="boxId"></param>
            <param name="currCommunicatedDateTime"></param>
            <returns>DataSet [OriginDateTime],[Speed]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetVehicleLastStreetAddress(System.Int32)">
            <summary>
            Get box last street address
            </summary>
            <param name="boxId"></param>
            <returns>street address</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetBoxLastSensorMask(System.Int32)">
            <summary>
            Get box last status information
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [SensorMask],[LastStatusDateTime]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.IsArmed(System.Int32)">
            <summary>
            Returns true if box is armed.
            </summary>
            <param name="boxId"></param>
            <returns>true if armed, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown if multiple records have been found.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.IsActive(System.Int32)">
            <summary>
            Returns true if box is active.
            </summary>
            <param name="boxId"></param>
            <returns>true if active, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASAppWrongResultException">Thrown if multiple records have been found.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdateBoxFwChId(System.Int32,System.Int16)">
            <summary>
            Update box FwChId.
            </summary>
            <param name="boxId"></param>
            <param name="fwChId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if box or configuration is incorrect.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.SetArmed(System.Int32,System.Boolean)">
            <summary>
            Update state(Armed/Disarmed).
            </summary>
            <param name="boxId"></param>
            <param name="boxArmed"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if box or configuration is incorrect.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.SetActive(System.Int32,System.Boolean)">
            <summary>
            Update status 
            </summary>
            <param name="boxId"></param>
            <param name="boxActive"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if box or configuration is incorrect.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdateStatus(System.Int32,System.Boolean,System.DateTime,System.Int64,System.Boolean,System.Boolean)">
            <summary>
            Update box sensor status.
            </summary>
            <param name="boxId"></param>
            <param name="boxArmed"></param>
            <param name="lastCommunicatedDateTime"></param>
            <param name="sensorMask"></param>
            <param name="geoFenceEnabled"></param>
            <param name="boxActive"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdateDormantStatus(System.Int32,System.DateTime,System.Int16)">
            <summary>
            Update box dormant status.
            </summary>
            <param name="boxId"></param>
            <param name="originatedDateTime"></param>
            <param name="currDormantStatus"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdateLastStatusSensor(System.Int32,System.Int16)">
            <summary>
            Update box current sensor status
            </summary>
            <param name="boxId"></param>
            <param name="lastStatusSensor"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdatePrevStatusSensor(System.Int32,System.Int16)">
            <summary>
            Update box previous sensor status
            </summary>
            <param name="boxId"></param>
            <param name="prevStatusSensor"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdateLastSpeedStatus(System.Int32,System.Int16)">
            <summary>
            Update box current speed status
            </summary>
            <param name="boxId"></param>
            <param name="lastStatusSensor"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdatePrevSpeedStatus(System.Int32,System.Int16)">
            <summary>
            Update box previous speed status
            </summary>
            <param name="boxId"></param>
            <param name="prevStatusSpeed"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdateLastStatusDateTime(System.Int32,System.DateTime)">
            <summary>
            Update box sensor status datetime.
            </summary>
            <param name="boxId"></param>
            <param name="lastStatusDateTime"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdatePrevStatusDateTime(System.Int32,System.DateTime)">
            <summary>
            Update box prev sensor status datetime.
            </summary>
            <param name="boxId"></param>
            <param name="prevStatusDateTime"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdatePosition(System.Int32,System.DateTime,System.Double,System.Double)">
            <summary>
            Update box position.
            </summary>
            <param name="boxId"></param>
            <param name="lastValidDateTime"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdatePosition(System.Int32,System.DateTime,System.Double,System.Double,System.Int16,System.Int16)">
            <summary>
            Update box position.
            </summary>
            <param name="boxId"></param>
            <param name="lastValidDateTime"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="speed"></param>
            <param name="heading"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetEmptyStreetAddress(System.Int32)">
            <summary>
            Retrieves records with empty StreetAddresses
            </summary>
            <returns>DataSet [BoxId],[Latitude],[Longitude]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="cmdTimeOut"></param>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetEmptyNearestLandmark">
            <summary>
            Retrieves records with empty NearestLandmark
            </summary>
            <returns>DataSet [BoxId],[Latitude],[Longitude]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="cmdTimeOut"></param>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdateStreetAddress(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Updates record with street address and/or nearestLandmark
            </summary>
            <param name="boxId"></param>
            <param name="streetAddress"></param>
            <param name="cmdTimeOut"></param>
            <param name="nearestLandmark"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if street address already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.UpdateNearestLandmark(System.Int32,System.String)">
            <summary>
            Updates record with nearestLandmark
            </summary>
            <param name="boxId"></param>
            <param name="nearestLandmark"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if street address already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetBoxConfigInfo(System.Int32)">
            <summary>
            Get box configuration information. 
            </summary>
            <param name="boxId"></param>
            <returns>DataSet[BoxId],[FwChId],[MaxMsgs],[MaxTxtMsgs],
            				[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum] // HW type information
            				[BoxProtocolTypeId],[BoxProtocolTypeName] // box protocol type information
            				[CommModeId],[CommModeName],[ChPriority],
            				[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones],
                          [OAPPort]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetBoxConfiguration(System.Int32)">
            <summary>
            Get box configuration information - dcl excuded - used by Management Console 
            </summary>
            <param name="boxId"></param>
            <returns>DataSet[BoxId],[FwChId],[MaxMsgs],[MaxTxtMsgs],
            				[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum] // HW type information
            				[BoxProtocolTypeId],[BoxProtocolTypeName] // box protocol type information
            				[CommModeId],[CommModeName],[ChPriority],
            				[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones],
                          [OAPPort]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetFwChId(System.Int16,System.Int16,System.Int16)">
            <summary>
            Get firmware channel
            </summary>
            <param name="selectedFwId"></param>
            <param name="selectedPrimeCommMode"></param>
            <param name="selectedSecCommMode"></param>
            <returns>fwChId</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.IsPrimaryOnlyModeExist(System.Int16,System.Int16)">
            <summary>
            Checks if primary only communication mode is exist
            </summary>
            <param name="fwId"></param>
            <param name="fwChId"></param>
            <returns>true if existonly primary comm mode exist, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetBoxFwChInfo(System.Int32)">
            <summary>
            Get box firmware info. 	
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [BoxId],[FwId],[FwName],[FwChId],[BoxHwTypeId],[BoxHwTypeName],[MaxSensorsNum],[MaxOutputsNum],[FwTypeId],[FwLocalPath],[FwOAPPath],[FwDateReleased],[MaxGeozones],[OAPPort]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Box.GetFwChId(System.Int16,System.Int16)">
            <summary>
            Get firmware channel
            </summary>
            <param name="selectedFwId"></param>
            <param name="protocolTypeId"></param>
            <returns>fwChId</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.SystemUpdates">
            <summary>
            Provides interface to vlfSystemUpdates table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.SystemUpdates.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.SystemUpdates.AddSystemUpdate(System.DateTime,System.String,VLF.CLS.Def.Enums.SystemUpdateType,VLF.CLS.Def.Enums.AlarmSeverity)">
            <summary>
            Adds new system update
            </summary>
            <param name="systemUpdateDateTime"></param>
            <param name="msg"></param>
            <param name="systemUpdateType"></param>
            <param name="severity"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user with this datetime already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.SystemUpdates.GetSystemUpdates(System.Int32,System.DateTime,System.DateTime,VLF.CLS.Def.Enums.SystemUpdateType)">
            <summary>
            Retrieves system updates.
            </summary>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="systemUpdateType"></param>
            <returns>DataSet [MsgId],[Msg],[SystemUpdateType],[AlarmLevel]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.SystemUpdates.GetSystemUpdatesByLang(System.Int32,System.DateTime,System.DateTime,VLF.CLS.Def.Enums.SystemUpdateType,System.String)">
            <summary>
            Retrieves system updates.
            </summary>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="systemUpdateType"></param>
            <returns>DataSet [MsgId],[Msg],[SystemUpdateType],[AlarmLevel]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.SystemUpdates.DeleteSystemUpdate(System.Int32)">
            <summary>
            Deletes system update.
            </summary>
            <param name="msgId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.MsgOutLite">
            <summary>
            Provides interfaces to vlfMsgOut table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.MsgOutLite.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.MsgOutLite.AddMsg(VLF.CLS.Def.CMFOut,System.SByte,System.Int16,System.Int16,System.Int32)">
            <summary>
            Add new Msg.
            </summary>
            <param name="cMFOut"></param>
            <param name="priority"></param>
            <param name="dclId"></param>
            <param name="aslId"></param>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists (after number of attemps).</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOutLite.ValidateProtocolTypeByCmdOutType(System.Int16,System.Int16)">
            <summary>
            Prevents inconsistent insert of the "boxProtocolTypeId" field to the 
            "vlfMsgOut" table by checking valid dependency in the 
            "vlfBoxCmdOutType,vlfBoxProtocolTypeCmdOutType,vlfBoxProtocolType" tables.
            </summary>
            <param name="boxProtocolTypeId"></param>
            <param name="boxCmdOutTypeId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgOutLite.AppendMsg(VLF.CLS.Def.CMFOut,System.Int64,System.SByte,System.Int16,System.Int16,System.Int32)">
            <summary>
            Add new Msg.
            </summary>
            <param name="cMFOut"></param>
            <param name="dateTime"></param>
            <param name="priority"></param>
            <param name="dclId"></param>
            <param name="aslId"></param>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.BoxProtocolType">
            <summary>
            Setup/Retrieve box protocol type settings
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolType.DeleteRecord(System.String)">
            <summary>
            Delete exist box protocol type by name.
            </summary>
            <param name="boxProtocolTypeName"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolType.DeleteRecord(System.Int16)">
            <summary>
            Delete exist box hardware type by Id
            </summary>
            <param name="boxProtocolTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolType.GetNameById(System.Int16)">
            <summary>
            Retrieves box Protocol type name by id from "vlfBoxProtocolType" table
            </summary>
            <param name="boxProtocolTypeId"></param>
            <returns>returns protocol type name by id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.BoxProtocolType.RecordCount">
            <summary>
            Retrieves record count of "vlfBoxProtocolType" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.BoxProtocolType.MaxRecordIndex">
            <summary>
            Retrieves max record index from "vlfBoxProtocolType" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.BoxSettings">
            <summary>
            Provides interfaces to vlfBox table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxSettings.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxSettings.AddBoxSettings(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Add new box settings.
            </summary>
            <param name="boxId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="commModeId"></param>
            <param name="maxMsgs"></param>
            <param name="maxTxtMsgs"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if box already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSettings.DeleteBoxSettings(System.Int32)">
            <summary>
            Delete existing box.
            </summary>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSettings.UpdateBoxSettings(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Update box config Id.
            </summary>
            <param name="boxId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="commModeId"></param>
            <param name="maxMsgs"></param>
            <param name="maxTxtMsgs"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data doesn't exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSettings.GetBoxSettingsInfo(System.Int32)">
            <summary>
            Retrieves box max messages per protocol and communication mode
            </summary>
            <returns>DataSet [BoxProtocolTypeId],[CommModeId],[MaxMsgs],[MaxTxtMsgs]</returns>
            <param name="boxId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.BoxCmdOutType">
            <summary>
            Provides interfaces to vlfBoxCmdOutType table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxCmdOutType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxCmdOutType.AddRecord(System.Int16,System.String)">
            <summary>
            Add new box command out type.
            </summary>
            <param name="boxCmdOutTypeId"></param>
            <param name="boxCmdOutTypeName"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if command already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCmdOutType.DeleteRecord(System.String)">
            <summary>
            Delete exist box command out type by name.
            </summary>
            <param name="boxCmdOutTypeName"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCmdOutType.DeleteRecord(System.Int16)">
            <summary>
            Delete exist box command out type by Id
            </summary>
            <param name="boxCmdOutTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxCmdOutType.GetNameById(System.Int16)">
            <summary>
            retrieves box command out type name by id from "vlfBoxCmdOutType" table
            </summary>
            <param name="boxCmdOutTypeId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>command name</returns>
        </member>
        <member name="T:VLF.DAS.DB.UserPreference">
            <summary>
            Provides interfaces to vlfUserLogin table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.UserPreference.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.UserPreference.AddUserPreference(System.Int32,System.Int32,System.String)">
            <summary>
            Adds new user preference
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <param name="preferenceValue"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserPreference.UpdateUserPreference(System.Int32,System.Int32,System.String)">
            <summary>
            Updates user preference
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <param name="preferenceValue"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user preference does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserPreference.SetDayLightSaving(System.Boolean)">
            <summary>
            Set DayLight Savings.
            </summary>
            <returns>void</returns>
            <param name="dayLightSaving"></param>
            <remarks>Set day light savings only to users how has autonatic adjusteble DayLightSaving feature.</remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserPreference.DeleteUserPreferences(System.Int32)">
            <summary>
            Deletes all user preferences
            </summary>
            <param name="userId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserPreference.DeleteUserPreference(System.Int32,System.Int32)">
            <summary>
            Deletes user preference
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserPreference.GetAllUserPreferencesInfo(System.Int32)">
            <summary>
            Retrieves all user preferences info
            </summary>
            <param name="userId"></param>
            <returns>DataSet [UserId], [PreferenceId], [PreferenceName], [PreferenceValue]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserPreference.GetUserPreferenceInfo(System.Int32,System.Int32)">
            <summary>
            Retrieves user preference info
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <returns>DataSet [UserId], [PreferenceId], [PreferenceName], [PreferenceValue]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserPreference.GetAllUsersPreferencesInfo">
            <summary>
            Retrieves all users preferences info
            </summary>
            <returns>DataSet [UserId], [PreferenceId], [PreferenceName], [PreferenceValue]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.UserGroup">
            <summary>
            Provides interfaces to vlfUserGroup table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.UserGroup.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.UserGroup.AddUserGroup(System.String)">
            <summary>
            Add new user group.
            </summary>
            <param name="userGroupName"></param>
            <returns>vod</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user group name already exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroup.SetUserGroupName(System.String,System.String)">
            <summary>
            Updates user group name
            </summary>
            <param name="oldUserGroupName"></param> 
            <param name="newUserGroupName"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroup.SetUserGroupName(System.Int16,System.String)">
            <summary>
            Updates user group name
            </summary>
            <param name="userGroupId"></param> 
            <param name="newUserGroupName"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroup.DeleteUserGroup(System.String)">
            <summary>
            Deletes exist user group by name.
            </summary>
            <param name="userGroupName"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user group name does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroup.DeleteUserGroup(System.Int16)">
            <summary>
            Delete exist user group by Id
            </summary>
            <param name="userGroupId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user group id does not exist</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroup.GetUserGroupNameById(System.Int16)">
            <summary>
            Gets user group name by id
            </summary>
            <param name="userGroupId"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroup.GetUserGroupIdByName(System.String)">
            <summary>
            Gets user group id by name
            </summary>
            <param name="userGroupName"></param>
            <returns>short</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroup.GetAllUserGroupNames">
            <summary>
            Retrieves all user group names.
            </summary>
            <returns>ArrayList</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroup.GetAllUserGroupsInfo(System.Boolean)">
            <summary>
            Retrieves all user groups info.
            </summary>
            <returns>DataSet [UserGroupId],[UserGroupName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.UserGroup.RecordCount">
            <summary>
            Retrieves record count of "vlfUserGroup" table
            </summary>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.UserGroup.MaxRecordIndex">
            <summary>
            Retrieves max record index from "vlfUserGroup" table
            </summary>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Report">
            <summary>
            Provides interface to all reports in the system
            </summary>
            <remarks>
            This class unlike other DB classes does not connected to the table directly
            In this case in constructor, first parameter "table name" is empty.
            </remarks>
        </member>
        <member name="M:VLF.DAS.DB.Report.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetMsgInHistoryInformation(System.String,System.String,System.String,System.Int32,System.Data.DataSet,System.Boolean@,System.Int32@)">
            <summary>
            Returns history information from vlfMsgInHst table. 
            </summary>
            <param name="licensePlate"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="userId"></param>
            <param name="dsParams"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns>
            DataSet [BoxId],[DateTimeReceived],[BoxMsgInTypeId],[MsgType],
            [BoxProtocolTypeId],[ProtocolType],[OriginDateTime],[ValidGps],
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[CustomProp],[StreetAddress]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetMsgInHistoryInformation(System.Int32,System.String,System.String,System.Int32,System.Boolean@,System.Int32@)">
            <summary>
            Returns history information from vlfMsgInHst table. 
            </summary>
            <param name="boxId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns>
            DataSet [BoxId],[DateTimeReceived],[BoxMsgInTypeId],[MsgType],
            [BoxProtocolTypeId],[ProtocolType],[OriginDateTime],[ValidGps],
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[CustomProp],[StreetAddress]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetMsgInHistoryExceptionInformation(System.Int32,System.String,System.String,System.Int32,System.Data.DataSet,System.Boolean@,System.Int32@)">
            <summary>
            Returns history information from vlfMsgInHst table. 
            </summary>
            <param name="boxId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="userId"></param>
            <param name="dsParams"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <returns>
            DataSet [BoxId],[DateTimeReceived],[BoxMsgInTypeId],[MsgType],
            [BoxProtocolTypeId],[ProtocolType],[OriginDateTime],[ValidGps],
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[CustomProp],[StreetAddress]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetVehicleLatencyInformation(System.Int64,System.String,System.String,System.Data.DataSet)">
            <summary>
            Returns Latency information from vlfMsgInHst table. 
            </summary>
            <param name="vehicleId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="dsParams"></param>
            <returns>
            DataSet [OrganizationName],[Description],[BoxId],[CommModeName],[NumOfMsgs],[DiffInSec]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetFleetLatencyReport(System.Int32,System.String,System.String,System.Data.DataSet)">
            <summary>
            Returns Latency information from vlfMsgInHst table. 
            </summary>
            <param name="fleetId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="dsParams"></param>
            <returns>
            DataSet [OrganizationName],[Description],[BoxId],[CommModeName],[NumOfMsgs],[DiffInSec]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.InsertSecheduledReport(System.Int32,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.String,System.Int32,System.DateTime,System.String,System.Boolean)">
            <summary>
            Populates vlfReportSchedules table. 
            </summary>
            <param name="userID"></param>
            <param name="periodStart"></param>        
            <param name="periodEnd"></param>
            <param name="deliveryDeadLine"></param>
            <param name="xmlParams"></param>
            <param name="emails"></param>
            <param name="url"></param>
            <param name="reportType"></param>
            <param name="statusDate"></param>
            <returns>
            int 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetScheduledReportsByUser(System.Int32)">
            <summary>
            gets all Scheduled reports for the specied user. 
            </summary>
            <param name="userID"></param>        
            <returns>
            DataSet 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetScheduledReportsByStatus(System.Int32)">
            <summary>
            gets all Scheduled reports by status . 
            </summary>
            <param name="status"></param>        
            <returns>
            DataSet 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.UpdateScheduledReportDatesAndURL(System.Int32,System.DateTime,System.DateTime,System.DateTime,System.String,System.Int32)">
            <summary>
            gets all Scheduled reports by status . 
            </summary>
            <param name="originalReportRow"></param>   
            <param name="newDelivery"></param> 
            <param name="newFrom"></param> 
            <param name="newTo"></param> 
            <returns>
            int 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetReportsName(System.Int32)">
            <summary>
            gets gui report name reports. 
            </summary>
            <param name="guiID"></param>        
            <returns>
            DataSet 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.DeleteByReportID(System.Int32)">
            <summary>
            Deletes a Scheduled report. 
            </summary>
            <param name="reportID"></param>        
            <returns>
            int 
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetOrganizationLatencyReport(System.Int32,System.String,System.String,System.Data.DataSet)">
            <summary>
            Returns Latency information from vlfMsgInHst table. 
            </summary>
            <param name="organizationId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="dsParams"></param>
            <returns>
            DataSet [OrganizationName],[Description],[BoxId],[CommModeName],[NumOfMsgs],[DiffInSec]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetAlarmReport(System.Int32,System.Int32,System.String,System.String,System.Boolean@,System.Int32@)">
            <summary>
            Retrieves alarm report. 
            </summary>
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[AlarmSeverity],[AlarmType],
            [DateTimeAck],[DateTimeClosed],[Description],
            [BoxId],[OriginDateTime],[ValidGps],
            [BoxMsgInTypeId],[BoxMsgInTypeName],
            [BoxProtocolTypeId],[BoxProtocolTypeName]
            [Latitude],[Longitude],[Speed],[Heading],[SensorMask],[CustomProp],[StreetAddress],
            [UserId],[UserName],[DriverLicense],[FirstName],[LastName]
            </returns>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="requestOverflowed"></param>
            <param name="totalSqlRecords"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetSystemUsageExceptionReportForAllOrganizations(System.String,System.String)">
            <summary>
            Retrieves system usage exseption report. 
            </summary>
            <returns>
            DataSet [OrganizationName],[Description],[BoxId],[MaxMsgs],[MaxTxtMsgs],[BoxProtocolTypeName],[OrganizationId],[TotalMsgInSize],[TotalMsgOutSize]
            </returns>
            <remarks> order by OrganizationName</remarks>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetSystemUsageReportByOrganization(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves system usage report. 
            </summary>
            <returns>
            DataSet [Description],[BoxId],[MaxMsgs],[MaxTxtMsgs],[BoxProtocolTypeName],[TotalMsgInSize],[TotalMsgOutSize]
            </returns>
            <param name="organizationId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="showExceptionOnly"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetSystemUsageReportByBox(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves system usage report. 
            </summary>
            <returns>
            DataSet [Description],[BoxId],[MaxMsgs],[MaxTxtMsgs],[BoxProtocolTypeName],[TotalMsgInSize],[TotalMsgOutSize]
            </returns>
            <param name="boxId"></param>
            <param name="fromDateTime"></param>
            <param name="toDateTime"></param>
            <param name="showExceptionOnly"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetExceptionReport(System.String,System.Int32,System.String,System.String,System.Int32,System.Int16,System.Int32,System.Data.DataSet,System.String,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean@,System.Int32@)">
            <summary>
             Retrieves exception report by license plate
            </summary>
             <param name="licensePlate"></param>
             <param name="fromDateTime"></param>
             <param name="toDateTime"></param>
             <param name="userId"></param>
             <param name="sosLimit"></param>
             <param name="noDoorSnsHrs"></param>
             <param name="dsResult"></param>
             <param name="vehicleDescription"></param>
             <param name="vehicleId"></param>
             <param name="includeTar"></param>
             <param name="includeMobilize"></param>
             <param name="fifteenSecDoorSns"></param>
             <param name="leash50"></param>
             <param name="mainAndBackupBatterySns"></param>
             <param name="tamperSns"></param>
             <param name="anyPanicSns"></param>
             <param name="threeKeypadAttemptsSns"></param>
             <param name="altGPSAntennaSns"></param>
             <param name="controllerStatus"></param>
             <param name="leashBrokenSns"></param>
             <param name="userTimezone"></param>
             <param name="driverDoor"></param>
             <param name="passengerDoor"></param>
             <param name="sideHopperDoor"></param>
             <param name="rearHopperDoor"></param>
             <param name="requestOverflowed"></param>
             <param name="totalSqlRecords"></param>
             <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
             <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.PrepareStreetAddress(System.Double,System.Double,System.Data.DataTable,VLF.MAP.ClientMapProxy,System.String@)">
            <summary>
            Replace street address with organization landmark
            </summary>
            <param name="lat"></param>
            <param name="lon"></param>
            <param name="tblLandMarks"></param>
            <param name="geoMap"></param>
            <param name="streetAddress"></param>
            <returns>false in case of invalid position, otherwise returns true</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetStopDurationBetweenTrips(System.Data.DataTable,System.Data.DataTable)">
            <summary>
            Retrieves stop duration between trips
            </summary>
            <param name="tblTripsStart"></param>
            <param name="tblTripsEnd"></param>
            <returns>DataSet [TripIndex],[Summary],[Remarks],[BoxId],
            [Date/Time],[Location],[Latitude],[Longitude],[VehicleId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetConfigParameter(System.String,System.Int16,System.String,System.Int32)">
            <summary>
            Gets configuration parameter
            </summary>
            <param name="moduleName"></param>
            <param name="groupID"></param>
            <param name="paramName"></param>
            <param name="defaultValue"></param>
            <returns>int value</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetConfigParameter(System.String,System.Int16,System.String,System.String)">
            <summary>
            Gets configuration parameter
            </summary>
            <param name="moduleName"></param>
            <param name="groupID"></param>
            <param name="paramName"></param>
            <param name="defaultValue"></param>
            <returns>string value</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Report.GetConfigParameter(System.String,System.Int16,System.String,System.Int16)">
            <summary>
            Gets configuration parameter
            </summary>
            <param name="moduleName"></param>
            <param name="groupID"></param>
            <param name="paramName"></param>
            <param name="defaultValue"></param>
            <returns>short value</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.MakeModel">
            <summary>
            Summary description for MakeModel.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.MakeModel.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.MakeModel.AddMakeModel(System.Int32,System.Int32)">
            <summary>
            Adds new row that connected make and model
            </summary>
            <param name="makeId"></param>
            <param name="modelId"></param>
            <returns>make model id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if model id and make id alredy exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MakeModel.DeleteByMakeId(System.Int32)">
            <summary>
            Deletes all model ids associated with make Id
            </summary>
            <param name="makeId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if make id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MakeModel.DeleteByMakeIdModelId(System.Int32,System.Int32)">
            <summary>
            Deletes exist model assosiated with make id.
            </summary>
            <param name="makeId"></param>
            <param name="modelId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if make id  or model id do not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MakeModel.GetModelIdsByMakeId(System.Int32)">
            <summary>
            Retrieves all model ids related to specific make.
            </summary>
            <param name="makeId"></param>
            <returns>int[]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MakeModel.GetModelNamesByMakeId(System.Int32)">
            <summary>
            Retrieves all model names related to specific make.
            </summary>
            <param name="makeId"></param>
            <returns>ArrayList [string]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MakeModel.GetModelsInfoByMakeId(System.Int32)">
            <summary>
            Retrieves all models information related to specific make.
            </summary>
            <param name="makeId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.MakeModel.RecordCount">
            <summary>
            Retrieves record count from vlfMakeModel table.
            </summary>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.BoxSensorsCfg">
            <summary>
            Provides interfaces to vlfBoxSensorsCfg table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.AddSensor(System.Int32,System.Int16,System.Int16,System.String,System.String,System.Int16,System.Int16)">
            <summary>
            Add new sensor.
            </summary>
            <param name="boxId"></param>
            <param name="boxHwTypeId"></param>
            <param name="sensorId"></param>
            <param name="sensorName"></param>
            <param name="sensorAction"></param>
            <param name="alarmLevelOn"></param>
            <param name="alarmLevelOff"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppException">Maximal number of supported sensors has been reached.</exception>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if sensor name or id alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.AddSensors(System.Int32,System.Int16,System.Data.DataSet)">
            <summary>
            Add new sensors.
            </summary>
            <param name="boxId"></param>
            <param name="boxHwTypeId"></param>
            <param name="dsSensorsCfg"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if sensor id and name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.UpdateSensor(System.Int32,System.Int16,System.String,System.String,System.Int16,System.Int16)">
            <summary>
            Update sensor information.
            </summary>
            <param name="boxId"></param>
            <param name="sensorId"></param>
            <param name="sensorName"></param>
            <param name="sensorAction"></param>
            <param name="alarmLevelOn"></param>
            <param name="alarmLevelOff"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if box does not have info for current sensor.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.DeleteSensorsByBoxId(System.Int32)">
            <summary>
            Delete all sensors related to the box.
            </summary>
            <returns>void</returns>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if box id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.GetSensorsInfoByBoxId(System.Int32)">
            <summary>
            Retrieves sensor info by box id
            </summary>
            <param name="boxId"></param> 
            <returns>DataSet [SensorId][SensorName][SensorAction][AlarmLevelOn][AlarmLevelOff]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.GetSensorsInfoStructByBoxId(System.Int32)">
            <summary>
            Retrieves sensor info structure by box id
            </summary>
            <param name="boxId"></param> 
            <returns>string[,] of [SensorId][SensorName][SensorAction][AlarmLevelOn][AlarmLevelOff]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.GetNumberOfSensorsByBoxId(System.Int32)">
            <summary>
            Retrieves number of sensors by box id
            </summary>
            <param name="boxId"></param> 
            <returns>int </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.GetSensorsNamesByBoxId(System.Int32)">
            <summary>
            Retrieves sensors names by box id.
            </summary>
            <param name="boxId"></param> 
            <returns>ArrayList</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.GetSensorsIdsArrayByBoxId(System.Int32)">
            <summary>
            Retrieves sensors ids by box id
            </summary>
            <param name="boxId"></param> 
            <returns>DataSet</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.GetMaxSupportedSensorsByHwType(System.Int16)">
            <summary>
            Retrieves max number of supported sensors for specific Hw type.
            Note: if box does not exist return 0
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.GetCurrentSupportedSensorsByBoxId(System.Int32)">
            <summary>
            Retrieves current number of supported sensors for specific box id.
            Note: if box does not exist return VLF.CLS.Def.Const.unassignedIntValue
            </summary>
            <param name="boxId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxSensorsCfg.GetFieldByBoxId(System.String,System.Int32)">
            <summary>
            Retrieves field by box id
            </summary>
            <param name="fieldName"></param> 
            <param name="boxId"></param> 
            <returns>DataSet</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.AverageFleetReport">
            <summary>
                 Generates sensors reporting functionality
            </summary>
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:VLF.DAS.DB.AverageFleetReport.connectionString" -->
        <member name="M:VLF.DAS.DB.AverageFleetReport.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.AverageFleetReport.Exec_GetActivityReportForFleet(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
                       run sp_GetActivityReportForFleet which takes into consideration the user preferences
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.AverageFleetReport.Exec_GetActiveVehiclesPerDay(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
                       run sp_GetActiveVehiclesPerDay which takes into consideration the user preferences
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.AverageFleetReport.Exec_GetIdlingDurationForFleet(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
                 run sp_GetIdlingDurationForFleet2 which takes into consideration the user preferences 
            </summary>
            <param name="fleetName"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.AverageFleetReport.AddIdlingRow(System.Int32,System.DateTime,System.DateTime,System.Int32)">
            \fn     private void AddIdlingRow(int boxId, DateTime firstDateTime, DateTime lastDateTime, int duration)
            \brief  add a row in tblIdlingDuration table
        </member>
        <member name="M:VLF.DAS.DB.AverageFleetReport.FillIdlingDuration(System.DateTime,System.DateTime,System.Data.DataSet)">
            <summary>
                 rowData has the following fields
                          [vlfMsgInHst.BoxId], [vlfMsgInHst.OriginDateTime], 
                          [vlfMsgInHst.BoxMsgInTypeId],	[vlfMsgInHst.CustomProp] 
            </summary>
            <param name="firstDateTime_"></param>
            <param name="lastDateTime_"></param>
            <param name="rowData"> this is the data obtained after you run 
              exec       sp_GetIdlingDurationForFleet @fleetName, @fromDate, @toDate
            </param>
        </member>
        <member name="M:VLF.DAS.DB.AverageFleetReport.AddSensorRow(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32)">
            \comment  add one/multiple rows to the report 
            1) the ON..OFF case in the same day
              if firstDateTime.DayOfYear EQ lastDateTime then add one row  
            2) the ON..OFF in different days
              if firstDateTime.DayOfYear LT lastDateTime.DayOfYear
                  add multiple rows 
        </member>
        <member name="M:VLF.DAS.DB.AverageFleetReport.CrossSensorRow(System.Int32,System.Int32,System.DateTime,System.DateTime,System.DateTime,System.Int32)">
            \comment this fucntion is called when you have ON sensor in one day [lastDateTime]
                      and OFF in another day [newDateTime]
                  Steps:
                      close the firstDateTime row
                      fill all days but newDateTime with 100% utilization 
                      
            close the last row for a boxId ONLY when the row has the STATUS ON for sensorId
                      the value added to the report is computed with a specific date in mind 
                      here you have to fill also the [WorkingHours] and [MinutesInUse] field
        </member>
        <member name="M:VLF.DAS.DB.AverageFleetReport.FillFleetUtilization(System.Int32,System.DateTime,System.DateTime,System.Data.DataSet)">
            \fn     public void FillFleetUtilization(int paramSensor, DateTime firstDateTime_, DateTime lastDateTime_, DataSet rowData)
            
             \brief  this function receives all messages between specific hours and calculates the utilization of the time
                     based on the messages receives
                     A normal protocol is like this:
                        - the device is powered on    - MSG power on
                        - the sensor X is powered on  - SENSOR status ON
                        - the sensor X is powered off - the interval between SENSOR ON/OFF is added to a suplimentary column named UtilSensor
                        - the device is powered off   - MSG power off and the interval between POWER ON/OFF is added to a suplimentary column named UtilPower
                     Special cases:
                        - the table is starting with MSG power off - the interval is computed from 0 A.M
                        - the power off is received without SENSOR status off - it's possible ????
                        - the difference between ON/OFF is longer than 24 hours - suplimentary rows are added with utilization 100%
                     This function is producing a table like 
                     BoxId --- DateTime(Off) --- SensorId --- MinutesInUse  
                     This table contains for every box a graphic for every day when the sensors was between ON..OFF
                     For daily reports you have to aggregate those rows in one with ALL sensors like
                     BoxId --- SensorId --- Date --- MinutesInUse
                     The general report will have for a given period
                     BoxId --- Period --- SensorId --- MinutesInUse
             \comment rowData is the table returned after you called 
                      sp_GetSensorsPerFleet @fleetName, @sensorId, @dateFrom, @dateTo
                        having rows 
                     [vlfMsgInHst.BoxId], [vlfMsgInHst.OriginDateTime], [vlfMsgInHst.BoxMsgInTypeId], 	
                     [vlfMsgInHst.CustomProp]
        </member>
        <member name="P:VLF.DAS.DB.AverageFleetReport.result">
            <summary>
                 returns the tblDailyActivity and  tblIdlingDuration in a dataset
            </summary>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.DB.User">
            <summary>
            Provides interfaces to vlfUser table.
            </summary>
            <remarks>
            See VLF.CLS.Def.Structures.UserInfo for vlfUser table strusture
            </remarks>
        </member>
        <member name="M:VLF.DAS.DB.User.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.User.AddUser(System.String,VLF.CLS.Def.Structures.UserInfo)">
            <summary>
            Add new user.
            </summary>
            <param name="userName"></param>
            <param name="userInfo"></param>
            <returns>int next user id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.UpdateInfo(VLF.CLS.Def.Structures.UserInfo,System.Int32)">
            <summary>
            Updates user information.
            </summary>
            <param name="userInfo"></param>
            <param name="userId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.UpdateInfo(System.Int32,System.String,System.DateTime)">
            <summary>
            Updates user information.
            </summary>
            <param name="userId"></param>
            <param name="userName"></param>
            <param name="expiredDate"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.UpdateInfo(VLF.CLS.Def.Structures.UserInfo,System.String)">
            <summary>
            Updates user information.
            </summary>
            <param name="userInfo"></param>
            <param name="userName"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.DeleteUserByDriverLicense(System.String)">
            <summary>
            Deletes existing user.
            </summary>
            <returns>rows affected</returns>
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user with driver license does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.DeleteUserByUserName(System.String)">
            <summary>
            Deletes existing user.
            </summary>
            <returns>rows affected</returns>
            <param name="userName"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user with user name not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.DeleteUserByUserId(System.Int32)">
            <summary>
            Deletes existing user.
            </summary>
            <returns>rows affected</returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user with user id not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetContactInfoByUserId(System.Int32)">
            <summary>
            Retrieves user contact info
            </summary>
            <returns>
            DataSet 
            [Birthday],[PIN],[Address],[City],[StateProvince],[Country],[PhoneNo1],[PhoneNo2],[CellNo]
            </returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserInfoByUserId(System.Int32)">
            <summary>
            Retrieves user info
            </summary>
            <returns>
            DataSet 
            [UserId],[UserName],[Password],[DriverLicense],[FirstName],[LastName],
            [OrganizationId],[Birthday],[PIN],[Address],[City],[StateProvince],
            [Country],[PhoneNo1],[PhoneNo2],[CellNo],[Description],[OrganizationName],[ExpiredDate]
            </returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetPersonId(System.Int32)">
            <summary>
            Gets person id for the user
            </summary>
            <param name="userId" type="int"></param>
            <returns>string Person ID</returns>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserExpirationDate(System.Int32)">
            <summary>
            Retrieves user expiration datetime 
            </summary>
            <returns></returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserInfoByUserName(System.String)">
            <summary>
            Retrieves user info
            </summary>
            <returns>
            DataSet 
            [UserId],[UserName],[Password],[PersonId],[DriverLicense],[FirstName],[LastName],
            [OrganizationId],[Birthday],[PIN],[Address],[City],[StateProvince],
            [Country],[PhoneNo1],[PhoneNo2],[CellNo],[Description],[OrganizationName],[ExpiredDate]
            </returns>
            <param name="userName"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserInfoByDriverLicense(System.String)">
            <summary>
            Retrieves user info
            </summary>
            <returns>
            DataSet 
            [UserId],[UserName],[Password],[DriverLicense],[FirstName],[LastName],
            [OrganizationId],[Birthday],[PIN],[Address],[City],[StateProvince],
            [Country],[PhoneNo1],[PhoneNo2],[CellNo],[Description]
            </returns>
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetOrganizationUsers(System.Int32)">
            <summary>
            Returns user Id by organization id 
            </summary>
            <param name="userId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetOrganizationIdByUserId(System.Int32)">
            <summary>
            Returns organization id by user Id. 	
            </summary>
            <param name="userId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserNameByUserId(System.Int32)">
            <summary>
            Returns user name by user Id. 	
            </summary>
            <param name="userId"></param> 
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserNameByDriverLicense(System.String)">
            <summary>
            Returns user name by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetOrganizationIdByDriverLicense(System.String)">
            <summary>
            Returns organization id by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetPasswordByDriverLicense(System.String)">
            <summary>
            Returns password by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <remarks> "" in case of invalid data, otherwise password </remarks>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserIdByUserName(System.String)">
            <summary>
            Returns user id by user name. 	
            </summary>
            <param name="userName"></param> 
            <remarks> -1 in case of invalid data, otherwise userId </remarks>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserIdByDriverLicense(System.String)">
            <summary>
            Returns user id by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>int</returns>
            <remarks> -1 in case of invalid data, otherwise userId </remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetDriverLicenseByUserName(System.String)">
            <summary>
            Returns driver license by user name. 	
            </summary>
            <param name="userName"></param> 
            <returns>string</returns>
            <remarks> "" in case of invalid data, otherwise driver license </remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetDriverLicenseByUserId(System.Int32)">
            <summary>
            Returns driver license by user id. 	
            </summary>
            <param name="userId"></param> 
            <returns>stru=ing</returns>
            <remarks> "" in case of invalid data, otherwise driver license </remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserBoxes(System.Int32)">
            <summary>
            Retrieves users boxes by user id. 	
            </summary>
            <param name="userId"></param> 
            <returns>ArrayList [int]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.SetPasswordByUserId(System.String,System.Int32)">
            <summary>
            Updates password by user id
            </summary>
            <param name="userId"></param> 
            <param name="password"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if unabled to update information.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.SetOrganizationIdByUserId(System.Int32,System.Int32)">
            <summary>
            Updates organization id by user id
            </summary>
            <param name="userId"></param> 
            <param name="organizationId"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.SetUserNameByUserId(System.String,System.Int32)">
            <summary>
            Updates user name by user id
            </summary>
            <param name="userId"></param> 
            <param name="userName"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.SetOrganizationIdByUserName(System.Int32,System.String)">
            <summary>
            Updates organization id by user name
            </summary>
            <param name="userName"></param> 
            <param name="organizationId"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.SetPasswordByUserName(System.String,System.String)">
            <summary>
            Updates password by user name
            </summary>
            <param name="userName"></param> 
            <param name="password"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserInfoFieldBy(System.String,System.String,System.Int32)">
            <summary>
            Retrieves user info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="resultFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserInfoFieldBy(System.String,System.String,System.Int32,System.Data.DataSet@)">
            <summary>
            Retrieves user info
            </summary>
            <param name="searchFieldName"></param>
            <param name="resultFieldName"></param>
            <param name="searchFieldValue"></param>
            <param name="dsResult" type="DataSet"></param>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserInfoFieldBy(System.String,System.String,System.String)">
            <summary>
            Retrieves user info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="resultFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.GetUserInfoFieldByDriverLicense(System.String,System.String)">
            <summary>
            Retrieves user info
            </summary>
            <param name="resultFieldName"></param>
            <param name="driverLicense"></param>
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUser(System.String,System.String)">
            <summary>
            Validate user. 	
            </summary>
            <param name="userName"></param> 
            <param name="password"></param> 
            <remarks> -1 in case of invalid data, otherwise userId </remarks>
            <returns>user id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserAlarm(System.Int32,System.Int32)">
            <summary>
            Validate user alarm. 	
            </summary>
            <param name="userId"></param>
            <param name="alarmId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserFleet(System.Int32,System.Int32)">
            <summary>
            Validate user fleet. 	
            </summary>
            <param name="userId"></param>
            <param name="fleetId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserOrganization(System.Int32,System.Int32)">
            <summary>
            Validate user organization. 	
            </summary>
            <param name="userId"></param>
            <param name="organizationId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserDriver(System.Int32,System.Int32)">
            <summary>
            Validate user driver
            </summary>
            <param name="userId"></param>
            <param name="driverId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserVehicle(System.Int32,System.Int64)">
            <summary>
            Validate user vehicle. 	
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserLicensePlate(System.Int32,System.String)">
            <summary>
            Validate user license plate. 	
            </summary>
            <param name="userId"></param>
            <param name="licensePlate"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserBox(System.Int32,System.Int32)">
            <summary>
            Validate user box Id. 	
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserMsg(System.Int32,System.Int32)">
            <summary>
            Validate user msg. 	
            </summary>
            <param name="userId"></param>
            <param name="msgId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserOrganizationName(System.Int32,System.String)">
            <summary>
            Validate user organization name. 	
            </summary>
            <param name="userId"></param>
            <param name="organizationName"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateHGISuperUser(System.Int32)">
            <summary>
            Validate HGI super user. 	
            </summary>
            <param name="userId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateSuperUser(System.Int32)">
            <summary>
            Validate super user. 	
            </summary>
            <param name="userId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserGroupSecurity(System.Int32,System.Int32)">
            <summary>
            Validate user group security. 	
            </summary>
            <param name="userId"></param>
            <param name="userGroupId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserPreference(System.Int32,System.Int32)">
            <summary>
            Validate user preference. 	
            </summary>
            <param name="userId"></param>
            <param name="preferenceId"></param>
            <returns>true if valid, otherwise returns false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.User.ValidateUserCall(System.Int32,System.String,System.String)">
            <summary>
            Validate user call. 	
            </summary>
            <param name="userId"></param>
            <param name="methodName"></param>
            <exception cref="T:VLF.ERR.DASAuthorizationException">Thrown if te user is unauthorized to use this method.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.FleetEmails">
            <summary>
            Provides interfaces to vlfFleetEmails table
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.FleetEmails.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.FleetEmails.AddEmail(System.Int32,System.String,System.Int16,System.Int16,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add email to fleet.
            </summary>
            <param name="fleetId"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="formatType"></param>
            <param name="notify"></param>
            <param name="warning"></param>
            <param name="critical"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if email alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetEmails.UpdateEmail(System.Int32,System.String,System.String,System.Int16,System.Int16,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update organization email.
            </summary>
            <returns>void</returns>
            <param name="fleetId"></param>
            <param name="oldEmail"></param>
            <param name="newEmail"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="formatType"></param>
            <param name="notify"></param>
            <param name="warning"></param>
            <param name="critical"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if organization does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetEmails.SetDayLightSaving(System.Boolean)">
            <summary>
            Set DayLight Savings.
            </summary>
            <returns>void</returns>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetEmails.SetAutoAdjustDayLightSaving(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set AutoAdjustDayLightSaving.
            </summary>
            <returns>void</returns>
            <param name="fleetId"></param>
            <param name="email"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetEmails.DeleteEmailFromFleet(System.Int32,System.String)">
            <summary>
            Delete existing email from fleet.
            </summary>
            <returns>rows affected</returns>
            <param name="fleetId"></param> 
            <param name="email"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if fleetId does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetEmails.DeleteAllEmailsFromFleet(System.Int32)">
            <summary>
            Delete all emails from fleet.
            </summary>
            <returns>rows affected</returns>
            <param name="fleetId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if fleet id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetEmails.GetFleetEmails(System.Int32)">
            <summary>
            Retrieves fleet emails
            </summary>
            <returns>DataSet [FleetId],[FleetMame],[Email],[TimeZone],
            [DayLightSaving],[FormatType],[Notify],[Warning],[Critical],[AutoAdjustDayLightSaving]</returns>
            <param name="fleetId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.BoxMsgSeverity">
            <summary>
            Provides interfaces to vlfBoxMsgSeverity table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgSeverity.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgSeverity.GetAlarmInfo(System.Int32,VLF.CLS.Def.Enums.MessageType)">
            <summary>
            Retrieves alarm info for specific message type
            </summary>
            <param name="boxId"></param> 
            <param name="boxMsgInTypeId"></param> 
            <returns>DataSet [AlarmLevel],[AlarmLevelName],[CreateAlarm]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgSeverity.AddMsgSeverity(System.Int32,VLF.CLS.Def.Enums.MessageType,VLF.CLS.Def.Enums.AlarmSeverity)">
            <summary>
            Add new message severity to the box.
            </summary>
            <param name="boxId"></param>
            <param name="boxMsgInTypeId"></param>
            <param name="alarmLevel"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if message severity already exist for this box.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgSeverity.UpdateMsgSeverity(System.Int32,VLF.CLS.Def.Enums.MessageType,VLF.CLS.Def.Enums.AlarmSeverity)">
            <summary>
            Update box message severity
            </summary>
            <param name="boxId"></param>
            <param name="boxMsgInTypeId"></param>
            <param name="alarmLevel"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if data doesn't exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgSeverity.IsAlarm(VLF.CLS.Def.Enums.AlarmSeverity)">
            <summary>
            Check if we should create alarm for current severity
            </summary>
            <param name="alarmSeverity"></param> 
            <returns>true in case of alarm, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgSeverity.DeleteRecordByBoxId(System.Int32)">
            <summary>
            Delete exist box messages
            </summary>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgSeverity.GetAllSupportedMessagesByBoxId(System.Int32)">
            <summary>
            Retrieves all supported messages by box
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [BoxMsgInTypeId],[BoxMsgInTypeName],[AlarmLevel]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.BoxHwDefaultOutputsCfg">
            <summary>
            Provides interfaces to vlfBoxHwDefaultOutputsCfg table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultOutputsCfg.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultOutputsCfg.AddOutput(System.Int16,System.Int16,System.String,System.String)">
            <summary>
            Add new outputs.
            </summary>
            <returns>void</returns>
            <param name="boxHwTypeId"></param>
            <param name="outputId"></param>
            <param name="outputName"></param>
            <param name="outputAction"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if output name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultOutputsCfg.DeleteOutputsByHwTypeId(System.Int16)">
            <summary>
            Delete all outputs related to box hardware type.
            </summary>
            <returns>void</returns>
            <param name="boxHwTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultOutputsCfg.GetOutputsInfoByHwTypeId(System.Int16)">
            <summary>
            retrieves output info by hardware type id
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>DataSet [OutputId][OutputName][OutputAction]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultOutputsCfg.GetMaxSupportedOutputsByHwType(System.Int16)">
            <summary>
            Retrieves max number of supported outputs for specific Hw type.
            Note: if box does not exist return 0
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultOutputsCfg.GetCurrentSupportedOutputsByHwType(System.Int16)">
            <summary>
            Retrieves current number of supported outputs for specific HW type.
            Note: if box does not exist return 0
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultOutputsCfg.GetAllOutputs">
            <summary>
            Get all outputs from DB
            </summary>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.DB.VehicleGeozone">
            <summary>
            Provides interfaces to vlfVehicleGeozone table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.AddGeozone(System.Int64,System.Int16,System.Int16)">
            <summary>
            Add new geozone to the vehicle.
            </summary>
            <param name="vehicleId"></param>
            <param name="geozoneId"></param>
            <param name="severityId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if geozone for specific organization already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.SetGeozoneSeverity(System.Int32,System.Int64,System.Int16,System.Int16)">
            <summary>
            Sets geozone severity to the vehicle.
            </summary>
            <param name="organizationId"></param>
            <param name="vehicleId"></param>
            <param name="geozoneId"></param>
            <param name="severityId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.DeleteAllGeozones(System.Int64)">
            <summary>
            Deletes all geozones related to specific vehicle.
            </summary>
            <returns>rows affected</returns>
            <param name="vehicleId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if vehicle does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.DeleteGeozoneFromVehicle(System.Int64,System.Int16)">
            <summary>
            Deletes geozone from vehicle.
            </summary>
            <param name="vehicleId"></param>
            <param name="geozoneId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.GetMaxGeozonesByVehicleId(System.Int64)">
            <summary>
            Retrieves vehicle max geozones
            </summary>
            <returns>int</returns>
            <param name="vehicleId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.GetAllAssignedToVehicleGeozonesInfo(System.Int64)">
            <summary>
            Retrieves all assigned to vehicle geozones info
            </summary>
            <returns>
            DataSet [VehicleId],[GeozoneNo],[SeverityId],[OrganizationId],[GeozoneId],
            [GeozoneName],[Type],[GeozoneType],[SeverityId],[Description],[BoxId]
            </returns>
            <param name="vehicleId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.GetAllUnassignedToVehicleGeozonesInfo(System.Int64)">
            <summary>
            Retrieves all unassigned to vehicle geozones info
            </summary>
            <returns>
            DataSet [GeozoneNo],[OrganizationId],[GeozoneId],[GeozoneName],[Type],
            [GeozoneType][SeverityId],[Description]
            </returns>
            <param name="vehicleId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.GetGeozoneInformation(System.Int64,System.Int16)">
            <summary>
            Retrieves vehicle geozones information
            </summary>
            <returns>
            DataSet [VehicleId],[GeozoneNo],[SeverityId],[OrganizationId],[GeozoneId],
            [GeozoneName],[Latitude],[Longitude],[Width],[Height],[Type],[SeverityId],
            [Description]
            </returns>
            <param name="vehicleId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.GetAllAssignedVehiclesInfoToGeozone(System.Int32,System.Int16)">
            <summary>
            Retrieves all assigned vehicles info to geozone
            </summary>
            <returns>
            DataSet [VehicleId],[Description]
            </returns>
            <param name="organizationId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.GetAllUnasignedVehiclesInfoToGeozone(System.Int32,System.Int16)">
            <summary>
            Retrieves all unassigned vehicles info to geozone
            </summary>
            <returns>
            DataSet [VehicleId],[Description]
            </returns>
            <param name="organizationId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.GetGeozoneNo(System.Int64,System.Int16)">
            <summary>
            Retrieves organization geozone index
            </summary>
            <param name="vehicleId"></param>
            <param name="geozoneId"></param>
            <returns>geozone index</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.GetGeozoneInfo(System.Int32,System.Int16)">
            <summary>
            Retrieves geozone info by organization id and geozone Id 
            </summary>
            <returns>
            DataSet [GeozoneNo],[OrganizationId],[GeozoneId],[GeozoneName],[Type],
            [GeozoneType],[SeverityId],[Description]
            [Email],[TimeZone],[DayLightSaving],[FormatType],[Notify],[Warning],[Critical]</returns>
            <param name="boxId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleGeozone.GetGeoZoneDescription(System.String,System.Data.DataTable)">
            <summary>
            Returns formated GeoZone Description
            </summary>
            <param name="customProp"></param>
            <param name="tblGeoZones"></param>
            <returns>description</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.StateProvince">
            <summary>
            Provides interfaces to vlfStateProvince table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.StateProvince.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.StateProvince.AddStateProvince(System.String)">
            <summary>
            Add new State/Province.
            </summary>
            <param name="stateProvinceName"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.StateProvince.DeleteStateProvince(System.String)">
            <summary>
            Deletes exist State/Province.
            </summary>
            <returns>rows affected</returns>
            <param name="stateProvinceName"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.StateProvince.RecordCount">
            <summary>
            Retrieves record count of "vlfStateProvince" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.ReportScheduler">
            <summary>
            Manages report schedules
            
            \brief Add, delete and get records from the table vlfReportSchedules
            </summary>
        </member>
        <member name="F:VLF.DAS.DB.ReportScheduler.sqlExec">
            <summary>
            Class for DB Access
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.ReportScheduler.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.DB.ReportScheduler.AddReportSchedule(System.DateTime,System.DateTime,System.Boolean,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.DateTime,System.Int16,System.Int16,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Add new schedule record
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="isfleet"></param>
            <param name="fleetid"></param>
            <param name="parameters"></param>
            <param name="email"></param>
            <param name="userid"></param>
            <param name="guiid"></param>
            <param name="status"></param>
            <param name="statusdate"></param>
            <param name="frequency"></param>
            <param name="freqparam"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
            <param name="deliveryMethod">Email or file download</param>
        </member>
        <member name="M:VLF.DAS.DB.ReportScheduler.AddReportSchedule(System.DateTime,System.DateTime,System.Boolean,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.DateTime,System.Int16,System.Int16,System.DateTime,System.DateTime,System.Int16,System.String)">
            <summary>
            Add new schedule record
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="isfleet"></param>
            <param name="fleetid"></param>
            <param name="parameters"></param>
            <param name="email"></param>
            <param name="userid"></param>
            <param name="guiid"></param>
            <param name="status"></param>
            <param name="statusdate"></param>
            <param name="frequency"></param>
            <param name="freqparam"></param>
            <param name="startdate"></param>
            <param name="enddate"></param>
            <param name="deliveryMethod">Email or file download</param>
            <param name="lan">Report language</param>
        </member>
        <member name="M:VLF.DAS.DB.ReportScheduler.DeleteReportSchedule(System.Int32,System.Int32)">
            <summary>
            Delete a record
            </summary>
            <param name="reportid"></param>
            <param name="userid"></param>
        </member>
        <member name="M:VLF.DAS.DB.ReportScheduler.GetActiveReportSchedules">
            <summary>
            Get all active report schedules
            </summary>
            <param name="userid"></param>
        </member>
        <member name="M:VLF.DAS.DB.ReportScheduler.GetScheduledReportsByUserID(System.Int32)">
            <summary>
            Get scheduled reports by user id
            </summary>
            <param name="userid"></param>
        </member>
        <member name="M:VLF.DAS.DB.ReportScheduler.DeleteScheduledReportByReportID(System.Int32)">
            <summary>
            Delete a scheduled report by report id
            </summary>
            <param name="reportid"></param>
        </member>
        <member name="M:VLF.DAS.DB.ReportScheduler.GetReportFilesByUserId(System.Int32)">
            <summary>
            Get report files for download
            </summary>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.ReportScheduler.DeleteReportFile(System.Int32)">
            <summary>
            Delete a record from report files table
            </summary>
            <param name="rowid">Row Id</param>
        </member>
        <member name="T:VLF.DAS.DB.MapEngine">
            <summary>
            Provides interfaces to Map related tables.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.GetBoxGeoCodeEngineInfo(System.Int32)">
            <summary>
            Retrieves box geocode engine id.
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [GeoCodeId],[Path]</returns>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.GetBoxMapEngineInfo(System.Int32)">
            <summary>
            Retrieves box geocode engine id.
            </summary>
            <param name="boxId"></param>
            <returns>DataSet [MapId],[Path],[ExternalPath]</returns>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.GetBoxGeoCodeGroupId(System.Int32)">
            <summary>
            Retrieves box GeoCode group Id
            </summary>
            <param name="boxId"></param>
            <returns>GeoCode group Id if exist, otherwise VLF.CLS.Def.Const.unassignedIntValue</returns>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.GetOrganizationGeoCodeGroupId(System.Int32)">
            <summary>
            Retrieves Organization GeoCode group Id
            </summary>
            <param name="boxId"></param>
            <returns>GeoCode group Id if exist, otherwise VLF.CLS.Def.Const.unassignedIntValue</returns>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.GetUserGeoCodeEngineInfo(System.Int32)">
            <summary>
            Retrieves user geocode path
            </summary>
            <param name="userId"></param>
            <returns>Dataset [GeoCodeId],[Path]</returns>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.GetUserGeoCodeGroupId(System.Int32)">
            <summary>
            Retrieves user GeoCode group Id
            </summary>
            <param name="userId"></param>
            <returns>GeoCode group Id if exist, otherwise VLF.CLS.Def.Const.unassignedIntValue</returns>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.GetUserMapEngineInfo(System.Int32)">
            <summary>
            Retrieves user geocode path
            </summary>
            <param name="userId"></param>
            <returns>Dataset [MapId],[Path],[ExternalPath]</returns>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.DeleteBoxMapUsage(System.Int32,System.String)">
            <summary>
            Delete Box Map Usage.
            </summary>
            <param name="boxId"></param> 
            <param name="where"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.DeleteUserMapUsage(System.Int32)">
            <summary>
            Delete User Map Usage.
            </summary>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.AddMapUserUsage(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Add map/user usage
            </summary>
            <param name="userId"></param>
            <param name="mapTypeId"></param>
            <param name="usageYear"></param>
            <param name="usageMonth"></param>
            <param name="mapId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.AddMapBoxUsage(System.Int32,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Add map/box usage
            </summary>
            <param name="boxId"></param>
            <param name="mapTypeId"></param>
            <param name="usageYear"></param>
            <param name="usageMonth"></param>
            <param name="mapId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.GetOrganizationMapUsageInfo(System.Int32,System.Int32,System.Int16,System.Int16)">
            <summary>
            Retrieves organization map usage info.
            </summary>
            <param name="organizationId"></param>
            <param name="mapId"></param>
            <param name="usageYear"></param>
            <param name="usageMonth"></param>
            <returns>DataSet [UserType],[UserName_BoxId],[Map],[StreetAddress],[Totals]</returns>
        </member>
        <member name="M:VLF.DAS.DB.MapEngine.GetMapTypes">
            <summary>
            Retrieves map types.
            </summary>
            <returns>DataSet [MapTypeId],[MapTypeName]</returns>
        </member>
        <member name="T:VLF.DAS.DB.Landmark">
            <summary>
            Provides interfaces to vlfLandmark table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.AddLandmark(System.Int32,System.String,System.Double,System.Double,System.String,System.String,System.String,System.Int32,System.String,System.Int16,System.Boolean,System.Boolean,System.String)">
            <summary>
            Add new landmark.
            </summary>
            <param name="organizationId"></param>
            <param name="landmarkName"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="description"></param>
            <param name="contactPersonName"></param>
            <param name="contactPhoneNum"></param>
            <param name="radius"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if landmark for specific organization already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.AddLandmark(System.Int32,System.String,System.Double,System.Double,System.String,System.String,System.String,System.Int32,System.String,System.Int16,System.Boolean,System.Boolean,System.String,System.Boolean@)">
            <summary>
            Add new landmark.
            </summary>
            <param name="organizationId"></param>
            <param name="landmarkName"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="description"></param>
            <param name="contactPersonName"></param>
            <param name="contactPhoneNum"></param>
            <param name="radius"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="streetAddress"></param>
            <param name="result">True if successful</param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if landmark for specific organization already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.DeleteAllLandMarksByOrganizationId(System.Int32)">
            <summary>
            Deletes all landmarks related to specific organization.
            </summary>
            <returns>rows affected</returns>
            <param name="organizationId"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.DeleteLandmarkFromOrganization(System.Int32,System.String)">
            <summary>
            Deletes landmark from organization.
            </summary>
            <param name="organizationId"></param>
            <param name="landmarkName"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.UpdateLandmark(System.Int32,System.String,System.String,System.Double,System.Double,System.String,System.String,System.String,System.Int32,System.String,System.Int16,System.Boolean,System.Boolean,System.String)">
            <summary>
            Update landmark info.
            </summary>
            <param name="organizationId"></param>
            <param name="currLandmarkName"></param>
            <param name="newLandmarkName"></param>
            <param name="newLatitude"></param>
            <param name="newLongitude"></param>
            <param name="newDescription"></param>
            <param name="newContactPersonName"></param>
            <param name="newContactPhoneNum"></param>
            <param name="radius"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="streetAddress"></param>
            <remarks>
            In case of updating landmark info except landmark name, set newLandmarkName to VLF.CLS.Def.Const.unassignedStrValue
            </remarks>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.GetLandMarksInfoByOrganizationId(System.Int32)">
            <summary>
            Retrieves landmarks info by organization id 
            </summary>
            <returns>
            DataSet [OrganizationId],[LandmarkName],[Latitude],[Longitude],
            [Description],[ContactPersonName],[ContactPhoneNum],[Radius],
            [Email],[TimeZone],[DayLightSaving],[AutoAdjustDayLightSaving],
            [StreetAddress]
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.GetLandMarksInfoByBoxId(System.Int32)">
            <summary>
            Retrieves landmarks info by box id 
            </summary>
            <returns>
            DataSet [OrganizationId],[LandmarkName],[Latitude],[Longitude],
            [Description],[ContactPersonName],[ContactPhoneNum],[Radius],
            [Email],[TimeZone],[DayLightSaving],[AutoAdjustDayLightSaving],
            [StreetAddress]
            </returns>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.GetLandMarksInfoByOrganizationName(System.String)">
            <summary>
            Retrieves landmarks info by organization name 
            </summary>
            <returns>
            DataSet [OrganizationId],[LandmarkName],[Latitude],[Longitude],
            [Description],[ContactPersonName],[ContactPhoneNum],[Radius],[StreetAddress]
            </returns>
            <param name="organizationName"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.GetAllLandMarksInfo">
            <summary>
            Retrieves all landmarks info
            </summary>
            <returns>
            DataSet [OrganizationId],[LandmarkName],[Latitude],[Longitude]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.UpdateLandmarkStreetAddress(System.Int32,System.String,System.String)">
            <summary>
            Update landmark info.
            </summary>
            <param name="organizationId"></param>
            <param name="landmarkName"></param>
            <param name="streetAddress"></param>
            <remarks>
            In case of updating landmark info except landmark name, set newLandmarkName to VLF.CLS.Def.Const.unassignedStrValue
            </remarks>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.GetLandmarkName(System.Int32,System.Double,System.Double)">
            <summary>
            Retrieves landmark name by location
            </summary>
            <param name="organizationId"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <remarks>
            If landmark does not exist, returns VLF.CLS.Def.Const.unassignedStrValue
            </remarks>
            <returns>
            string [landmark name]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Landmark.GetLandmarkLocation(System.Int32,System.String,System.Double@,System.Double@)">
            <summary>
            Retrieves landmark location by landmark name 
            </summary>
            <param name="organizationId"></param>
            <param name="landmarkName"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <remarks>
            If landmark does not exist, returns latitude=0,longitude=0
            </remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.DriverAssignmentHst">
            <summary>
            Provides interfaces to vlfDriverAssignment table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.AddDriverAssignment(System.String,System.String,System.String)">
            <summary>
            Add driver assignment to the history.
            </summary>
            <param name="personId"></param>
            <param name="licensePlate"></param>
            <param name="description"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.UpdateDriverAssignment(System.String,System.String)">
            <summary>
            Set driver assignment "DeletedDateTime" field
            </summary>
            <param name="personId"></param>
            <param name="licensePlate"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.UpdateDriverAssignments(System.String)">
            <summary>
            Set driver assignments "DeletedDateTime" field
            </summary>
            <param name="personId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.GetAllDriversAssignmentsBy(System.String,System.String)">
            <summary>
            Get driver assignment
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns>DataSet [AssignedDateTime],[DeletedDateTime],[PersonId],[LicensePlate],[DriverLicense],[FirstName],[LastName],[Description]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.DeleteDriverAssignments(System.String)">
            <summary>
            Delete all vehicle assignments from the history related to the person
            </summary>
            <param name="personId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.AddDriverAssignmentHistory(System.Int32,System.Int64,System.Int32,System.String,System.DateTime,System.DateTime)">
            <summary>
            Add Driver Assignment History - both assignment and unassignment
            </summary>
            <param name="driverId"></param>
            <param name="vehicleId"></param>
            <param name="userId"></param>
            <param name="description"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.GetAssignmentHistoryByDriverId(System.Int32)">
            <summary>
            Get Driver Assignment History
            </summary>
            <param name="driverId">Driver Id</param>
            <returns>[vlfDriver.FirstName, vlfDriver.LastName, vlfDriver.License, vlfDriverAssignmentHst.LicensePlate, vlfVehicleInfo.[Description], 
            vlfDriverAssignmentHst.AssignedDateTime, vlfDriverAssignmentHst.Assigned]</returns>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.GetAssignmentHistoryByDriverId(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Get Driver Assignment History
            </summary>
            <param name="driverId">Driver Id</param>
            <returns>[vlfDriver.FirstName, vlfDriver.LastName, vlfDriver.License, vlfDriverAssignmentHst.LicensePlate, vlfVehicleInfo.[Description], 
            vlfDriverAssignmentHst.AssignedDateTime, vlfDriverAssignmentHst.Assigned]</returns>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.GetAssignmentHistoryByVehicleId(System.Int64)">
            <summary>
            Get Driver Assignment History
            </summary>
            <param name="vehicleId">Vehicle Id</param>
            <returns>[vlfDriver.FirstName, vlfDriver.LastName, vlfDriver.License, vlfDriverAssignmentHst.LicensePlate, vlfVehicleInfo.[Description], 
            vlfDriverAssignmentHst.AssignedDateTime, vlfDriverAssignmentHst.Assigned]</returns>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.GetAssignmentHistoryByVehicleId(System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Get Driver Assignment History
            </summary>
            <param name="driverId">Driver Id</param>
            <returns>[vlfDriver.FirstName, vlfDriver.LastName, vlfDriver.License, vlfDriverAssignmentHst.LicensePlate, vlfVehicleInfo.[Description], 
            vlfDriverAssignmentHst.AssignedDateTime, vlfDriverAssignmentHst.Assigned]</returns>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.GetAssignmentHistoryByDriverIdVehicleId(System.Int32,System.Int64)">
            <summary>
            Get Driver Assignment History
            </summary>
            <param name="vehicleId">Vehicle Id</param>
            <returns>[vlfDriver.FirstName, vlfDriver.LastName, vlfDriver.License, vlfDriverAssignmentHst.LicensePlate, vlfVehicleInfo.[Description], 
            vlfDriverAssignmentHst.AssignedDateTime, vlfDriverAssignmentHst.Assigned]</returns>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignmentHst.GetAssignmentHistoryByDriverIdVehicleId(System.Int32,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Get Driver Assignment History
            </summary>
            <param name="vehicleId">Vehicle Id</param>
            <returns>[vlfDriver.FirstName, vlfDriver.LastName, vlfDriver.License, vlfDriverAssignmentHst.LicensePlate, vlfVehicleInfo.[Description], 
            vlfDriverAssignmentHst.AssignedDateTime, vlfDriverAssignmentHst.Assigned]</returns>
        </member>
        <member name="T:VLF.DAS.DB.Driver">
            <summary>
            Provides interfaces to vlfPersonInfo table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Driver.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Driver.AddDriver(System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Char,System.Int16,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add new driver information
            </summary>
            <param name="info"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if driver license or person alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="license"></param>
            <param name="classLicense"></param>
            <param name="licenseIssued"></param>
            <param name="licenseExpired"></param>
            <param name="orgId"></param>
            <param name="gender"></param>
            <param name="height"></param>
            <param name="homePhone"></param>
            <param name="cellPhone"></param>
            <param name="additionalPhone"></param>
            <param name="smsid"></param>
            <param name="email"></param>
            <param name="address"></param>
            <param name="city"></param>
            <param name="zipcode"></param>
            <param name="state"></param>
            <param name="country"></param>
            <param name="description"></param>
            <returns>Rows affected</returns>
        </member>
        <member name="M:VLF.DAS.DB.Driver.UpdateDriver(System.Int32,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.Char,System.Int16,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Update driver information.
            </summary>
            <param name="info"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if person does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="driverId"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="license"></param>
            <param name="classLicense"></param>
            <param name="licenseIssued"></param>
            <param name="licenseExpired"></param>
            <param name="orgId"></param>
            <param name="gender"></param>
            <param name="height"></param>
            <param name="homePhone"></param>
            <param name="cellPhone"></param>
            <param name="additionalPhone"></param>
            <param name="smsid"></param>
            <param name="email"></param>
            <param name="address"></param>
            <param name="city"></param>
            <param name="zipcode"></param>
            <param name="state"></param>
            <param name="country"></param>
            <param name="description"></param>
            <returns>Rows affected</returns>
        </member>
        <member name="M:VLF.DAS.DB.Driver.GetDriverById(System.Int32)">
            <summary>
            Retrieves driver info
            </summary>
            <returns>
            </returns>
            <param name="driverId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Driver.GetDriverByDriverLicense(System.Int32,System.String)">
            <summary>
            Retrieves driver info
            </summary>
            <returns>
            </returns>
            <param name="organizationId"></param> 
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Driver.GetAllDriversForOrganization(System.Int32)">
            <summary>
            Retrieves all drivers per organization
            </summary>
            <returns>
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Driver.DeleteDriver(System.Int32)">
            <summary>
            Delete existing driver including assignments and history
            </summary>
            <returns>rows affected</returns>
            <param name="driverId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if person with person id not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Driver.IsDriverLicenseExist(System.String)">
            <summary>
            Checks if person with the given driver license already exists.
            </summary>
            <returns>bool</returns>
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Resources.Const">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.Alarm">
            <summary>
              Looks up a localized string similar to Alarm.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.Command">
            <summary>
              Looks up a localized string similar to Command.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.Duration">
            <summary>
              Looks up a localized string similar to Duration: .
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.EngineIdle">
            <summary>
              Looks up a localized string similar to Engine Idle.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.ExtremeAcceleration">
            <summary>
              Looks up a localized string similar to Extreme Acceleration.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.ExtremeBraking">
            <summary>
              Looks up a localized string similar to Extreme Braking.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.fenceDirection_inbroken">
            <summary>
              Looks up a localized string similar to in broken.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.fenceDirection_outbroken">
            <summary>
              Looks up a localized string similar to out broken.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.fenceDirection_unknown">
            <summary>
              Looks up a localized string similar to unknown direction.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.GeoZone">
            <summary>
              Looks up a localized string similar to Geo Zone.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.HarshAcceleration">
            <summary>
              Looks up a localized string similar to Harsh Acceleration.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.HarshBraking">
            <summary>
              Looks up a localized string similar to Harsh Braking.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.Idling">
            <summary>
              Looks up a localized string similar to Idling.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.Position">
            <summary>
              Looks up a localized string similar to Position.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.SeatBeltViolation">
            <summary>
              Looks up a localized string similar to Seat Belt Violation.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.Sensor">
            <summary>
              Looks up a localized string similar to Sensor.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.Speeding">
            <summary>
              Looks up a localized string similar to Speeding.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.Stopped">
            <summary>
              Looks up a localized string similar to Stopped.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.StoredPosition">
            <summary>
              Looks up a localized string similar to Stored Position.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.TripEnd">
            <summary>
              Looks up a localized string similar to Trip End.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.TripStart">
            <summary>
              Looks up a localized string similar to Trip Start.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.TxtMessage">
            <summary>
              Looks up a localized string similar to Text Message.
            </summary>
        </member>
        <member name="P:VLF.DAS.DB.Resources.Const.TxtMsgAnswers">
            <summary>
              Looks up a localized string similar to Answers.
            </summary>
        </member>
        <member name="T:VLF.DAS.DB.BoxProtocolTypeMsgInType">
            <summary>
            Provides interfaces to vlfBoxProtocolTypeMsgInType table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeMsgInType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeMsgInType.AddRecord(System.Int16,System.Int16,System.String,System.Int16)">
            <summary>
            Add new row that connected box protocol type with message in type
            </summary>
            <param name="boxMsgInTypeId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="rules"></param>
            <param name="msgInTypeLen"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeMsgInType.DeleteRecordByBoxMsgInType(System.Int16)">
            <summary>
            Delete exist box message in type by Id
            </summary>
            <param name="boxMsgInTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeMsgInType.DeleteRecordByBoxProtocolType(System.Int16)">
            <summary>
            Delete exist box protocol type by Id
            </summary>
            <param name="boxProtocolTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeMsgInType.DeleteRecordByBoxProtocolTypeMsgInType(System.Int16,System.Int16)">
            <summary>
            Delete exist box protocol type msg in type.
            </summary>
            <param name="boxMsgInTypeId"></param>
            <param name="boxProtocolTypeId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.BoxProtocolTypeMsgInType.RecordCount">
            <summary>
            Retrieves record count from vlfBoxProtocolTypeMsgInType table.
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.BoxHwType">
            <summary>
            Provides interfaces to vlfBoxHwType table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwType.AddRecord(System.String,System.SByte,System.SByte)">
            <summary>
            Add new box hardware type.
            </summary>
            <param name="boxHwTypeName"></param>
            <param name="maxSensorsNum"></param>
            <param name="maxOutputsNum"></param>
            <returns>int new hardware type id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if hardware type name already exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwType.DeleteRecord(System.String)">
            <summary>
            Deletes existing box hardware type by name.
            </summary>
            <param name="boxHwTypeName"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if hardware type name does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwType.DeleteRecord(System.Int16)">
            <summary>
            Deletes existing box hardware type by id.
            </summary>
            <param name="boxHwTypeName"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if hardware type name does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwType.GetNameById(System.Int16)">
            <summary>
            Retrieves box hardware type name by id from "vlfBoxHwType" table
            </summary>
            <param name="boxHwTypeId"></param>
            <returns>string hardware name by hardware id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwType.GetIdByName(System.String)">
            <summary>
            Retrieves box hardware type id by name from "vlfBoxHwType" table
            </summary>
            <param name="boxHwTypeName"></param>
            <returns>short box Hw type Id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwType.GetMaxSensorsNumById(System.Int16)">
            <summary>
            Retrieves max sensors number by id from "vlfBoxHwType" table
            </summary>
            <param name="boxHwTypeId"></param>
            <returns>SByte max sensors number by hardware id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwType.GetMaxOutputsNumById(System.Int16)">
            <summary>
            Retrieves max outputs number by id from "vlfBoxHwType" table
            </summary>
            <param name="boxHwTypeId"></param>
            <returns>SByte max outputs number by hardware id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.BoxHwType.RecordCount">
            <summary>
            Retrieves record count of "vlfBoxHwType" table
            </summary>
            <returns>int total records</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.BoxHwType.MaxRecordIndex">
            <summary>
            Retrieves max record index from "vlfBoxHwType" table
            </summary>
            <returns>int last record id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Organization">
            <summary>
            Provides interfaces to vlfOrganization table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Organization.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Organization.AddOrganization(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Add new organization.
            </summary>
            <returns>int next organization id</returns>
            <param name="organizationName"></param>
            <param name="contact"></param>
            <param name="address"></param>
            <param name="description"></param>
            <param name="logoName"></param>
            <param name="homePageName"></param>
            <param name="mapGroupId"></param>
            <param name="geoCodeGroupId"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if organization alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.UpdateInfo(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Update organization information.
            </summary>
            <returns>void</returns>
            <param name="organizationId"></param>
            <param name="organizationName"></param>
            <param name="contact"></param>
            <param name="address"></param>
            <param name="description"></param>
            <param name="logoName"></param>
            <param name="homePageName"></param>
            <param name="mapGroupId"></param>
            <param name="geoCodeGroupId"></param>
            <exception cref="T:VLF.ERR.DASAppViolatedIntegrityConstraintsException">Thrown if organization does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.DeleteOrganizationByOrganizationName(System.String)">
            <summary>
            Deletes existing organization.
            </summary>
            <returns>rows affected</returns>
            <param name="organizationName"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if organization does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.DeleteOrganizationByOrganizationId(System.Int32)">
            <summary>
            Deletes existing organization.
            </summary>
            <returns>rows affected</returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if organization id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationInfoByOrganizationId(System.Int32)">
            <summary>
            Retrieves Organization info
            </summary>
            <returns>DataSet</returns>
            <param name="organizationId"></param> 
            <returns>DataSet [OrganizationId],[OrganizationName],[Contact],
            [Address],[Description],[LogoName],[HomePageName],
            [MapGroupId],[MapGroupName],[MapPriority],[MapId],[MapEngineName],[MapPath],[MapExternalPath],
            [GeoCodeGroupId],[GeoCodeGroupName],[GeoCodePriority],[GeoCodeId],[GeoCodeEngineName],[GeoPath]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetLicensePlatesByOrganizationId(System.Int32)">
            <summary>
            Retrieves all license plates for specific organization
            </summary>
            <returns>DataSet [LicensePlate]</returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationIdsByBoxId(System.Int32)">
            <summary>
            Retrieves Organization ids
            </summary>
            <returns>DataSet [OrganizationId]</returns>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationInfoByOrganizationName(System.String)">
            <summary>
            Retrieves Organization info
            </summary>
            <returns>DataSet</returns>
            <param name="organizationName"></param> 
            <returns>DataSet [OrganizationId],[OrganizationName],[Contact],
            [Address],[Description],[LogoName],[HomePageName],
            [MapGroupId],[MapGroupName],[MapPriority],[MapId],[MapEngineName],[MapPath],[MapExternalPath],
            [GeoCodeGroupId],[GeoCodeGroupName],[GeoCodePriority],[GeoCodeId],[GeoCodeEngineName],[GeoPath]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationInfoByUserId(System.Int32)">
            <summary>
            Retrieves Organization info by user id
            </summary>
            <returns>DataSet [OrganizationId],[OrganizationName],[Contact],
            [Address],[Description],[LogoName],[HomePageName],
            [GeoCodeGroupId],[GeoCodeGroupName],[MapGroupId],[MapGroupName]</returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationIdByOrganizationName(System.String)">
            <summary>
            Returns organization id by organization name.
            </summary>
            <param name="organizationName"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationNameByOrganizationId(System.Int32)">
            <summary>
            Returns organization name by organization Id. 	
            </summary>
            <param name="organizationId"></param> 
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetUsersInfoByOrganization(System.Int32,System.Int32)">
            <summary>
            Returns all users info assigned to the organization. 
            </summary>
            <param name="userId"></param>
            <param name="organizationId"></param>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName],[PersonId],[ExpiredDate]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetFleetsInfoByOrganizationId(System.Int32)">
            <summary>
            Retrieves Fleets info
            </summary>
            <returns>DataSet [FleetId],[FleetName],[Description],[OrganizationId],[OrganizationName]</returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationUsersByUserGroup(System.Int32,System.Int16)">
            <summary>
            Returns all user assigned to the group for specific organization. 
            </summary>
            <param name="organizationId"></param>
            <param name="userGroupId"></param>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationUsersSecurityByUserGroup(System.Int32,System.Int16)">
            <summary>
            Returns all user assigned to the group for specific organization. 
            </summary>
            <param name="organizationId"></param>
            <param name="userGroupId"></param>
            <returns>DataSet [UserId],[UserName],[Password],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationInfoFieldBy(System.String,System.String,System.Int32)">
            <summary>
            Retrieves Organization info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="resultFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationInfoFieldBy(System.String,System.String,System.String)">
            <summary>
            Retrieves Organization info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="resultFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationInfoBy(System.String,System.Int32)">
            <summary>
            Retrieves Organization info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>DataSet [OrganizationId],[OrganizationName],[Contact],
            [Address],[Description],[LogoName],[HomePageName],
            [MapGroupId],[MapGroupName],[MapPriority],[MapId],[MapEngineName],[MapPath],[MapExternalPath],
            [GeoCodeGroupId],[GeoCodeGroupName],[GeoCodePriority],[GeoCodeId],[GeoCodeEngineName],[GeoPath]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationInfoBy(System.String,System.String)">
            <summary>
            Retrieves Organization info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>DataSet [OrganizationId],[OrganizationName],[Contact],
            [Address],[Description],[LogoName],[HomePageName],
            [MapGroupId],[MapGroupName],[MapPriority],[MapId],[MapEngineName],[MapPath],[MapExternalPath],
            [GeoCodeGroupId],[GeoCodeGroupName],[GeoCodePriority],[GeoCodeId],[GeoCodeEngineName],[GeoPath]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetOrganizationCommInfo(System.Int32,System.Int16)">
            <summary>
            Retrieves communication information for all organization
            </summary>
            <param name="organizationId"></param>
            <param name="commAddressTypeId"></param>
            <returns>DataSet [BoxId],[CommAddressValue]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetAllMapEnginesInfo">
            <summary>
            Get all map engines info
            </summary>
            <returns>DataSet [MapGroupId],[MapGroupName],[Priority],[MapId],[MapEngineName],[Path],[ExternalPath]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetMapEngines">
            <summary>
            Get all map engines
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetAllMapEnginesShortInfo">
            <summary>
            Get all map engines short info
            </summary>
            <returns>DataSet [MapGroupId],[MapGroupName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetAllGeoCodeEnginesInfo">
            <summary>
            Get all GeoCode engines info
            </summary>
            <returns>DataSet [GeoCodeGroupId],[GeoCodeGroupName],[Priority],[GeoCodeId],[GeoCodeEngineName],[Path]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetGeoCodeEngines">
            <summary>
            Get all geocode engines
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetAllGeoCodeEnginesShortInfo">
            <summary>
            Get all GeoCode engines short info
            </summary>
            <returns>DataSet [GeoCodeGroupId],[GeoCodeGroupName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetAllOrganizationsInfo">
            <summary>
            Retrieves information about all organizations 
            </summary>
            <returns>DataSet [OrganizationId],[OrganizationName],[Contact],[Address],[Description]</returns>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all  exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Organization.GetDclCommInfo(System.Int32,System.String)">
            <summary>
            Get DCL Information based on Organization and vehicle description
            </summary>
            <returns>DataSet [DCL]</returns>
            <param name="boxId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.IconType">
            <summary>
            Provides interfaces to vlfVehicleType table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.IconType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.IconType.GetIconsInfo">
            <summary>
            Retrieves icons information
            </summary>
            <returns>DataSet [IconTypeId],[IconTypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.GroupSecurity">
            <summary>
            Provides interfaces to vlfGroupSecuritytable.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.AddGroupSecurity(System.Int16,System.Int32,System.Int32)">
            <summary>
            Adds new group security
            </summary>
            <param name="userGroupId"></param>
            <param name="operationId"></param>
            <param name="operationType"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if group security already exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.DeleteGroupSecurity(System.Int16)">
            <summary>
            Delete group security
            </summary>
            <param name="userGroupId"></param>
            <returns> int rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.DeleteGroupSecurity(System.Int16,System.Int32,System.Int32)">
            <summary>
            Delete group security
            </summary>
            <param name="userGroupId"></param>
            <param name="operationId"></param>
            <param name="operationType"></param>
            <returns> int rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.GetGroupSecurityInfo(System.Int16)">
            <summary>
            Retieves group security information. 	
            </summary>
            <param name="userGroupId"></param>
            <returns>[UserGroupId],[OperationId],[OperationType]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.GetGroupSecurityFullInfo(System.Int16)">
            <summary>
            Retieves group security full info
            </summary>
            <param name="groupId"></param>
            <returns>[OperationType],[OperationTypeName],[OperationId],[OperationName],[OperationAction]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.GetAllGroupSecurityFullInfo">
            <summary>
            Retieves group security full info
            </summary>
            <returns>[OperationType],[OperationTypeName],[OperationId],[OperationName],[OperationAction]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.GetUserControls(System.Int32)">
            <summary>
            Retieves user controls
            </summary>
            <param name="userId"></param>
            <returns>[ControlId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.GetUserReports(System.Int32)">
            <summary>
            Retieves user reports
            </summary>
            <param name="userId"></param>
            <returns>[ReportTypesId],[ReportTypesName],[GuiId],[GuiName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.AuthorizeOperation(System.Int32,VLF.CLS.Def.Enums.OperationType,System.Int32)">
            <summary>
            Authorize user operation
            </summary>
            <returns>true if user is authorized for this operation, otherwise return false</returns>
            <param name="userId"></param>
            <param name="operationType"></param>
            <param name="operationId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.AuthorizeWebMethod(System.Int32,System.String)">
            <summary>
            Authorize user - web method
            </summary>
            <returns>true if user is authorized for this operation, otherwise return false</returns>
            <param name="userId"></param>
            <param name="methodName"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.GroupSecurity.AuthorizeWebMethod(System.Int32,System.String,System.String)">
            <summary>
            Authorize user - web method
            </summary>
            <returns>true if user is authorized for this operation, otherwise return false</returns>
            <param name="userId"></param>
            <param name="methodName"></param>
            <param name="className"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.CommModeAddressType">
            <summary>
            Provides interfaces to vlfCommModeAddressType table
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.CommModeAddressType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.CommModeAddressType.AddRecord(System.Int16,System.Int16)">
            <summary>
            Add new row that connected communication mode and address type
            </summary>
            <param name="commModeId"></param>
            <param name="addressTypeId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommModeAddressType.DeleteRecordByCommMode(System.Int16)">
            <summary>
            Delete exist communication mode by Id
            </summary>
            <param name="commModeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommModeAddressType.DeleteRecordByCommAddressType(System.Int16)">
            <summary>
            Delete exist communication address type by Id
            </summary>
            <param name="commAddressTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommModeAddressType.DeleteRecordByCommModeAddressType(System.Int16,System.Int16)">
            <summary>
            Delete exist CommModeAddressType
            </summary>
            <param name="commModeId"></param> 
            <param name="commAddressTypeId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommModeAddressType.GetCommModeAddressTypesInfo(System.Int16)">
            <summary>
            Get communication address types by communication mode. 
            </summary>
            <param name="commModeId"></param>
            <returns>DataSet [CommAddressTypeId],[CommAddressTypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.CommModeAddressType.RecordCount">
            <summary>
            Retrieves record count from vlfCommModeAddressType table.
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Alarm">
            <summary>
            Provides interface to vlfAlarm table
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.AddAlarm(System.DateTime,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Add new alarm.
            </summary>
            <param name="dateTimeCreated"></param>
            <param name="boxId"></param>
            <param name="alarmTypeName"></param>
            <param name="alarmLevel"></param>
            <param name="description"></param>
            <returns>int new alarm id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if alarm id and datetime alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.DeleteAlarmByAlarmId(System.Int32)">
            <summary>
            Delete existing alarm by alarm id.
            </summary>
            <returns>void</returns>
            <param name="alarmId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.DeleteAllUserAlarms(System.Int32)">
            <summary>
            Delete all user alarms.
            </summary>
            <returns>void</returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.DeleteBoxAllAlarms(System.Int32,System.String)">
            <summary>
            Delete all alarms related to the box.
            </summary>
            <returns>void</returns>
            <param name="boxId"></param> 
            <param name="where"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.DeleteAlarmsByDateTimeRange(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Deletes all alarms in the date time range.
            </summary>
            <remarks>
            1. boxId == VLF.CLS.Def.Const.unassignedIntValue (deletes for all boxes)
            2. from == VLF.CLS.Def.Const.unassignedDateTime ("from" date time is empty)
            3. to == VLF.CLS.Def.Const.unassignedDateTime ("to" date time is empty)
            </remarks>
            <param name="boxId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.GetAlarmInfoByAlarmId(System.Int32)">
            <summary>
            Retrieves alarm info by alarm id 
            </summary>
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[BoxId],[AlarmTypeName],[AlarmLevel],
            		[DateTimeAck],[UserId],[DateTimeClosed],[AlarmDescription],
            		[LicensePlate],[VehicleId],[StreetAddress],[ValidGPS],[vehicleDescription],
            		[UserName]
            </returns>
            <param name="alarmId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.GetAllAlarmsInfo(System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Retrieves all box alarms info
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="requestUserId"></param>
            <remarks>
            1. boxId == VLF.CLS.Def.Const.unassignedIntValue (does not filter by box id)
            2. from == VLF.CLS.Def.Const.unassignedDateTime ("from" date time is empty)
            3. to == VLF.CLS.Def.Const.unassignedDateTime ("to" date time is empty)
            Note:	if information in the history does not exist,
            		return StreetAddress='Address resolution in progress'
            </remarks>
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[BoxId],[AlarmTypeName],[AlarmLevel],
            		[DateTimeAck],[UserId],[DateTimeClosed],[AlarmDescription],
            		[LicensePlate],[VehicleId],[StreetAddress],[ValidGPS],[vehicleDescription]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.GetMaxAlarmIndex">
            <summary>
            retrieves max record index from specific table
            </summary>
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.SetAlarmLevel(System.Int32,System.Int32)">
            <summary>
            Update alarm level.
            </summary>
            <param name="alarmId"></param>
            <param name="alarmLevel"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.AcceptAlarm(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Set alarm acknowledged date time
            </summary>
            <param name="alarmId"></param>
            <param name="acceptedDateTime"></param>
            <param name="userId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.CloseAlarm(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Set alarm closed date time
            </summary>
            <param name="alarmId"></param>
            <param name="closedDateTime"></param>
            <param name="userId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if alarm does not exist.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Alarm.GetAlarmInfoBy(System.String,System.Int32)">
            <summary>
            retrieves alarm info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>
            DataSet [AlarmId],[DateTimeCreated],[BoxId],[AlarmTypeName],[AlarmLevel],
            		[DateTimeAck],[UserId],[DateTimeClosed],[AlarmDescription],
            		[LicensePlate],[VehicleId],[StreetAddress],[ValidGPS],[vehicleDescription],
            		[UserName],[Latitude],[Longitude],[Speed],[Heading],
            		[SensorMask],[IsArmed],[BoxId]
            </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.TxtMsgs">
            <summary>
            Provides interface to vlfTxtMsgs table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.AddMsg(System.Int32,System.DateTime,System.Int16,System.String,System.Int16,System.Int32,System.String)">
            <summary>
            Add new text message
            </summary>
            <returns> current message id or -1 in case of error</returns>
            <param name="boxId"></param>
            <param name="msgDateTime"></param>
            <param name="txtMsgTypeId"></param>
            <param name="msgBody"></param>
            <param name="msgDirection"></param>
            <param name="userId"></param>
            <param name="ack"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Throws if data already exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.SetMsgResponse(System.Int32,System.DateTime,System.String)">
            <summary>
            Save message response
            </summary>
            <param name="msgId"></param>
            <param name="respondDateTime"></param>
            <param name="msgResponse"></param>
            <returns></returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.SetMsgUserId(System.Int32,System.Int32)">
            <summary>
            Set owner foe the message
            </summary>
            <param name="msgId"></param>
            <param name="userId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.SetMsgAck(System.Int32,System.String)">
            <summary>
            Sets message ack
            </summary>
            <param name="msgId"></param>
            <param name="ack"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.GetMessagesFullInfo(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Retrieves messages by box id
            </summary>
            <remarks>
            all box Ids -&gt; VLF.CLS.Def.Const.unassignedIntValue
            from DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            to DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            1. In messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.MdtText
            2. Out messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.ClientText
            3. Both messages directions -&gt; MdtText,ClientText (all visible to client messages)
            </remarks>
            <param name="userId"></param>
            <param name="boxId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="msgDirection"></param>
            <param name="tblLandmarks"></param>
            <returns>DataSet [VehicleId],[LicensePlate],[From],[To],
            [MsgId],[BoxId],[MsgDateTime],[TxtMsgTypeId],
            [MsgBody],[MsgDirection],[MsgResponse],[ResponseDateTime],[UserId],
            [Acknowledged],[UserName]
            [StreetAddress],[Latitude],[Longitude],[Speed],[Heading]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.GetMessageFullInfo(System.Int32,System.Int32)">
            <summary>
            Retrieves message info
            </summary>
            <param name="userId"></param>
            <param name="msgId"></param>
            <returns>DataSet [VehicleId],[LicensePlate],[From],[To],
            [MsgId],[BoxId],[MsgDateTime],[TxtMsgTypeId],
            [MsgBody],[MsgDirection],[MsgResponse],[ResponseDateTime],[UserId],
            [Acknowledged],[UserName],
            [StreetAddress],[Latitude],[Longitude],[Speed],[Heading]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.GetUserMessagesFullInfo(System.Int32,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Retrieves user's messages
            </summary>
            <remarks>
            from DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            to DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            1. In messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.MdtText
            2. Out messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.ClientText
            3. Both messages directions -&gt; MdtText,ClientText (all visible to client messages)
            </remarks>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="msgDirection"></param>
            <returns>DataSet [VehicleId],[LicensePlate],[From],[To],
            [MsgId],[BoxId],[MsgDateTime],[TxtMsgTypeId],
            [MsgBody],[MsgDirection],[MsgResponse],[ResponseDateTime],[UserId],
            [Acknowledged]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.GetUserMessagesShortInfo(System.Int32,System.DateTime,System.DateTime,System.Int16)">
            <summary>
            Retrieves user's messages
            </summary>
            <remarks>
            from DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            to DateTime N/A -&gt; VLF.CLS.Def.Const.unassignedDateTime
            1. In messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.MdtText
            2. Out messages directions -&gt; VLF.CLS.Def.Enums.TxtMsgType.ClientText
            3. Both messages directions -&gt; MdtText,ClientText (all visible to client messages)
            </remarks>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <param name="msgDirection"></param>
            <returns>DataSet [VehicleId],[Description],[LicensePlate],
            [MsgId],[BoxId],[MsgDateTime],[MsgBody],[UserId],[Acknowledged]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.DeleteBoxAllMsgs(System.Int32,System.String)">
            <summary>
            Deletes all text messages related to the box
            </summary>
            <param name="boxId"></param>
            <param name="where"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.DeleteAllUserMsgs(System.Int32)">
            <summary>
            Deletes all text messages related to this user
            </summary>
            <param name="userId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TxtMsgs.GetConfigParameter(System.String,System.Int16,System.String,System.String)">
            <summary>
            Gets configuration parameter
            </summary>
            <param name="moduleName"></param>
            <param name="groupID"></param>
            <param name="paramName"></param>
            <param name="defaultValue"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.Das">
            <summary>
            Database Access Service base class
            This class ONLY should be inherited
            </summary>
        </member>
        <member name="F:VLF.DAS.Das.sqlExec">
            <summary>
            Instance of SQL executer
            </summary>
        </member>
        <member name="M:VLF.DAS.Das.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.Das.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="P:VLF.DAS.Das.ConnectionString">
            <summary>
            Retrieves connection information to the database
            </summary>
        </member>
        <member name="T:VLF.DAS.SQLExecuter">
            <summary>
            SQL Executer class
            </summary>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.OnStateChange(System.Object,System.Data.StateChangeEventArgs)">
            <summary>
            Trap connection state chenges.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.AddCommandParam(System.String,System.Data.SqlDbType,System.Byte[],System.Int32)">
            <summary>
            Add values to SQL statement.
            Throws DASAppException exception in case of error.
            Note: use SetupCommand function before first call, for set SQL header.
            </summary>
            <param name="paramName"></param>
            <param name="paramType"></param>
            <param name="paramValue"></param>
            <param name="paramValueSize"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.AddCommandParam(System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            Add values to SQL statement.
            Note: use SetupCommand function before first call, for set SQL header.
            </summary>
            <param name="paramName"></param>
            <param name="paramType"></param>
            <param name="paramValue"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SetupCommand(System.String,System.Data.CommandType)">
            <summary>
            Setup Command with type
            </summary>
            <param name="cmdText"></param>
            <param name="cmdType"></param>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.AddCommandParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add SQL parameters array
            </summary>
            <exception cref="T:VLF.ERR.DASAppException">Thrown if connection to database has been closed.</exception>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.AddCommandParameters(System.Array)">
            <summary>
            Add values Array
            </summary>
            <exception cref="T:VLF.ERR.DASAppException">Thrown if connection to database has been closed.</exception>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.ClearCommandParameters">
            <summary>
            Clear SQLCommand parameters
            </summary>
            <exception cref="T:VLF.ERR.DASAppException">Thrown if connection to database has been closed.</exception>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.AssertConnectionStatus(System.String)">
            <summary>
            Checks connection status
            </summary>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.ConnectionOk">
            <summary>
            Checks connection status
            </summary>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.GetConnection">
            <summary>
            Gets connection 
            </summary>
            <remarks>If connection has been closed, try to reopen it again</remarks>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.OpenConnection">
            <summary>
            Opens connection
            </summary>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SQLExecuteScalar(System.String)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored.
            </summary>
            <param name="sql"></param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when using Microsoft .NET Framework version 1.0.</exception>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SQLExecuteNonQuery(System.String)">
            <summary>
            Executes a Transact-SQL statement against the connection and returns the number of rows affected.
            </summary>
            <param name="sql"></param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">An exception occurred while executing the command against a locked row. This exception is not generated when using Microsoft .NET Framework version 1.0.</exception>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SQLExecuteDataset(System.String)">
            <summary>
            Sends the CommandText to the Connection and builds a DataSet
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SPExecuteDataset(System.String)">
            <summary>
            Execute stored procedure by name
            </summary>
            <param name="sp_name">sp name</param>
            <returns>Dataset</returns>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SPExecuteDataset(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute stored procedure by name
            </summary>
            <param name="sp_name">sp name</param>
            <param name="paramList">Array of sql parameters</param>
            <returns>Dataset</returns>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SPExecuteDataTable(System.String,System.String)">
            <summary>
            Execute stored procedure by name
            </summary>
            <param name="sp_name">sp name</param>
            <param name="tableName">table name</param>
            <returns>Table</returns>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SPExecuteDataTable(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute stored procedure by name
            </summary>
            <param name="sp_name">sp name</param>
            <param name="tableName">table name</param>
            <param name="paramList">Array of sql parameters</param>
            <returns>Table</returns>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SPExecuteScalar(System.String)">
            <summary>
            Execute stored procedure by name
            </summary>
            <param name="sp_name">sp name</param>
            <returns>Object</returns>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SPExecuteScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute stored procedure by name
            </summary>
            <param name="sp_name">sp name</param>
            <param name="paramList">Array of sql parameters</param>
            <returns>Object</returns>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SPExecuteNonQuery(System.String)">
            <summary>
            Execute stored procedure by name
            </summary>
            <param name="sp_name">sp name</param>
            <returns>Integer - rows</returns>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.SPExecuteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute stored procedure by name
            </summary>
            <param name="sp_name">sp name</param>
            <param name="paramList">Array of sql parameters</param>
            <returns>Integer - rows</returns>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.BeginTransaction">
            <summary>
            Groupping database releted operations - Listing 3A-8
            1. Connection must be valid and open, or the "DASAppException" is thrown.
            </summary>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.BeginTransactionWithIsolationLevel(System.Data.IsolationLevel)">
            <summary>
            Groupping database releted operations - Listing 3A-8
            1. Connection must be valid and open, or the "DASAppException" is thrown.
            </summary>
            <param name="isolationLevel"></param>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.AttachToTransaction(System.String)">
            <summary>
            1. Connection must be valid and open, or the "DASAppException" is thrown.
            2. AttachCommandToTransaction must be called after "BeginTransaction" mathod 
            has been called, or the "DASAppException" is thrown.
            </summary>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.RollbackTransaction">
            <summary>
            Aborting a manual transaction. Rollback all changes since beginning transaction
            - Listing 3A-9
            1. Connection must be valid and open, or the "DASAppException" is thrown.
            2. Rollback must be called after "BeginTransaction" mathod has been called, or
            the "DASAppException" is thrown.
            </summary>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.CommitTransaction">
            <summary>
            Commiting a manual transaction. Commit all changes since beginning transaction
            - Listing 3A-9
            1. Connection must be valid and open, or the "DASAppException" is thrown.
            2. Commit must be called after "BeginTransaction" mathod has been called, or
            the "DASAppException" is thrown.
            </summary>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.RequiredTransaction">
            <summary>
            Check if command has been initiated with transaction. 
            "BeginTransaction" method been called before.
            Returns true if command already using transaction.
            </summary>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.GetIsolationLevel">
            <summary>
            Retrieves the transaction isolation level - Listing 3A-13
            1. Connection must be valid and open, or the "DASAppException" is thrown.
            2. GetIsolationLevel must be called after "BeginTransaction" mathod has been called, or
            the "DASAppException" is thrown.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.Finalize">
            <summary>
            1. Finalizers are implemented by overriding the Object.Finalize method.
            However, types written in C# or C++ implement destructors, which compilers 
            turn into an override of Object.Finalize
            2. Allows an Object to attempt to free resources and perform 
            other cleanup operations before the Object is reclaimed by garbage collection.
            3. In C#, finalizers are expressed using destructor syntax.
            4. This method is automatically called after an object becomes inaccessible, 
            unless the object has been exempted from finalization by a call 
            to SuppressFinalize
            Note: 
            	A type should implement Finalize when it uses unmanaged resources such as 
            	file handles or database connections that must be released when 
            	the managed object that uses them is reclaimed. 
            </summary>
        </member>
        <member name="M:VLF.DAS.SQLExecuter.Dispose">
            <summary>
            1. Use the Dispose method of this interface to explicitly release 
            unmanaged resources in conjunction with the garbage collector. 
            The consumer of an object CAN call this method when the object is 
            no longer needed.
            2. Because the Dispose method must be called explicitly, objects that implement 
            IDisposable MUST also implement a finalizer to handle freeing resources 
            when Dispose is not called. 
            3. By default, the garbage collector will automatically call an 
            object's finalizer prior to reclaiming its memory. However, once the 
            Dispose method has been called, it is typically unnecessary for the 
            garbage collector to call the disposed object's finalizer. 
            To prevent automatic finalization, Dispose implementations can call the 
            GC.SuppressFinalize method
            4. The garbage collector does not, by default, call the Dispose method.
            However, implementations of the Dispose method can call methods in the GC class 
            to customize the finalization behavior of the garbage collector
            </summary>
        </member>
        <member name="P:VLF.DAS.SQLExecuter.ConnectionString">
            <summary>
            Retrieves database connection information.
            </summary>
        </member>
        <member name="P:VLF.DAS.SQLExecuter.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <exception cref="T:System.ArgumentException">The property value assigned is less than 0.</exception>
            <returns>A value of 0 indicates no limit, and should be avoided in a CommandTimeout because an attempt to execute a command will wait indefinitely.</returns>
        </member>
        <member name="T:VLF.DAS.DB.BoxMsgInType">
            <summary>
            Provides interfaces to vlfBoxMsgInType table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgInType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgInType.AddRecord(System.Int16,System.String)">
            <summary>
            Add new box MsgIn type.
            </summary>
            <param name="boxMsgInTypeId"></param>
            <param name="boxMsgInTypeName"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgInType.DeleteRecord(System.String)">
            <summary>
            Delete exist box Msg In type by name.
            </summary>
            <param name="boxMsgInTypeName"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgInType.DeleteRecord(System.Int16)">
            <summary>
            Delete exist box Msg In type by Id
            </summary>
            <param name="boxMsgInTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgInType.GetNameById(System.Int16)">
            <summary>
            Retrieves box MsgIn type name by id from "vlfBoxMsgInType" table
            </summary>
            <param name="boxMsgInTypeId"></param>
            <returns>returns message name by id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgInType.SetDayLightSaving(System.Boolean)">
            <summary>
            Set DayLight Savings.
            </summary>
            <returns>void</returns>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxMsgInType.GetMsgNotificationRecipientInfo(System.Int32,System.Int16,System.Int16,System.String)">
            <summary>
            Get message notification recipient information
            </summary>
            <returns>[OrganizationId],[BoxMsgInTypeId],[SensorId],[MsgDetails],[Email],[TimeZone],[DayLightSaving],[AutoAdjustDayLightSaving]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="boxId"></param>
            <param name="boxMsgInTypeId"></param>
            <param name="sensorId"></param>
            <param name="msgDetails"></param>
        </member>
        <member name="T:VLF.DAS.DB.BoxHwDefaultSensorsCfg">
            <summary>
            Provides interfaces to vlfBoxHwDefaultSensorsCfg table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultSensorsCfg.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultSensorsCfg.AddSensor(System.Int16,System.Int16,System.String,System.String)">
            <summary>
            Add a new sensor
            </summary>
            <returns>void</returns>
            <param name="boxHwTypeId"></param>
            <param name="sensorId"></param>
            <param name="sensorName"></param>
            <param name="sensorAction"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if sensor name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultSensorsCfg.AddSensor(System.Int16,System.Int16,System.String,System.String,System.Int16,System.Int16)">
            <summary>
            Add a new sensor - overloaded
            </summary>
            <returns>void</returns>
            <param name="boxHwTypeId"></param>
            <param name="sensorId"></param>
            <param name="sensorName"></param>
            <param name="sensorAction"></param>
            <param name="alarmOn"></param>
            <param name="alarmOff"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if sensor name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultSensorsCfg.DeleteSensorsByHwTypeId(System.Int16)">
            <summary>
            Delete all sensors related to box hardware type.
            </summary>
            <returns>void</returns>
            <param name="boxHwTypeId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if box hardware type does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultSensorsCfg.GetSensorsInfoByHwTypeId(System.Int16)">
            <summary>
            Retrieves sensor info by box hardware type
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>DataSet [SensorId],[SensorName],[SensorAction],[AlarmLevelOn],[AlarmLevelOff]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultSensorsCfg.GetMaxSupportedSensorsByHwType(System.Int16)">
            <summary>
            Retrieves max number of supported sensors for specific Hw type.
            Note: if box does not exist return 0
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultSensorsCfg.GetCurrentSupportedSensorsByHwType(System.Int16)">
            <summary>
            Retrieves current number of supported sensors for specific Hw type.
            Note: if box does not exist return 0
            </summary>
            <param name="boxHwTypeId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxHwDefaultSensorsCfg.GetAllSensors(System.Boolean)">
            <summary>
            Get all sensors from DB
            </summary>
            <param name="alarms" type="boolean">Include or not default alarm levels on and off</param>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.DB.CommMode">
            <summary>
            Setup/retrieve communication mode settings
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.CommMode.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.CommMode.AddRecord(System.String)">
            <summary>
            Add new communication mode.
            </summary>
            <param name="commModeName"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommMode.DeleteRecord(System.String)">
            <summary>
            Delete exist communication mode by name.
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <param name="commModeName"></param>
            <returns>rows affected</returns>
        </member>
        <member name="M:VLF.DAS.DB.CommMode.DeleteRecord(System.Int16)">
            <summary>
            Delete exist communication mode by Id
            </summary>
            <param name="commModeId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommMode.GetNameById(System.Int16)">
            <summary>
            Retrieves communication mode by id from "vlfCommMode" table
            </summary>
            <param name="commModeId"></param>
            <returns>communication name</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.CommMode.RecordCount">
            <summary>
            Retrieves record count of "vlfCommMode" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.CommMode.MaxRecordIndex">
            <summary>
            Retrieves max record index from "vlfCommMode" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.StringValueAttribute">
            <summary>
            Simple attribute class for storing String Values
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.StringValueAttribute.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:VLF.DAS.DB.StringValueAttribute"/> instance.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="P:VLF.DAS.DB.StringValueAttribute.Value">
            <summary>
            Gets the value.
            </summary>
            <value></value>
        </member>
        <member name="T:VLF.DAS.DB.ViolationsFleetReport">
            <summary>
                 Generates sensors reporting functionality
            </summary>
            
        </member>
        <member name="M:VLF.DAS.DB.ViolationsFleetReport.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.ViolationsFleetReport.Exec_GetViolationsReportForFleet(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
                       run Exec_GetViolationsReportForFleet which takes into consideration the user preferences
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <param name="maskViolations">
                       is a bitmask of below values 
                 public static int CT_VIOLATION_HARSHBRAKING = 0x0001;
                 public static int CT_VIOLATION_HARSHACCELERATION = 0x0002;
                 public static int CT_VIOLATION_EXTREMEACCELERATION = 0x0004;
                 public static int CT_VIOLATION_EXTREMEBRAKING = 0x0008;
                 public static int CT_VIOLATION_SEATBELT = 0x0010;
                 public static int CT_VIOLATION_SPEED = 0x0020;
            
            </param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns>
                     [BoxId], [VehicleDescription], [OriginDateTime], [BoxMsgInTypeId], [CustomProp]
                    order by BoxId, BoxMsgInTypeId, OriginDateTime
            </returns>
        </member>
        <member name="M:VLF.DAS.DB.ViolationsFleetReport.Exec_GetViolationsReportForFleetWithScore(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
                       run Exec_GetViolationsReportForFleetWithScore which takes into consideration the user preferences
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <param name="maskViolations">
                       is a bitmask of below values 
                 public static int CT_VIOLATION_HARSHBRAKING = 0x0001;
                 public static int CT_VIOLATION_HARSHACCELERATION = 0x0002;
                 public static int CT_VIOLATION_EXTREMEACCELERATION = 0x0004;
                 public static int CT_VIOLATION_EXTREMEBRAKING = 0x0008;
                 public static int CT_VIOLATION_SEATBELT = 0x0010;
                 public static int CT_VIOLATION_SPEED = 0x0020;
            
            </param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <returns>
                     [BoxId], [VehicleDescription], [OriginDateTime], [BoxMsgInTypeId], [CustomProp]
                    order by BoxId, BoxMsgInTypeId, OriginDateTime
            </returns>
        </member>
        <member name="M:VLF.DAS.DB.ViolationsFleetReport.FillReport(System.DateTime,System.DateTime,System.Data.DataSet)">
            \fn     public void FillReport(int paramSensor, DateTime firstDateTime_, DateTime lastDateTime_, DataSet rowData)
            
             \brief  this function receives all messages IDs between specific hours and 
                      calculates the total utilization of the time for the day
                     
                     This function is producing table DailyActivity
                              [BoxId], [VehicleDescription], [DateTime], [Duration], [Description]
            
             \comment rowData is the table returned after you called 
                      Exec_GetSensorsPerFleet @fleetName, @sensorId, @dateFrom, @dateTo
                        having rows 
                      [BoxId], [VehicleDescription], [OriginDateTime], [BoxMsgInTypeId], [CustomProp]
                      order by BoxId, BoxMsgInTypeId, OriginDateTime
        </member>
        <member name="P:VLF.DAS.DB.ViolationsFleetReport.result">
            <summary>
                 returns the tblDailyActivity and  tblIdlingDuration in a dataset
            </summary>
            <returns></returns>
        </member>
        <member name="T:VLF.DAS.DB.ViolationsFleetReport.VIOLATIONS_DESCRIPTION">
            \enum      VIOLATIONS_DESCRIPTION
            \comment   I've used attributes to assign string values to an enum 
                       see http://www.codeproject.com/csharp/StringEnum.asp 
        </member>
        <member name="T:VLF.DAS.DB.Security">
            <summary>
            Provides interfaces to security tables.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Security.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Security.CheckBoxUserAuthorization(System.Int32,System.Int32)">
            <summary>
            Chacks box-user authorization
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <returns>true if authorized, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.OrganizationGeozone">
            <summary>
            Provides interfaces to vlfOrganization table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.AddGeozone(System.Int32,System.String,System.Int16,System.Int16,System.Int16,System.String,System.String,System.Int32,System.Boolean,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add new geozone to organization.
            </summary>
            <param name="organizationId"></param>
            <param name="geozoneName"></param>
            <param name="type"></param>
            <param name="geozoneType"></param>
            <param name="severityId"></param>
            <param name="description"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="formatType"></param>
            <param name="notify"></param>
            <param name="warning"></param>
            <param name="critical"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.AddGeozoneSet(System.Int64,System.Data.DataSet)">
            <summary>
            Add geozone set.
            </summary>
            <param name="geozoneNo"></param>
            <param name="dsGeozoneSet"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.DeleteGeozoneFromOrganization(System.Int32,System.Int16)">
            <summary>
            Deletes geozone from organization.
            </summary>
            <param name="organizationId"></param>
            <param name="geozoneId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.DeleteGeozoneSet(System.Int64)">
            <summary>
            Deletes geozone set.
            </summary>
            <param name="geozoneNo"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.UpdateGeozone(System.Int32,System.Int16,System.String,System.Int16,System.Int64,System.Int16,System.String,System.String,System.Int32,System.Boolean,System.Int16,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Update geozone info.
            </summary>
            <returns>void</returns>
            <param name="organizationId"></param>
            <param name="geozoneId"></param>
            <param name="geozoneName"></param>
            <param name="type"></param>
            <param name="geozoneType"></param>
            <param name="severityId"></param>
            <param name="description"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="formatType"></param>
            <param name="notify"></param>
            <param name="warning"></param>
            <param name="critical"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if geozone for specific organization already exists.</exception>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if geozone does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.SetDayLightSaving(System.Boolean)">
            <summary>
            Set DayLight Savings.
            </summary>
            <returns>void</returns>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.SetAutoAdjustDayLightSaving(System.Int32,System.Int16,System.Boolean,System.Boolean)">
            <summary>
            Set AutoAdjustDayLightSaving.
            </summary>
            <returns>void</returns>
            <param name="organizationId"></param>
            <param name="geozoneId"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.GetOrganizationGeozonesInfo(System.Int32,System.Data.DataSet)">
            <summary>
            Retrieves geozones info by organization id 
            </summary>
            <returns>
            DataSet [GeozoneNo],[OrganizationId],[GeozoneId],[GeozoneName],[Type],
            [GeozoneType],[GeozoneTypeName],[SeverityId],[Description],[Deleted]
            [Email],[TimeZone],[DayLightSaving],[FormatType],[Notify],[Warning],[Critical],[AutoAdjustDayLightSaving]</returns>
            <param name="organizationId"></param> 
            <param name="dsGeozonesList"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.GetOrganizationGeozoneInfo(System.Int32,System.Int16)">
            <summary>
            Retrieves geozone info by organization id and geozone Id 
            </summary>
            <returns>
            DataSet [GeozoneNo],[GeozoneId],[Type],[GeozoneType],[SequenceNum],[Latitude],[Longitude],[GeozoneName]</returns>
            <param name="organizationId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.IsGeozoneAssigned(System.Int32,System.Int16)">
            <summary>
            Check if geozone assigned to any of vehicles
            </summary>
            <returns>true if assigned, otherwise false</returns>
            <param name="organizationId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.GetGeozoneTypes">
            <summary>
            Retrieves geozone types
            </summary>
            <returns>
            DataSet [GeozoneType],[GeozoneTypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.GetGeozoneNoByGeozoneId(System.Int32,System.Int32)">
            <summary>
            Retrieves geozoneNo by geozone id
            </summary>
            <returns>Int64</returns>
            <param name="organizationId"></param> 
            <param name="geozoneId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.OrganizationGeozone.GetNextFreeGeozoneId(System.Int32)">
            <summary>
            Retrieves next free geozone id
            </summary>
            <returns>short</returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.MsgInLite">
            <summary>
            Provides interfaces to vlfMsgIn table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.MsgInLite.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.MsgInLite.AddMsg(VLF.CLS.Def.CMFIn)">
            <summary>
            Add new Msg.
            </summary>
            <param name="cMFIn"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if data already exists (after number of ritries).</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.MsgInLite.AppendMsg(VLF.CLS.Def.CMFIn)">
            <summary>
            Add new Msg into MsgIn table.
            </summary>
            <param name="cMFIn"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.VehicleAssignment">
            <summary>
            Provides interfaces to vlfVehicleAssignment table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.AddVehicleAssignment(VLF.CLS.Def.Structures.VehicAssign)">
            <summary>
            Add new vehicle assignment.
            </summary>
            <param name="vehicAssign"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.DeleteVehicleAssignment(System.String)">
            <summary>
            Deletes existing vehicle assignment.
            </summary>
            <param name="licensePlate"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.DeleteVehicleAssignment(System.Int64)">
            <summary>
            Deletes existing vehicle assignment.
            </summary>
            <param name="vehicleId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.GetVehicleAssignment(System.String)">
            <summary>
            Returns vehicle assignment by license plate. 
            </summary>
            <param name="licensePlate"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[AssignedDateTime]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.GetVehicleAssignmentVA(System.String)">
            <summary>
            Returns vehicle assignment license plate. 
            </summary>
            <param name="licensePlate"></param>
            <returns>VehicAssign</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.GetAllLicencePlates">
            <summary>
            Gets all active assignments license plates.
            </summary>
            <returns>ArrayList</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.GetVehicleAssignmentBy(System.String,System.Int64)">
            <summary>
            Gets vehicle active assignment information by license plate as dataset
            In case of empty result returns null.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[AssignedDateTime]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.GetVehicleAssignmentBy(System.String,System.String)">
            <summary>
            Gets vehicle active assignment information by license plate as dataset
            In case of empty result returns null.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns>DataSet [LicensePlate],[BoxId],[VehicleId],[AssignedDateTime]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.GetVehicleAssignmentField(System.String,System.String,System.Int64)">
            <summary>
            Gets active Vehicle Assignment information ("resultFieldName") by specific "byFieldName"
            In case of empty result returns null.
            </summary>
            <param name="resultFieldName"></param>
            <param name="byFieldName"></param>
            <param name="byFieldValue"></param>
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.GetVehicleAssignmentField(System.String,System.String,System.String)">
            <summary>
            Gets active Vehicle Assignment information ("resultFieldName") by specific "byFieldName"
            In case of empty result returns null.
            </summary>
            <param name="resultFieldName"></param>
            <param name="byFieldName"></param>
            <param name="byFieldValue"></param>
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.IsActiveAssignmentBy(System.String,System.Int64)">
            <summary>
            Checks active vehicle assignment by field
            If exists return true, otherwise return false
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns>bool</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.IsActiveAssignmentBy(System.String,System.String)">
            <summary>
            Checks active vehicle assignment by field
            If exists return true, otherwise return false
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns>bool</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignment.GetAllVehiclesActiveAssignments(System.Int32)">
            <summary>
            Gets all Vehicles active assignment information
            </summary>
            <remarks>
            TableName	= "AllActiveVehiclesAssignments"
            DataSetName = "Vehicle"
            </remarks>
            <returns>DataSet [LicensePlate][BoxId][VehicleId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Sensor">
            <summary>
            Provides interfaces to vlfSensor table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Sensor.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Sensor.AddSensor(System.String,System.String)">
            <summary>
            Adds new sensor.
            </summary>
            <param name="sensorName"></param>
            <param name="sensorAction"></param>
            <returns>int next sensor id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if sensor name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Sensor.DeleteSensorByName(System.String)">
            <summary>
            Deletes existing sensor.
            </summary>
            <returns>rows affected</returns>
            <param name="sensorName"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if sensor name does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Sensor.DeleteSensorById(System.Int16)">
            <summary>
            Deletes existing sensor.
            </summary>
            <returns>rows affected</returns>
            <param name="sensorId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if sensor id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Sensor.GetSensorDescription(System.String,System.Data.DataTable)">
            <summary>
            Returns formated sensor status
            </summary>
            <param name="customProp"></param>
            <param name="tblUserDefinedSensors"></param>
            <returns>sensor description</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.ReportVehicleTrip">
            <summary>
            rovides interfaces to all reports in the system
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.ReportVehicleTrip.#ctor(System.Int16,VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.ReportVehicleTrip.FillReportOld(System.Data.DataTable,System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Data.DataSet,System.Double,System.Int64,System.Int32,System.Boolean,System.String)">
            <summary>
            Fill trip report
            </summary>
            <remarks>
            1. On Ignition On satrt trip
            2. On Ignition Off stop trip
            3. If Street address is selected, include it into report
            4. Shows sensors changes
            5. Shows vehicle stops (Stop interval is configurable)
            6. Calculates trip statistics:
            	6.1 Trip Duration
            	6.2 Trip Distance
            	6.3 Trip Average Speed
            	6.4 Trip Stops
            	6.5 Trip Cost
            	
            7. Calculates all trips statistics:
            	7.1 Total Trips
            	7.2 Total Distance (mile/kms)
            	7.3 Total Trips Duration
            	7.4 Total Average Speed
            	7.5 Total Cost
            8. isTrailer == true, then calculate trips by "Power" message
            </remarks>
            <param name="tblVehicleSensors"></param>
            <param name="tblVehicleGeozones"></param>
            <param name="includeStreetAddress"></param>
            <param name="includeSensors"></param>
            <param name="includePosition"></param>
            <param name="includeIdleTime"></param>
            <param name="showLastStoredPosition"></param>
            <param name="carCost"></param>
            <param name="rowData"></param>
            <param name="measurementUnits"></param>
            <param name="vehicleId"></param>
            <param name="userId"></param>
            <param name="isTrailer"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.ReportVehicleTrip.FillReport(System.Data.DataTable,System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Data.DataSet,System.Double,System.Int64,System.Int32,System.Int32,System.Int16,System.String)">
            \brief     This function bases all cycles on the changes of sensorId from the param list 
            \comment   implemented for Chilliwack
        </member>
        <member name="M:VLF.DAS.DB.ReportVehicleTrip.FillReport(System.Data.DataTable,System.Data.DataTable,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Data.DataSet,System.Double,System.Int64,System.Int32,System.Boolean,System.String)">
            <summary>
            Fill trip report
            </summary>
            <remarks>
            1. Use Ignition bit in sensor mask as trip flag for all vehicles except trailers.
            For trailers use MessageType.Status with Enums.PowerReason value in CustomProp 
            2. If Street address is selected, include it into report
            3. Shows sensors changes
            4. Shows vehicle stops (Stop interval is configurable)
            5. Break bown trip by daily usage, otherwise set weekdayStartTime=weekendStartTime=00:00:00.000
            and weekdayEndTime=weekendEndTime=23:59:59.999999
            6. Calculates trip statistics:
            	6.1 Trip Duration
            	6.2 Trip Distance
            	6.3 Trip Average Speed
            	6.4 Trip Stops
            	6.5 Trip Cost
            	
            7. Calculates all trips statistics:
            	7.1 Total Trips
            	7.2 Total Distance (mile/kms)
            	7.3 Total Trips Duration
            	7.4 Total Average Speed
            	7.5 Total Cost
            </remarks>
            <param name="tblVehicleSensors"></param>
            <param name="tblVehicleGeozones"></param>
            <param name="includeStreetAddress"></param>
            <param name="includeSensors"></param>
            <param name="includePosition"></param>
            <param name="includeIdleTime"></param>
            <param name="showLastStoredPosition"></param>
            <param name="carCost"></param>
            <param name="rowData"></param>
            <param name="measurementUnits"></param>
            <param name="vehicleId"></param>
            <param name="userId"></param>
            <param name="isTrailer"></param>
            <param name="weekdayStartTime"></param>
            <param name="weekdayEndTime"></param>
            <param name="weekendStartTime"></param>
            <param name="weekendEndTime"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.ReportVehicleTrip.AddTripReportRow(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.String)">
            \fn     private void AddTripReportRow(int tripIndex, string reason, string dateTime, 
                             string location, string speed, string description, double lat, double lon, string remark)
            \brief  we have to modify this function to return a localized string as the second argument
                       LOCALIZATION !!!
        </member>
        <member name="P:VLF.DAS.DB.ReportVehicleTrip.TripReportDetailes">
            <summary>
            Retrieves trip report details
            </summary>
            <remarks>
            1. Triggered sensors information
            2. Trip stop details
            3. Position information
            </remarks>
            <returns> DataTable [TripIndex],[Reson],[Date/Time],[Location],[Speed],[Description] </returns>		
        </member>
        <member name="P:VLF.DAS.DB.ReportVehicleTrip.TripsDuration">
            <summary>
            Retrieves trips duration
            </summary>
            <returns> DataTable [TripIndex],[Summary],[Remarks] </returns>		
        </member>
        <member name="P:VLF.DAS.DB.ReportVehicleTrip.TripsStopsDuration">
            <summary>
            Retrieves trips stops
            </summary>
            <returns> DataTable [TripIndex],[Summary],[Remarks] </returns>		
        </member>
        <member name="P:VLF.DAS.DB.ReportVehicleTrip.TripsDistance">
            <summary>
            Retrieves trips distances
            </summary>
            <returns> DataTable [TripIndex],[Summary],[Remarks] </returns>		
        </member>
        <member name="P:VLF.DAS.DB.ReportVehicleTrip.TripsAverageSpeed">
            <summary>
            Retrieves trips average speed
            </summary>
            <returns> DataTable [TripIndex],[Summary],[Remarks] </returns>		
        </member>
        <member name="P:VLF.DAS.DB.ReportVehicleTrip.TripsCost">
            <summary>
            Retrieves trips costs
            </summary>
            <returns> DataTable [TripIndex],[Summary],[Remarks] </returns>		
        </member>
        <member name="P:VLF.DAS.DB.ReportVehicleTrip.TripsStart">
            <summary>
            Retrieves trips starts
            </summary>
            <returns> DataTable [TripIndex],[Summary],[Remarks] </returns>		
        </member>
        <member name="P:VLF.DAS.DB.ReportVehicleTrip.TripsEnd">
            <summary>
            Retrieves trips ends
            </summary>
            <returns> DataTable [TripIndex],[Summary],[Remarks] </returns>		
        </member>
        <member name="T:VLF.DAS.DB.CommAddressType">
            <summary>
            Setup/Retrieve communication address type settings
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.CommAddressType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.CommAddressType.AddRecord(System.String)">
            <summary>
            Add new communication address type.
            </summary>
            <param name="commAddressTypeName"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommAddressType.DeleteRecord(System.String)">
            <summary>
            Delete exist communication address type by name.
            </summary>
            <param name="commAddressTypeName"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommAddressType.DeleteRecord(System.Int16)">
            <summary>
            Delete exist communication address type by Id
            </summary>
            <param name="commAddressTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.CommAddressType.GetNameById(System.Int16)">
            <summary>
            Retrieves communication address type by id from "vlfCommAddressType" table
            </summary>
            <param name="commAddressTypeId"></param>
            <returns>communication address type name by id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.CommAddressType.RecordCount">
            <summary>
            Retrieves record count of "vlfCommAddressType" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.CommAddressType.MaxRecordIndex">
            <summary>
            Retrieves max record index from "vlfCommAddressType" table
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.VehicleMaintenaceInfo">
            <summary>
            Provides interfaces to vlfVehicleMaintenaceInfo table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.AddVehicleMaintenanceInfo(System.Int64,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int16,System.Int16,System.String)">
            <summary>
            Add new vehicle maintenanceinfo.
            </summary>
            <param name="vehicleId"></param>
            <param name="lastSrvOdo"></param>
            <param name="maxSrvInterval"></param>
            <param name="lastSrvEngHrs"></param>
            <param name="engHrsSrvInterval"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="nextServiceDescription"></param>
            <returns>true if succeeded, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.AddVehicleMaintenanceHst(System.Int64,System.DateTime,System.String,System.Double)">
            <summary>
            Add new vehicle maintenance history.
            </summary>
            <param name="vehicleId,"></param>
            <param name="serviceDateTime"></param>
            <param name="serviceDescription"></param>
            <param name="serviceOdo"></param>
            <returns>true if succeeded, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.AddVehicleMaintenanceHst(System.Int64,System.DateTime,System.String,System.Double,System.Int32)">
            <summary>
            Add new vehicle maintenance history incl. engine service
            </summary>
            <param name="vehicleId"></param>
            <param name="srvcDateTime"></param>
            <param name="srvcDescription"></param>
            <param name="srvcOdo"></param>
            <returns>true if succeeded, otherwise false</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle with vin number alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.DeleteVehicleMaintenanceInfo(System.Int64)">
            <summary>
            Deletes existing vehicle maintenance info.
            </summary>
            <param name="vehicleId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.DeleteVehicleMaintenanceHst(System.Int64)">
            <summary>
            Deletes existing vehicle maintenance history.
            </summary>
            <param name="vehicleId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.GetVehicleMaintenanceInfo(System.Int64)">
            <summary>
            Returns vehicle maintenance information.
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [BoxId],[VehicleId],[Description],
            [LastSrvOdo],[CurrentOdo],[MaxSrvInterval],
            [LastSrvEngHrs],[CurrentEngHrs],[EngHrsSrvInterval],
            [Email],[TimeZone],[DayLightSaving],[AutoAdjustDayLightSaving],
            [NextServiceDescription],[VehicleTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.GetFleetMaintenanceInfo(System.Int32,System.Int32)">
            <summary>
            Returns fleet maintenance information.
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <returns>DataSet [BoxId],[VehicleId],[Description],
            [LastSrvOdo],[CurrentOdo],[MaxSrvInterval],
            [LastSrvEngHrs],[CurrentEngHrs],[EngHrsSrvInterval],
            [Email],[TimeZone],[DayLightSaving],[AutoAdjustDayLightSaving],
            [LicensePlate],[ModelYear],[MakeName],[ModelName],
            [NextServiceDescription],[VehicleTypeId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.IsVehicleMaintenanceInfoExist(System.Int64)">
            <summary>
            Checks if vehicle maintenance information exists.
            </summary>
            <param name="vehicleId"></param>
            <returns>true if exist, otherwisw false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.UpdateVehicleMaintenanceInfo(System.Int64,System.Double,System.String)">
            <summary>
            Updates vehicle next service description.
            </summary>
            <param name="vehicleId"></param>
            <param name="nextServiceDescription"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.UpdateVehicleMaintenanceInfo(System.Int64,System.Double,System.Int32,System.String)">
            <summary>
            Updates vehicle next service description.
            </summary>
            <param name="vehicleId"></param>
            <param name="nextServiceDescription"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.UpdateVehicleCurrOdoInfo(System.Int64,System.Double)">
            <summary>
               Updates vehicle current Odo information.
            </summary>
            <comment>
               added the feature to insert the record if is not there - gb 2006/09/6
            </comment>
            <param name="vehicleId"></param>
            <param name="currentOdo"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.UpdateVehicleCurrentEngHrsInfo(System.Int64,System.Int32)">
            <summary>
            Updates vehicle current enine hours information.
            </summary>
            <param name="vehicleId"></param>
            <param name="currentEngHrs"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.UpdateVehicleHoursInfo(System.Int64,System.Int32,System.Int32)">
            <summary>
            Updates vehicle current engine hours + idling hours information.
            
            \* brief Adds a new value to the value already in the table
            </summary>
            <param name="vehicleId"></param>
            <param name="currentEngHrs"></param>
            <param name="idlingHours"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.UpdateVehicleMaintenanceHst(System.Int64,System.DateTime,System.String,System.Double)">
            <summary>
            Updates vehicle maintenance history.
            </summary>
            <param name="vehicleId"></param>
            <param name="serviceDateTime"></param>
            <param name="serviceDescription"></param>
            <param name="serviceOdo"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.UpdateVehicleMaintenanceInfo(System.Int64,System.Double,System.Double,System.Double,System.String,System.Int32,System.Int16,System.Int16,System.String)">
            <summary>
            Updates vehicle maintenance information + odometer
            </summary>
            <param name="vehicleId"></param>
            <param name="lastSrvOdo"></param>
            <param name="currentOdo"></param>
            <param name="maxSrvInterval"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="nextServiceDescription"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.UpdateVehicleEngineMaintenanceInfo(System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int16,System.Int16,System.String)">
            <summary>
            Updates vehicle maintenance information + engine and idling hours
            </summary>
            <param name="vehicleId"></param>
            <param name="lastEngHours"></param>
            <param name="currentEngHours"></param>
            <param name="intervalEngHours"></param>
            <param name="email"></param>
            <param name="timeZone"></param>
            <param name="dayLightSaving"></param>
            <param name="autoAdjustDayLightSaving"></param>
            <param name="nextServiceDescription"></param>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <exception cref="T:VLF.ERR.DASDbException">Thrown if there is no entry for the vehicle in the table</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.GetVehicleMaintenanceHistory(System.Int64,System.Int32)">
            <summary>
            Returns vehicle maintenance information.
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [VehicleId],[ServiceDateTime],[ServiceDescription],[ServiceOdo]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleMaintenaceInfo.GetFleetMaintenanceHistory(System.Int32,System.Int32)">
            <summary>
            Returns fleet maintenance history.
            </summary>
            <param name="fleetId"></param>
            <returns>DataSet [VehicleId],[ServiceDateTime],[ServiceDescription],[ServiceOdo]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.FleetUsers">
            <summary>
            Provides interfaces to vlfFleetUsers table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.FleetUsers.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.FleetUsers.AddUserToFleet(System.Int32,System.Int32)">
            <summary>
            Add user to fleet
            </summary>
            <param name="fleetId"></param>
            <param name="userId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetUsers.DeleteUserFromAllFleets(System.Int32)">
            <summary>
            Delete exist user from all fleets
            </summary>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASException">Thrown DASAppResultNotFoundException if user does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>ows affected</returns>
        </member>
        <member name="M:VLF.DAS.DB.FleetUsers.DeleteAllUsersFromFleet(System.Int32)">
            <summary>
            Delete all users from the fleet and fleet
            </summary>
            <param name="fleetId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetUsers.DeleteUserFromFleet(System.Int32,System.Int32)">
            <summary>
            Delete exist user from the fleet
            </summary>
            <param name="fleetId"></param> 
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>rows affected</returns>
        </member>
        <member name="M:VLF.DAS.DB.FleetUsers.GetFleetsInfoByUserId(System.Int32)">
            <summary>
            Returns fleets information by user id. 
            </summary>
            <param name="userId"></param>
            <returns>DataSet [OrganizationName],[FleetId],[FleetName],[FleetDescription]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetUsers.GetUnassignedFleetsInfoByUserId(System.Int32)">
            <summary>
            Returns unassigned fleets information to current user. 
            </summary>
            <param name="userId"></param>
            <returns>DataSet [OrganizationName],[FleetId],[FleetName],[FleetDescription]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetUsers.GetUsersInfoByFleetId(System.Int32)">
            <summary>
            Returns users info by fleet id. 
            </summary>
            <param name="fleetId"></param>
            <returns>DataSet [UserId],[UserName],[Password],[DriverLicense],[FirstName],[LastName],[Contact],[OrganizationId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.FleetUsers.GetUnassignedUsersInfoByFleetId(System.Int32)">
            <summary>
            Retieves all users (except HGIAdmin user group) unassigned to the fleet .
            </summary>
            <param name="fleetId"></param>
            <returns>DataSet [UserId],[UserName],[Password],[DriverLicense],[FirstName],[LastName],[Contact],[OrganizationId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.FleetUsers.RecordCount">
            <summary>
            Retrieves record count from vlfFleetUsers table.
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.DriverAssignment">
            <summary>
            Provides interfaces to vlfDriverAssignment table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.AddDriverAssignment(System.String,System.String,System.String)">
            <summary>
            Add new driver assignment.
            </summary>
            <param name="personId"></param>
            <param name="licensePlate"></param>
            <param name="description"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.AddDriverAssignment(System.Int32,System.Int64,System.Int32,System.String)">
            <summary>
            Add new driver assignment + history
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="driverId"></param>
            <param name="description"></param>
            <returns>rows</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.AddDriverAssignment(System.Int32,System.Int64,System.Int32,System.DateTime,System.String)">
            <summary>
            Add new driver assignment + history
            </summary>
            <param name="userId"></param>
            <param name="vehicleId"></param>
            <param name="driverId"></param>
            <param name="description"></param>
            <returns>rows</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with license plate alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.DeleteDriverAssignment(System.Int32,System.Int64,System.Int32,System.String)">
            <summary>
            Delete existing driver assignment.
            </summary>
            <param name="userId"></param> 
            <param name="vehicleId"></param> 
            <param name="driverId"></param> 
            <param name="description"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.DeleteDriverAssignments(System.Int32,System.Int32,System.String)">
            <summary>
            Delete all driver assignments.
            </summary>
            <param name="userId"></param> 
            <param name="driverId"></param> 
            <param name="description"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.DeleteDriverAssignments(System.String)">
            <summary>
            Delete all driver assignments.
            </summary>
            <param name="personId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.GetDriverAssignmentForVehicle(System.Int64)">
            <summary>
            Returns driver assignment by vehicle Id
            </summary>
            <param name="vehicleId"></param>
            <returns>DataSet [AssignedDateTime],[PersonId],[DriverLicense],[FirstName],[LastName],[Description]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.GetDriverAssignments(System.Int32)">
            <summary>
            Returns all driver assignments by driver Id. 
            </summary>
            <param name="driverId"></param>
            <returns>DataSet [AssignedDateTime],[PersonId],[LicensePlate],[DriverLicense],[FirstName],[LastName],[Description]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.GetDriverAssignment(System.String)">
            <summary>
            Returns all driver assignments by lic. plate
            </summary>
            <param name="licensePlate"></param>
            <returns>DataSet [AssignedDateTime],[PersonId],[LicensePlate],[DriverLicense],[FirstName],[LastName],[Description]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.GetUnassignedDriversForOrganization(System.Int32)">
            <summary>
            Retrieves all unassigned drivers per organization
            </summary>
            <returns>
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.GetAssignedDriversForOrganization(System.Int32)">
            <summary>
            Retrieves all assigned drivers per organization
            </summary>
            <returns>
            </returns>
            <param name="organizationId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.DriverAssignment.DeleteDriverAssignment(System.String)">
            <summary>
            Delete existing driver assignment by license plate.
            </summary>
            <param name="licensePlate"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.VehicleAssignmentHst">
            <summary>
            Provides interfaces to vlfVehicleAssignment table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignmentHst.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignmentHst.AddVehicleAssignment(VLF.CLS.Def.Structures.VehicAssign)">
            <summary>
            Adds vehicle assignment status to the history.
            </summary>
            <param name="vehicAssign"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with same datetime alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignmentHst.UpdateVehicleAssignment(System.Int32)">
            <summary>
            Sets vehicle assignments "DeletedDateTime" field
            </summary>
            <param name="boxId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if vehicle assignment with same datetime alredy exists</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignmentHst.GetAllVehiclesAssignmentsBy(System.String,System.String,System.String)">
            <summary>
            Gets vehicle assignment by ...
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="orderBy"></param>
            <returns>DataSet [AssignedDateTime],[LicensePlate],[BoxId],[VehicleId],[DeletedDateTime]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignmentHst.GetAllVehiclesAssignmentsBy(System.String,System.Int64,System.String)">
            <summary>
            Gets vehicle assignment by ...
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="orderBy"></param>
            <returns>DataSet [AssignedDateTime],[LicensePlate],[BoxId],[VehicleId],[DeletedDateTime]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignmentHst.GetAllVehiclesAssignmentsBy(System.String,System.String,System.DateTime,System.DateTime,System.String)">
            <summary>
            Gets vehicle assignment by ...
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <param name="orderBy"></param>
            <returns>DataSet [AssignedDateTime],[LicensePlate],[BoxId],[VehicleId],[DeletedDateTime]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignmentHst.GetAllVehiclesAssignmentsBy(System.String,System.Int64,System.DateTime,System.DateTime,System.String)">
            <summary>
            Gets vehicle assignment by ...
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <param name="dtFrom"></param>
            <param name="dtTo"></param>
            <param name="orderBy"></param>
            <returns>DataSet [AssignedDateTime],[LicensePlate],[BoxId],[VehicleId],[DeletedDateTime]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignmentHst.DeleteAllVehicleAssignmentsForBox(System.Int32)">
            <summary>
            Deletes all vehicle assignments from the history related to the box
            </summary>
            <param name="boxId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.VehicleAssignmentHst.DeleteAllVehicleAssignmentsForVehicle(System.Int64)">
            <summary>
            Deletes all vehicle assignments from the history related to the vehicle
            </summary>
            <param name="vehicleId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.UserGroupAssignment">
            <summary>
            Provides interfaces to vlfUserGroupAssignment table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.AssignUserToGroup(System.Int32,System.Int16)">
            <summary>
            Add new permission to user group.
            </summary>
            <param name="userId"></param>
            <param name="userGroupId"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user alredy exists in the group</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.DeleteGroupAssignment(System.Int16)">
            <summary>
            Deletes existing user group assignment.
            </summary>
            <param name="userGroupId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if group does not exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.DeleteUserAssignment(System.Int32,System.Int16)">
            <summary>
            Deletes existing user assignment.
            </summary>
            <param name="userId"></param> 
            <param name="userGroupId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user or group does not exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.DeleteUserAssignments(System.Int32)">
            <summary>
            Deletes existing user assignment from all user groups.
            </summary>
            <param name="userId"></param> 
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user or group does not exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.GetUsersByUserGroup(System.Int32,System.Int16)">
            <summary>
            Returns all user assigned to the group. 
            </summary>
            <param name="currUserId"></param>
            <param name="userGroupId"></param>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.IsUserAssignedToUserGroup(System.Int32,System.Int16)">
            <summary>
            Checks if user assigned to the group
            </summary>
            <param name="userId"></param>
            <param name="userGroupId"></param>
            <returns>true/false</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.GetAllUnassignedUsersToUserGroup(System.Int16,System.Int32)">
            <summary>
            Returns all user assigned to the group in current organization. 
            </summary>
            <param name="userGroupId"></param>
            <param name="organizationId"></param>
            <returns>DataSet [UserId],[UserName],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.GetUsersArrayByGroup(System.Int32,System.Int16)">
            <summary>
            Returns all user assigned to the group. 
            </summary>
            <param name="currUserId"></param>
            <param name="userGroupId"></param>
            <returns>ArrayList of users ids assigned to the group</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.GetAssignedGroupsByUser(System.Int32)">
            <summary>
            Returns all groups included this user. 
            </summary>
            <param name="userId"></param>
            <returns>DataSet [UserGroupId],[UserGroupName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.GetGroupsArrayByUser(System.Int32)">
            <summary>
            Returns all groups included this user. 
            </summary>
            <param name="userId"></param>
            <returns>ArrayList of groups ids included this user</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserGroupAssignment.GetAllUserGroupsByOrganizationName(System.String)">
            <summary>
            Returns all groups included users from current organization. 
            </summary>
            <param name="organizationName"></param>
            <returns>DataSet [UserGroupId],[UserGroupName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Fleet">
            <summary>
            Provides interfaces to vlfFleet table
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Fleet.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Fleet.AddFleet(System.String,System.Int32,System.String)">
            <summary>
            Add new fleet.
            </summary>
            <param name="fleetName"></param>
            <param name="organizationId"></param>
            <param name="description"></param>
            <returns>int next fleet id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if fleet alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Fleet.UpdateInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Update fleet information.
            </summary>
            <param name="fleetId"></param>
            <param name="fleetName"></param>
            <param name="organizationId"></param>
            <param name="description"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if fleet alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Fleet.DeleteFleetByFleetId(System.Int32)">
            <summary>
            Delete existing fleet.
            </summary>
            <returns>rows affected</returns>
            <param name="fleetId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if fleet id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Fleet.DeleteOrganizationFleets(System.Int32)">
            <summary>
            Delete all existing fleets by org id
            </summary>
            <returns>rows affected</returns>
            <param name="fleetId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if fleet id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Fleet.GetFleetInfoByFleetId(System.Int32)">
            <summary>
            Retrieves Fleet info
            </summary>
            <param name="fleetId"></param> 
            <returns>DataSet [FleetId],[FleetName],[FleetDescription],[OrganizationId],[OrganizationName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Fleet.GetFleetsInfoByOrganizationName(System.String)">
            <summary>
            Retrieves Fleets info
            </summary>
            <returns>DataSet [FleetId],[FleetName],[Description],[OrganizationId],[OrganizationName]</returns>
            <param name="organizationName"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Fleet.GetFleetsByOrganizationId(System.Int32)">
            <summary>
            Retrieves All Fleets id for entire organization
            </summary>
            <param name="orgId" type="int">Organization ID</param>
            <returns>DataSet [FleetId]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Fleet.GetFleetIdByFleetName(System.Int32,System.String)">
            <summary>
            Returns fleet id by fleet name.
            </summary>
            <param name="organizationId"></param> 
            <param name="fleetName"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Fleet.GetFleetNameByFleetId(System.Int32)">
            <summary>
            Returns fleet name by fleet Id. 	
            </summary>
            <param name="fleetId"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.ExceptionReport">
            <summary>
            Generates reporting functionality
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.ExceptionReport.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.ExceptionReport.FillReport(System.Int32,System.Int16,System.DateTime,System.DateTime,System.Int32,System.Data.DataSet,System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generate report
            </summary>
            <param name="sosLimit"></param>
            <param name="fromTD"></param>
            <param name="toTD"></param>
            <param name="noDoorSnsHrs"></param>
            <param name="rowInData"></param>
            <param name="vehicleId"></param>
            <param name="vehicleDescription"></param>
            <param name="includeTar"></param>
            <param name="includeMobilize"></param>
            <param name="fifteenSecDoorSns"></param>
            <param name="leash50"></param>
            <param name="mainAndBackupBatterySns"></param>
            <param name="tamperSns"></param>
            <param name="anyPanicSns"></param>
            <param name="threeKeypadAttemptsSns"></param>
            <param name="altGPSAntennaSns"></param>
            <param name="controllerStatus"></param>
            <param name="leashBrokenSns"></param>
            <param name="userId"></param>
            <param name="driverDoor"></param>
            <param name="passengerDoor"></param>
            <param name="sideHopperDoor"></param>
            <param name="rearHopperDoor"></param>
            <param name="includeCurrentTar"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.ExceptionReport.AddReportRow(System.String,System.DateTime,System.String,System.String,System.String,System.Int32,System.Int64)">
            <summary>
            Add new row to result report
            </summary>
            <param name="type"></param>
            <param name="dateTime"></param>
            <param name="vehicleDescription"></param>
            <param name="remarks1"></param>
            <param name="remarks2"></param>
            <param name="boxId"></param>
            <param name="vehicleId"></param>
        </member>
        <member name="M:VLF.DAS.DB.ExceptionReport.GetLastTarOnMessageDateTimeFromHistory(System.Int32,System.Int32)">
            <summary>
            Retrieves last TAR mode On OriginDateTime
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <returns>Last TAR mode On OriginDateTime, otherwise returns DateTime.Min </returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.ExceptionReport.GetCurrentTarOnInfo(System.Int32,System.Int32)">
            <summary>
            Retrieves crrent TAR ON Information
            </summary>
            <param name="userId"></param>
            <param name="boxId"></param>
            <returns>DataSet [VehicleId],[BoxId],[LastCommunicatedDateTime],[TarOnDT]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.ExceptionReport.ReportDetailes">
            <summary>
            Returns report 
            </summary>
        </member>
        <member name="T:VLF.DAS.DB.Configuration">
            <summary>
            Provides interfaces to vlfConfiguration table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.GetConfigurationModuleTypesInfo(System.Int16,VLF.CLS.Def.Enums.ConfigurationModuleState)">
            <summary>
            Retrieves configuration module types info
            </summary>
            <param name="typeId"></param>
            <param name="configurationModuleState"></param>
            <returns>DataSet [ModuleId],[ModuleName],[PSW],[IPAddress],[UserName],[Enabled],[MachineName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.GetConfigurationModuleTypeId(System.String)">
            <summary>
            Retrieves configuration module type id
            </summary>
            <param name="moduleTypeName"></param>
            <returns>module id</returns>
            <remarks>If module does not exist, return VLF.CLS.Def.Const.unassignedShortValue,
            otherwise return module id</remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.GetConfigurationValue(System.Int16,System.Int16,System.String)">
            <summary>
            Retrieves configuration value
            </summary>
            <param name="moduleId"></param>
            <param name="cfgGroupId"></param>
            <param name="keyName"></param>
            <returns>string [KeyValue]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.GetModuleConfiguration(System.Int16)">
            <summary>
            Retrieves module configuration
            </summary>
            <param name="moduleId"></param>
            <returns>DataSet [CfgGroupId],[CfgGroupName],[KeyName],[KeyValue]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.GetModuleConfigurationStructure(System.Int16)">
            <summary>
            Retrieves module configuration structure
            </summary>
            <param name="typeId"></param>
            <returns>DataSet [CfgGroupId],[KeyName],[KeyValue],[CfgGroupName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.GetConfigurationModuleTypesInfo">
            <summary>
            Retrieves configuration module types
            </summary>
            <returns>DataSet [TypeId],[TypeName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.GetComputerModulesInfo(System.Int16,System.String)">
            <summary>
            Retrieves computer modules information
            </summary>
            <param name="moduleTypeId"></param>
            <param name="computerIp"></param>
            <returns>DataSet [ModuleId],[ModuleName],[Enabled],[TypeId],[TypeName]</returns>
            <remarks>If moduleTypeId==VLF.CLS.Def.Const.unassignedIntValue, 
            then doesn't include moduleTypeId into the filter </remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.AddModule(System.Int16,System.String,System.Boolean)">
            <summary>
            Add new module.
            </summary>
            <param name="typeId"></param>
            <param name="moduleName"></param>
            <param name="enabled"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.UpdateModuleStatus(System.Int16,System.Boolean)">
            <summary>
            Update module status.
            </summary>
            <param name="moduleId"></param>
            <param name="enable"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if module does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.AddModuleSettings(System.Int16,System.Int16,System.String,System.String)">
            <summary>
            Add new module.
            </summary>
            <param name="moduleId"></param>
            <param name="cfgGroupId"></param>
            <param name="keyName"></param>
            <param name="keyValue"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if module already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.GetModuleTypeGroups(System.Int16)">
            <summary>
            Retrieves module type groups.
            </summary>
            <param name="typeId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <returns>DataSet [CfgGroupId],[CfgGroupName]</returns>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.UpdateModuleSettings(System.Int16,System.Int16,System.String,System.String)">
            <summary>
            Update module settings.
            </summary>
            <param name="moduleId"></param>
            <param name="cfgGroupId"></param>
            <param name="keyName"></param>
            <param name="keyValue"></param>
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if module does not exist.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.DeleteModule(System.Int16)">
            <summary>
            Delete module.
            </summary>
            <param name="moduleId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.DeleteModuleSettings(System.Int16)">
            <summary>
            Delete module settings.
            </summary>
            <param name="moduleId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.GetMaxModuleId">
            <summary>
            Retrieves max module id
            </summary>
            <returns>max module id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Configuration.SetDayLightSaving(System.Boolean)">
            <summary>
            Set DayLight Savings.
            </summary>
            <returns>void</returns>
            <param name="dayLightSaving"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.UserLogin">
            <summary>
            Provides interfaces to vlfUserLogin table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.UserLogin.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.UserLogin.AddUserLogin(System.Int32,System.DateTime,System.String)">
            <summary>
            Adds new user login
            </summary>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user with this datetime already exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserLogin.DeleteUserLogins(System.Int32)">
            <summary>
            Deletes user logins.
            </summary>
            <param name="userId"></param>
            <returns>rows affected</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserLogin.GetUserLogins(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Retrieves user logins.
            </summary>
            <param name="userId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns>DataSet [LoginId],[UserId],[LoginDateTime],[IP],
            [UserName],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserLogin.GetUserLastLogin(System.Int32,System.Int32)">
            <summary>
            Retrieves user logins.
            </summary>
            <param name="userId"></param>
            <param name="loginUserId"></param>
            <returns>DataSet [LoginId],[UserId],[LoginDateTime],[IP],
            [UserName],[FirstName],[LastName]</returns>
            <remarks>
            1. Retrieves info about loginUserId
            2. DateTime changed according to userId (user requested this info)
            </remarks>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.UserLogin.GetOrganizationUserLogins(System.Int32,System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Retrieves user logins.
            </summary>
            <param name="userId"></param>
            <param name="organizationId"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns>DataSet [LoginId],[UserId],[LoginDateTime],[IP],
            [UserName],[FirstName],[LastName]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.TrustedPersonInfo">
            <summary>
            vlfTrustedPersonInfo table structure
            </summary>
        </member>
        <member name="T:VLF.DAS.DB.TrustedPerson">
            <summary>
            Provides interface to vlfTrustedPerson table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.AddTrustedPerson(VLF.DAS.DB.TrustedPersonInfo,System.String)">
            <summary>
            Add new TrustedPerson.
            </summary>
            <param name="driverLicense"></param>
            <param name="userInfo"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.UpdateInfo(VLF.DAS.DB.TrustedPersonInfo,System.String)">
            <summary>
            Update trusted person information.
            </summary>
            <returns>void</returns>
            <param name="userInfo"></param>
            <param name="driverLicense"></param>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if user driver license or user name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown DASException in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.DeleteTrustedPersonByDriverLicense(System.String)">
            <summary>
            Deletes existing user.
            </summary>
            <returns>void</returns>
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user with driver license does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.DeleteTrustedPersonsByUserId(System.Int32)">
            <summary>
            Delete existing user.
            </summary>
            <returns>Rows affected</returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if user with user id not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.DeleteTrustedPersonsByPersonId(System.String)">
            <summary>
            Delete trusted person by person id
            </summary>
            <param name="personId"></param>
            <returns>Rows affected</returns>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetTrustedPersonsInfoByUserId(System.Int32)">
            <summary>
            Retrieves trusted persons info
            </summary>
            <returns>DataSet of all trusted persons related to specific user id</returns>
            <param name="userId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetTrustedPersonInfoByDriverLicense(System.String)">
            <summary>
            Retrieves trusted person info
            </summary>
            <returns>DataSet with trusted person iformation</returns>
            <param name="driverLicense"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetUserIdByDriverLicense(System.String)">
            <summary>
            Returns user id by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>int</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetFirstNameByDriverLicense(System.String)">
            <summary>
            Returns first name by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetLastNameByDriverLicense(System.String)">
            <summary>
            Returns last name by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetContactInfoByDriverLicense(System.String)">
            <summary>
            Returns contact info by driver license. 	
            </summary>
            <param name="driverLicense"></param> 
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetDriverLicensesByUserId(System.Int32)">
            <summary>
            Returns driver license by user id. 	
            </summary>
            <param name="userId"></param> 
            <returns>ArrayList of all drivers license related to this user id</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.SetUserIdByDriverLicense(System.Int32,System.String)">
            <summary>
            Updates user id by driver license
            </summary>
            <param name="userId"></param> 
            <param name="driverLicense"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.SetFirstNameByDriverLicense(System.String,System.String)">
            <summary>
            Updates first name by driver license
            </summary>
            <param name="firstName"></param> 
            <param name="driverLicense"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.SetLastNameByDriverLicense(System.String,System.String)">
            <summary>
            Updates last name by driver license
            </summary>
            <param name="lastName"></param> 
            <param name="driverLicense"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.SetContactInfoByDriverLicense(System.String,System.String)">
            <summary>
            Updates contact info by driver license
            </summary>
            <param name="contactInfo"></param> 
            <param name="driverLicense"></param> 
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetUserInfoFieldBy(System.String,System.String,System.Int32)">
            <summary>
            Retrieves user info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="resultFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetUserInfoFieldBy(System.String,System.String,System.String)">
            <summary>
            Retrieves user info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="resultFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>object</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetUserInfoBy(System.String,System.Int32)">
            <summary>
            Retrieves user info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>DataSet</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.GetUserInfoBy(System.String,System.String)">
            <summary>
            Retrieves user info
            </summary>
            <param name="searchFieldName"></param> 
            <param name="searchFieldValue"></param> 
            <returns>DataSet</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.SetFieldByDriverLicense(System.String,System.String,System.String)">
            <summary>
            Updates field by driver license
            </summary>
            <param name="updateFieldName"></param>
            <param name="updateFieldValue"></param>
            <param name="driverLicense"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="M:VLF.DAS.DB.TrustedPerson.SetFieldByDriverLicense(System.String,System.Int32,System.String)">
            <summary>
            Updates field by driver license
            </summary>
            <param name="updateFieldName"></param>
            <param name="updateFieldValue"></param>
            <param name="driverLicense"></param>
            <returns>void</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
            <remarks>Not implemented</remarks>
        </member>
        <member name="T:VLF.DAS.DB.Preference">
            <summary>
            Provides interface to vlfPersonInfo table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Preference.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Preference.AddPreference(System.String,System.String)">
            <summary>
            Add new preference.
            </summary>
            <param name="preferenceName"></param>
            <param name="preferenceRule"></param>
            <returns>int next preference id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if preference alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASAppInvalidValueException">Thrown in case of incorrect value.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Preference.DeletePreferenceByPreferenceName(System.String)">
            <summary>
            Deletes existing preference.
            </summary>
            <returns>rows affected</returns>
            <param name="preferenceName"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if preference does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Preference.DeletePreferenceByPreferenceId(System.Int32)">
            <summary>
            Deletes existing preference.
            </summary>
            <returns>rows affected</returns>
            <param name="preferenceId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if preference id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Preference.GetPreferenceInfo(System.Int32)">
            <summary>
            Retrieves Preference info
            </summary>
            <returns>DataSet [PreferenceId], [PreferenceName],[PreferenceRule]</returns>
            <param name="preferenceId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.Output">
            <summary>
            Provides interfaces to vlfOutput table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.Output.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.Output.AddOutput(System.String,System.String)">
            <summary>
            Add new output.
            </summary>
            <param name="outputName"></param>
            <param name="outputAction"></param>
            <returns>int next output id</returns>
            <exception cref="T:VLF.ERR.DASAppDataAlreadyExistsException">Thrown if output name alredy exists.</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Output.DeleteOutputByName(System.String)">
            <summary>
            Deletes existing output.
            </summary>
            <returns>rows affected</returns>
            <param name="outputName"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if output name does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Output.DeleteOutputById(System.Int16)">
            <summary>
            Deletes existing output.
            </summary>
            <returns>rows affected</returns>
            <param name="outputId"></param> 
            <exception cref="T:VLF.ERR.DASAppResultNotFoundException">Thrown if output id does not exist</exception>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.Output.GetOutputDescription(System.String,System.Data.DataTable)">
            <summary>
            Returns formated output status
            </summary>
            <param name="customProp"></param>
            <param name="tblUserDefinedOutputs"></param>
            <returns>string</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="T:VLF.DAS.DB.BoxProtocolTypeCmdOutType">
            <summary>
            Provides interfaces to vlfBoxProtocolTypeCmdOutType table.
            </summary>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeCmdOutType.#ctor(VLF.DAS.SQLExecuter)">
            <summary>
            Constructor
            </summary>
            <param name="sqlExec"></param>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeCmdOutType.AddRecord(System.Int16,System.Int16,System.String,System.Int16,System.Int16)">
            <summary>
            Add new row that connect box protocol type with cmd out type
            </summary>
            <remarks>
            If commAddressTypeId not applicable set VLF.CLS.Def.Const.unassignedIntValue
            </remarks>
            <param name="boxCmdOutTypeId"></param>
            <param name="boxProtocolTypeId"></param>
            <param name="rules"></param>
            <param name="commAddressTypeId"></param>
            <param name="cmdOutTypeLen"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeCmdOutType.DeleteRecordByBoxCmdOutType(System.Int16)">
            <summary>
            Delete exist box command out type by Id
            </summary>
            <param name="boxCmdOutTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeCmdOutType.DeleteRecordByBoxProtocolType(System.Int16)">
            <summary>
            Delete exist box protocol type by Id
            </summary>
            <param name="boxProtocolTypeId"></param> 
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeCmdOutType.DeleteRecordByBoxProtocolTypeCmdOutType(System.Int16,System.Int16)">
            <summary>
            Delete exist box protocol type command out type.
            </summary>
            <param name="boxCmdOutTypeId"></param>
            <param name="boxProtocolTypeId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeCmdOutType.GetCommAddressTypeIdByProtocolTypeCmdOutTypeId(System.Int16,System.Int16)">
            <summary>
            Retrieves CommAddressTypeId by ProtocolType and CmdOutTypeId
            </summary>
            <param name="boxProtocolTypeId"></param>
            <param name="boxCmdOutTypeId"></param>
            <returns>CommAddressTypeId</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeCmdOutType.GetAllSupportedCommands(System.Int32,System.Int32)">
            <summary>
            Retrieves all supported commands by protocol type and user id.
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <returns>DataSet [BoxCmdOutTypeId],[BoxCmdOutTypeName],[Rules],[BoxProtocolTypeId],[BoxProtocolTypeName],[ChPriority]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeCmdOutType.GetCommandProtocolTypesInfo(System.Int32,System.Int32,System.Int16)">
            <summary>
            Retrieves all supported protocol types for current command
            </summary>
            <returns>DataSet [BoxProtocolTypeId],[BoxProtocolTypeName],[ChPriority]</returns>
            <param name="boxId"></param>
            <param name="userId"></param>
            <param name="commandTypeId"></param>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="M:VLF.DAS.DB.BoxProtocolTypeCmdOutType.GetOutputProtocolTypesInfo(System.Int32,System.Int32,System.Int16)">
            <summary>
            Retrieves all supported protocol types for current output
            </summary>
            <param name="boxId"></param>
            <param name="userId"></param>
            <param name="outputId"></param>
            <returns>DataSet [BoxProtocolTypeId],[BoxProtocolTypeName],[ChPriority]</returns>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
        <member name="P:VLF.DAS.DB.BoxProtocolTypeCmdOutType.RecordCount">
            <summary>
            Retrieves record count from vlfBoxProtocolTypeCmdOutType table.
            </summary>
            <exception cref="T:VLF.ERR.DASDbConnectionClosed">Thrown if connection to database has been closed.</exception>
            <exception cref="T:VLF.ERR.DASException">Thrown in all other exception cases.</exception>
        </member>
    </members>
</doc>

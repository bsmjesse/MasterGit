using System;
using System.Web;
using System.Collections;
using System.Web.Services;
using System.Web.Services.Protocols;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;
using System.Configuration;
using System.Diagnostics;
using System.Data;
using System.IO;
using System.Resources;
using System.Globalization;
using VLF.CLS.Interfaces;
using VLF.ERRSecurity;
using VLF.CLS;
using VLF.CLS.Def;
using VLF.Reports;
using VLF.DAS.Logic;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using Syncfusion.XlsIO;
using Syncfusion.Pdf;
//using Syncfusion.DocIO;
//using Syncfusion.DocIO.DLS;
using ionic.utils.zip;



namespace VLF.ASI.Interfaces
{

    [WebService(Namespace = "http://www.sentinelfm.com")]

    public class CrystalRpt : System.Web.Services.WebService
    {
        string ReportsOutputPathURL = "";
        string ReportsOutputPath = "";
        string ReportsDataSetPath = "";
        double UnitOfMes = 0.6214;
        int DayLightSaving = 0;
        int TimeZone = 0;
        string strPath = "";
        bool RequestOverflowed = false;


        public CrystalRpt()
        {
            //Uncomment the following line if using designed components 
            InitializeComponent();

            ReportsOutputPathURL = ConfigurationManager.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = ConfigurationManager.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = ConfigurationManager.AppSettings["ReportsDataSetPath"];
         }

        [WebMethod]
        public int TripDetailsReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref bool requestOverflowed, ref bool outMaxOverflowed, ref string ReportPath)
        {
            try
            {


                // Authenticate 
                LoginManager.GetInstance().SecurityCheck(UserID, SID);

                GetUserPreferences(UserID);

                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetTripDetails(UserID, xmlParams, lang, ref requestOverflowed, ref outMaxOverflowed);

                if (dsCrystal == null)
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();


                string prm8 = Util.PairFindValue(ReportTemplate.RpDetailedTripEighthParamName, xmlParams); //Include Report Summary

                string sPath = ""; 
                if (Convert.ToBoolean(prm8))
                  sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_TripReportData.rpt";
                else
                  sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_TripReportData_NoSummary.rpt";

                oRpt.Load(@sPath);
                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_TripReportData.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                string DistanceType = FindExistingPreference();



                crParameterDiscreteValue.Value = DistanceType;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["DistanceType"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                if (Convert.ToBoolean(prm8))
                {

                   string TripSummary = "";
                   string TripStart = "";
                   string TripEnd = "";

                   string Sensor = Util.PairFindValue(ReportTemplate.RpDetailedTripTenthParamName, xmlParams);


                   switch (Sensor)
                   {
                      case "3":
                         TripSummary = Resources.Const.TripSummary;
                         TripStart = Resources.Const.TripStart;
                         TripEnd = Resources.Const.TripEnd;
                         break;
                      case "8":
                         TripSummary = Resources.Const.TripSummaryPTO;
                         TripStart = Resources.Const.TripStartPTO;
                         TripEnd = Resources.Const.TripEndPTO;
                         break;
                      case "11":
                         TripSummary = Resources.Const.TripSummaryTP;
                         TripStart = Resources.Const.TripStartTP;
                         TripEnd = Resources.Const.TripEndTP;
                         break;
                      default:
                         TripSummary = Resources.Const.TripSummary;
                         TripStart = Resources.Const.TripStart;
                         TripEnd = Resources.Const.TripEnd;
                         break;
                   }


                   crParameterDiscreteValue.Value = TripSummary;
                   crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                   crParameterFieldDefinition = crParameterFieldDefinitions["TripSummary"];
                   crParameterValues = crParameterFieldDefinition.CurrentValues;
                   crParameterValues.Add(crParameterDiscreteValue);
                   crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

                   crParameterDiscreteValue.Value = TripStart;
                   crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                   crParameterFieldDefinition = crParameterFieldDefinitions["TripStart"];
                   crParameterValues = crParameterFieldDefinition.CurrentValues;
                   crParameterValues.Add(crParameterDiscreteValue);
                   crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                   crParameterDiscreteValue.Value = TripEnd;
                   crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                   crParameterFieldDefinition = crParameterFieldDefinitions["TripEnd"];
                   crParameterValues = crParameterFieldDefinition.CurrentValues;
                   crParameterValues.Add(crParameterDiscreteValue);
                   crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

                }


                string ReportName = "rptTripData" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;

                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;


            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }

        }

        [WebMethod]
        public int TripSummaryReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {


            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);

            GetUserPreferences(UserID);

            string strTotal = "";
            TimeSpan totalTrip = new TimeSpan(0);
            TimeSpan totalIndling = new TimeSpan(0);
            TimeSpan totalStop = new TimeSpan(0);
            Double totalCost = 0;


            try
            {
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetTripSummary(UserID, xmlParams, lang, ref totalTrip, ref totalIndling, ref totalStop, ref totalCost, ref requestOverflowed, ref outMaxOverflowed);

                if (dsCrystal == null)
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_TripSummary.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_TripActivity.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                string DistanceType = FindExistingPreference();



                crParameterDiscreteValue.Value = DistanceType;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["DistanceType"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);




                strTotal = "";
                if (totalTrip.Days > 0)
                {
                    strTotal += totalTrip.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalTrip.Ticks - totalTrip.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalTrip.ToString();
                }






                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotTripTime"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                strTotal = "";
                if (totalIndling.Days > 0)
                {
                    strTotal += totalIndling.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalIndling.Ticks - totalIndling.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalIndling.ToString();
                }




                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotIdling"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                strTotal = "";

                if (totalStop.Days > 0)
                {
                    strTotal += totalStop.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalStop.Ticks - totalStop.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalStop.ToString();
                }


                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotStopTime"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = totalCost.ToString();
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotCost"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                string Sensor = Util.PairFindValue(ReportTemplate.RpTripFifthParamName, xmlParams);
                string TripTitle = "";

                switch (Sensor)
                {
                   case "3":
                      TripTitle = Resources.Const.TripType_Trip;
                      break;
                   case "8":
                      TripTitle = Resources.Const.TripType_PTO ;
                      break;
                   case "11":
                      TripTitle = Resources.Const.TripType_TP;
                      break;
                   default:
                      TripTitle = Resources.Const.TripType_Trip;
                      break;
                }


                crParameterDiscreteValue.Value = TripTitle;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TripType"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                string ReportName = "rptTripSummaryData" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int TripFleetSummaryReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);

            GetUserPreferences(UserID);

            string strTotal = "";

            TimeSpan totalTrip = new TimeSpan(0);
            TimeSpan totalIndling = new TimeSpan(0);
            TimeSpan totalStop = new TimeSpan(0);
            Double totalCost = 0;


            try
            {
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetFleetTripSummary(UserID, xmlParams, lang, ref totalTrip, ref totalIndling, ref totalStop, ref totalCost, ref requestOverflowed, ref outMaxOverflowed);

                if (dsCrystal == null)
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_TripSummary.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_TripActivity.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                string DistanceType = FindExistingPreference();



                crParameterDiscreteValue.Value = DistanceType;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["DistanceType"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);




                strTotal = "";
                if (totalTrip.Days > 0)
                {
                    strTotal += totalTrip.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalTrip.Ticks - totalTrip.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalTrip.ToString();
                }






                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotTripTime"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                strTotal = "";
                if (totalIndling.Days > 0)
                {
                    strTotal += totalIndling.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalIndling.Ticks - totalIndling.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalIndling.ToString();
                }




                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotIdling"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                strTotal = "";

                if (totalStop.Days > 0)
                {
                    strTotal += totalStop.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalStop.Ticks - totalStop.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalStop.ToString();
                }


                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotStopTime"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = totalCost.ToString();
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotCost"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                string ReportName = "rptTripSummaryData" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int TripFleetDetailsReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            try
            {
                // Authenticate 
                LoginManager.GetInstance().SecurityCheck(UserID, SID);

                GetUserPreferences(UserID);

                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetTripFleetDetails(UserID, xmlParams, lang, ref requestOverflowed, ref outMaxOverflowed);

                if (dsCrystal == null)
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_TripReportData.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_TripReportData.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                string DistanceType = FindExistingPreference();



                crParameterDiscreteValue.Value = DistanceType;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["DistanceType"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                string ReportName = "rptTripData" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int TripFleetDetailsReportOneByOne(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "TripFleetDetailsReportOneByOne start"));
            try
            {
                // Authenticate 
                LoginManager.GetInstance().SecurityCheck(UserID, SID);

                ReportsOutputPathURL = ConfigurationManager.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationManager.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationManager.AppSettings["ReportsDataSetPath"];

                string prm1 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripFirstParamName, xmlParams);
                string prm2 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripSecondParamName, xmlParams);
                string prm3 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripThirdParamName, xmlParams);
                string prm4 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripFourthParamName, xmlParams);
                string prm5 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripFifthParamName, xmlParams);
                string prm6 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripSixthParamName, xmlParams);
                string prm7 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripSeventhParamName, xmlParams);
                string prm8 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripEighthParamName, xmlParams);
                string prm9 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripNinthParamName, xmlParams);
                string prm10 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripTenthParamName, xmlParams);

                if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null || prm4 == null ||
                    prm5 == null || prm6 == null || prm7 == null || prm8 == null || prm9 == null)
                {
                    // empty result
                    return (int)InterfaceError.InvalidParameter;
                }

                VLF.DAS.Logic.Report detailedTrip = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());

                int totalSqlRecords = 0;
                int outMaxRecords = 0;
                string fromDateTime = prm2;
                string toDateTime = prm3;
                bool includeStreetAddress = Convert.ToBoolean(prm4);
                bool includeSensors = Convert.ToBoolean(prm5);
                bool includePosition = Convert.ToBoolean(prm6);
                bool includeIdleTime = Convert.ToBoolean(prm7);
                bool includeSummary = Convert.ToBoolean(prm8);
                bool showLastStoredPosition = Convert.ToBoolean(prm9);
                int sensorId = int.Parse(prm10);
                requestOverflowed = false;
                totalSqlRecords = 0;
                outMaxOverflowed = false;
                outMaxRecords = 0;
                int sqlMaxOutRecords = 1000; // = GetConfigParameter("ASI", (short)VLF.CLS.Def.Enums.ConfigurationGroups.Common, "Max Output Records", 1000);
                using (SystemConfig dbSystem = new SystemConfig(Application["ConnectionString"].ToString()))
                {
                    try
                    {
                        string keyValue = dbSystem.GetConfigParameter("ASI", (short)VLF.CLS.Def.Enums.ConfigurationGroups.Common, "Max Output Records");
                        sqlMaxOutRecords = int.Parse(keyValue);
                    }
                    catch
                    {
                    }
                }
                int currSqlRecords = 0;
                int outMaxFleetRecords = 0;
                outMaxOverflowed = false;
                DataSet dsCurrVehicleTrips = null;
                string[] licensePlateList = prm1.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "licensePlateList: " + licensePlateList.Length));

                // prepare crystal report dataset, schema.
                DataSet dsCrystal = new DataSet();
                strPath = ReportsDataSetPath;
                strPath = Server.MapPath(strPath) + @"\dstSimpleTripReportData.xsd";
                dsCrystal.ReadXmlSchema(strPath);
                // prepare crystal report template
                string reportTemplate = includeSummary ? "rpt_SimpleTripReportData.rpt" : "rpt_SimpleTripReportData_NoSummary.rpt";
                reportTemplate = Path.Combine(Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]), reportTemplate);
                // get distance type
                GetUserPreferences(UserID);
                string DistanceType = FindExistingPreference();
                // report format
                ExportFormatType exportFormatType = ExportFormatType.NoFormat;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        exportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        exportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        exportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }
                // prepare report parameters
                ReportState reportState = new ReportState();
                reportState.CrystalDataSet = dsCrystal;
                reportState.Lang = lang;
                reportState.ReportResourceManager = new ResourceManager(typeof(Resources.Report_TripReportData.aspx));
                reportState.ReportTemplateFile = reportTemplate;
                reportState.ReportParameters = new Dictionary<string, object>();
                reportState.ReportParameters.Add("FromDate", FromDate);
                reportState.ReportParameters.Add("ToDate", ToDate);
                reportState.ReportParameters.Add("DistanceType", DistanceType);


                string TripSummary = "";
                string TripStart = "";
                string TripEnd = "";
                switch (sensorId)
                {
                   case 3:
                      TripSummary = Resources.Const.TripSummary;
                      TripStart = Resources.Const.TripStart;
                      TripEnd = Resources.Const.TripEnd;
                      break;
                   case 8:
                      TripSummary = Resources.Const.TripSummaryPTO;
                      TripStart = Resources.Const.TripStartPTO;
                      TripEnd = Resources.Const.TripEndPTO;
                      break;
                   case 11:
                      TripSummary = Resources.Const.TripSummaryTP;
                      TripStart = Resources.Const.TripStartTP;
                      TripEnd = Resources.Const.TripEndTP;
                      break;
                   default:
                      TripSummary = Resources.Const.TripSummary;
                      TripStart = Resources.Const.TripStart;
                      TripEnd = Resources.Const.TripEnd;
                      break;
                }
                if (includeSummary)
                {
                    reportState.ReportParameters.Add("TripSummary", TripSummary);
                    reportState.ReportParameters.Add("TripStart", TripStart);
                    reportState.ReportParameters.Add("TripEnd", TripEnd);
                }

                reportState.FormatType = exportFormatType;
                reportState.PdfMerger = ConfigurationManager.AppSettings["PdfMerger"];
                string fullReportsOutputPath = Server.MapPath(ReportsOutputPath);
                string tempOutputPath = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
                Directory.CreateDirectory(tempOutputPath);
                reportState.MergedReportFile = Path.Combine(fullReportsOutputPath, string.Format("rptTripData-{0}{1}", Guid.NewGuid(), fileExt));

                // generate report one by one.
                TimeSpan retrievingTime = new TimeSpan();
                TimeSpan preparingTime = new TimeSpan();
                TimeSpan exportingTime = new TimeSpan();
                TimeSpan totalTime = new TimeSpan();
                GenerateVehicleTripReportDelegate reportDelegate = new GenerateVehicleTripReportDelegate(GenerateVehicleTripReport);
                IAsyncResult asyncResult = null;
                for (int i = 0; i < licensePlateList.Length; i++)
                {
                   string licensePlate = licensePlateList[i].Trim();
                   try
                   {
                      currSqlRecords = 0;
                      // 2. Retrieves trip info for every vehicle
                      DateTime t1 = DateTime.Now;
                      dsCurrVehicleTrips = detailedTrip.GetDetailedTripReport(licensePlate,
                                                                   fromDateTime,
                                                                   toDateTime,
                                                                   includeStreetAddress,
                                                                   includeSensors,
                                                                   includePosition,
                                                                   includeIdleTime,
                                                                   includeSummary,
                                                                   showLastStoredPosition,
                                                                   UserID, sensorId, lang,
                                                                   ref requestOverflowed,
                                                                   ref currSqlRecords,
                                                                   ref outMaxOverflowed,
                                                                   ref outMaxRecords);
                      DateTime t2 = DateTime.Now;
                      // check and wait previous report is done.
                      if (asyncResult != null)
                      {
                         if (!asyncResult.IsCompleted)
                         {
                            asyncResult.AsyncWaitHandle.WaitOne();
                         }
                      }
                      totalSqlRecords += currSqlRecords;
                      outMaxFleetRecords += outMaxRecords;
                      if (sqlMaxOutRecords < outMaxFleetRecords)
                         outMaxOverflowed = true;
                      if (requestOverflowed || outMaxOverflowed)
                      {
                         break;
                      }
                      DateTime t3 = DateTime.Now;
                      if (dsCurrVehicleTrips != null && currSqlRecords > 0)
                      {
                         dsCrystal.Clear();
                         if (includeSummary)
                         {
                            MergeTripSummaryTable(dsCurrVehicleTrips, dsCrystal, false);
                         }
                         dsCrystal.Merge(dsCurrVehicleTrips.Tables["TripReportVehicleInfo"], false, MissingSchemaAction.Ignore);
                         dsCrystal.Merge(dsCurrVehicleTrips.Tables["TripReportData"], false, MissingSchemaAction.Ignore);
                         // parameters
                         string outputFileName = string.Format("{0:d5}{1}", i + 1, fileExt);
                         reportState.OutputFile = Path.Combine(tempOutputPath, outputFileName);
                         asyncResult = reportDelegate.BeginInvoke(reportState, new AsyncCallback(GenerateVehicleTripReportDelegateCallBack), reportDelegate);
                      }
                      DateTime t4 = DateTime.Now;
                      TimeSpan ts1, ts2, ts3, ts4;
                      ts1 = t2.Subtract(t1);
                      ts2 = t3.Subtract(t2);
                      ts3 = t4.Subtract(t3);
                      ts4 = t4.Subtract(t1);
                      retrievingTime += ts1;
                      preparingTime += ts3;
                      exportingTime += ts2;
                      totalTime += ts4;
                      System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, 
                         String.Format("License Plate {0}: {1}, outMaxRecords {2}, currSqlRecords {3}, retrieve: {4:f2}, prepare: {5:f2}, export: {6:f2}, total: {7:f2}", 
                         i + 1, licensePlate, outMaxRecords, currSqlRecords, ts1.TotalSeconds, ts3.TotalSeconds, ts2.TotalSeconds, ts4.TotalSeconds)));
                   }
                   catch (Exception ex)
                   {
                      System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Error,
                         String.Format("Vehicle: [LP={0}] Error: {1}", licensePlate, ex.Message)));
                   }
                }
                DateTime t5 = DateTime.Now;
                // check and wait last report is done.
                if (asyncResult != null)
                {
                    if (!asyncResult.IsCompleted)
                    {
                        asyncResult.AsyncWaitHandle.WaitOne();
                    }
                }
                // merge report files.
                if (reportState.FormatType == ExportFormatType.PortableDocFormat)
                {
                    //MergePDF(reportState.PdfMerger, tempOutputPath, "*" + fileExt, reportState.MergedReportFile);
                    MergePDF(tempOutputPath, "*" + fileExt, reportState.MergedReportFile);                    
                }
                else if (reportState.FormatType == ExportFormatType.ExcelRecord)
                {
                    //reportState.MergedReportFile += ".zip";
                    //ZipReports(tempOutputPath, "*" + fileExt, reportState.MergedReportFile);
                    MergeExcel(tempOutputPath, "*" + fileExt, reportState.MergedReportFile, true);                    
                }
                else if (reportState.FormatType == ExportFormatType.WordForWindows)
                {
                    reportState.MergedReportFile += ".zip";
                    ZipReports(tempOutputPath, "*" + fileExt, reportState.MergedReportFile);
                    //MergeWord(tempOutputPath, "*" + fileExt, reportState.MergedReportFile);                    
                }
                DeleteDirectory(tempOutputPath);
                ReportPath = "http://" + ConfigurationManager.AppSettings["ServerIp"] + ConfigurationManager.AppSettings["ReportsRootPath"] + "/TmpReports/" + Path.GetFileName(reportState.MergedReportFile);
                DateTime t6 = DateTime.Now;
                TimeSpan ts5 = t6.Subtract(t5);
                totalTime += ts5;
                System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, 
                   String.Format("TripFleetDetailsReportOneByOne end: outMaxFleetRecords {0}, totalSqlRecords {1}, sqlMaxOutRecords {2}, retrieve: {3:f2}, prepare: {4:f2}, export: {5:f2}, merge: {6:f2}, total: {7:f2}", 
                   outMaxFleetRecords, totalSqlRecords, sqlMaxOutRecords, retrievingTime.TotalSeconds, preparingTime.TotalSeconds, exportingTime.TotalSeconds, ts5.TotalSeconds, totalTime.TotalSeconds)));
                return (int)InterfaceError.NoError;
            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }
        
        [WebMethod]
        public int TripFleetSummaryReportOneByOne(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "TripFleetSummaryReportOneByOne start"));
            try
            {
                // Authenticate 
                LoginManager.GetInstance().SecurityCheck(UserID, SID);

                ReportsOutputPathURL = ConfigurationManager.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationManager.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationManager.AppSettings["ReportsDataSetPath"];

                VLF.DAS.Logic.Report detailedTrip = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
                string prm1 = Util.PairFindValue(ReportTemplate.RpFleetTripFirstParamName, xmlParams);
                string prm2 = Util.PairFindValue(ReportTemplate.RpFleetTripSecondParamName, xmlParams);
                string prm3 = Util.PairFindValue(ReportTemplate.RpFleetTripThirdParamName, xmlParams);
                string prm4 = Util.PairFindValue(ReportTemplate.RpFleetTripFourthParamName, xmlParams);
                string prm5 = Util.PairFindValue(ReportTemplate.RpFleetTripFifthParamName, xmlParams);

                if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null || prm4 == null || prm5 == null)
                {
                    // empty result
                    return (int)InterfaceError.InvalidParameter;
                }
                int totalSqlRecords = 0;
                int outMaxRecords = 0;
                string fromDateTime = prm2;
                string toDateTime = prm3;
                bool showLastStoredPosition = Convert.ToBoolean(prm4);
                int sensorId = int.Parse(prm5);
                requestOverflowed = false;
                totalSqlRecords = 0;
                outMaxOverflowed = false;
                outMaxRecords = 0;
                int sqlMaxOutRecords = 1000; // = GetConfigParameter("ASI", (short)VLF.CLS.Def.Enums.ConfigurationGroups.Common, "Max Output Records", 1000);
                using (SystemConfig dbSystem = new SystemConfig(Application["ConnectionString"].ToString()))
                {
                    try
                    {
                        string keyValue = dbSystem.GetConfigParameter("ASI", (short)VLF.CLS.Def.Enums.ConfigurationGroups.Common, "Max Output Records");
                        sqlMaxOutRecords = int.Parse(keyValue);
                    }
                    catch
                    {
                    }
                }
                int currSqlRecords = 0;
                int outMaxFleetRecords = 0;
                outMaxOverflowed = false;
                DataSet dsCurrVehicleTrips = null;
                string[] licensePlateList = prm1.Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
                System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "licensePlateList: " + licensePlateList.Length));

                // prepare crystal report dataset, schema.
                DataSet dsCrystal = new DataSet();
                strPath = ReportsDataSetPath;
                strPath = Server.MapPath(strPath) + @"\dstSimpleTripReportData.xsd";
                dsCrystal.ReadXmlSchema(strPath);
                // prepare crystal report template
                string reportTemplate = "rpt_SimpleTripSummary.rpt";
                reportTemplate = Path.Combine(Server.MapPath(@ConfigurationManager.AppSettings["ReportsRootPath"]), reportTemplate);
                // get distance type
                GetUserPreferences(UserID);
                string DistanceType = FindExistingPreference();
                // report format
                ExportFormatType exportFormatType = ExportFormatType.NoFormat;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        exportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        exportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        exportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }
                // prepare report parameters
                ReportState reportState = new ReportState();
                reportState.CrystalDataSet = dsCrystal;
                reportState.Lang = lang;
                reportState.ReportResourceManager = new ResourceManager(typeof(Resources.Report_TripActivity.aspx));
                reportState.ReportTemplateFile = reportTemplate;
                reportState.ReportParameters = new Dictionary<string, object>();
                reportState.ReportParameters.Add("FromDate", FromDate);
                reportState.ReportParameters.Add("ToDate", ToDate);
                reportState.ReportParameters.Add("DistanceType", DistanceType);
                reportState.ReportParameters.Add("TotTripTime", null);
                reportState.ReportParameters.Add("TotIdling", null);
                reportState.ReportParameters.Add("TotStopTime", null);
                reportState.ReportParameters.Add("TotCost", null);

                
                string TripTitle = "";

                switch (sensorId)
                {
                   case 3:
                      TripTitle = Resources.Const.TripType_Trip;
                      break;
                   case 8:
                      TripTitle = Resources.Const.TripType_PTO;
                      break;
                   case 11:
                      TripTitle = Resources.Const.TripType_TP;
                      break;
                   default:
                      TripTitle = Resources.Const.TripType_Trip;
                      break;
                }

                reportState.ReportParameters.Add("TripType", TripTitle);


               
                reportState.FormatType = exportFormatType;
                reportState.PdfMerger = ConfigurationManager.AppSettings["PdfMerger"];
                string fullReportsOutputPath = Server.MapPath(ReportsOutputPath);
                string tempOutputPath = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
                Directory.CreateDirectory(tempOutputPath);
                reportState.MergedReportFile = Path.Combine(fullReportsOutputPath, string.Format("rptTripSummaryData-{0}{1}", Guid.NewGuid(), fileExt));

                // generate report one by one.
                TimeSpan retrievingTime = new TimeSpan();
                TimeSpan preparingTime = new TimeSpan();
                TimeSpan exportingTime = new TimeSpan();
                TimeSpan totalTime = new TimeSpan();
                GenerateVehicleTripReportDelegate reportDelegate = new GenerateVehicleTripReportDelegate(GenerateVehicleTripReport);
                IAsyncResult asyncResult = null;

                for (int i = 0; i < licensePlateList.Length; i++)
                {
                   string licensePlate = licensePlateList[i].Trim();

                   try
                   {
                      currSqlRecords = 0;
                      string strTotal = "";
                      TimeSpan totalTrip = new TimeSpan(0);
                      TimeSpan totalIdling = new TimeSpan(0);
                      TimeSpan totalStop = new TimeSpan(0);
                      Double totalCost = 0;

                      // 2. Retrieves trip info for every vehicle
                      DateTime t1 = DateTime.Now;
                      dsCurrVehicleTrips = detailedTrip.GetTripReport(licensePlate,
                                                                  fromDateTime,
                                                                  toDateTime,
                                                                  UserID,
                                                                  showLastStoredPosition,
                                                                  sensorId,
                                                                  lang,
                                                                  ref requestOverflowed,
                                                                  ref currSqlRecords,
                                                                  ref outMaxOverflowed,
                                                                  ref outMaxRecords);
                      DateTime t2 = DateTime.Now;
                      // check and wait previous report is done.
                      if (asyncResult != null)
                      {
                         if (!asyncResult.IsCompleted)
                         {
                            asyncResult.AsyncWaitHandle.WaitOne();
                         }
                      }
                      totalSqlRecords += currSqlRecords;
                      outMaxFleetRecords += outMaxRecords;
                      if (sqlMaxOutRecords < outMaxFleetRecords)
                         outMaxOverflowed = true;
                      if (requestOverflowed || outMaxOverflowed)
                      {
                         break;
                      }
                      DateTime t3 = DateTime.Now;
                      if (dsCurrVehicleTrips != null && currSqlRecords > 0)
                      {
                         dsCrystal.Clear();
                         Dictionary<string, string> vehicleSummary = MergeTripSummaryTable(dsCurrVehicleTrips, dsCrystal, true);
                         dsCrystal.Merge(dsCurrVehicleTrips.Tables["TripReportVehicleInfo"], false, MissingSchemaAction.Ignore);
                         // parameters
                         string outputFileName = string.Format("{0:d5}{1}", i + 1, fileExt);
                         reportState.OutputFile = Path.Combine(tempOutputPath, outputFileName);
                         reportState.ReportParameters["TotTripTime"] = vehicleSummary["TotTripTime"];
                         reportState.ReportParameters["TotIdling"] = vehicleSummary["TotIdling"]; ;
                         reportState.ReportParameters["TotStopTime"] = vehicleSummary["TotStopTime"];
                         reportState.ReportParameters["TotCost"] = vehicleSummary["TotCost"]; ;
                         asyncResult = reportDelegate.BeginInvoke(reportState, new AsyncCallback(GenerateVehicleTripReportDelegateCallBack), reportDelegate);
                      }
                      DateTime t4 = DateTime.Now;
                      TimeSpan ts1 = new TimeSpan(), ts2 = new TimeSpan(), ts3 = new TimeSpan(), ts4 = new TimeSpan();
                      ts1 = t2.Subtract(t1);
                      ts2 = t3.Subtract(t2);
                      ts3 = t4.Subtract(t3);
                      ts4 = t4.Subtract(t1);
                      retrievingTime += ts1;
                      preparingTime += ts3;
                      exportingTime += ts2;
                      totalTime += ts4;

                      System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info,
                        String.Format("License Plate {0}: {1}, outMaxRecords {2}, currSqlRecords {3}, retrieve: {4:f2}, prepare: {5:f2}, export: {6:f2}, total: {7:f2}",
                        i + 1, licensePlate, outMaxRecords, currSqlRecords, ts1.TotalSeconds, ts3.TotalSeconds, ts2.TotalSeconds, ts4.TotalSeconds)));
                   }
                   catch (Exception ex)
                   {
                      System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Error,
                         String.Format("Vehicle: [LP={0}] Error: {1}", licensePlate, ex.Message)));
                   }
                   finally
                   {
                   }
                }
                DateTime t5 = DateTime.Now;
                // check and wait last report is done.
                if (asyncResult != null)
                {
                    if (!asyncResult.IsCompleted)
                    {
                        asyncResult.AsyncWaitHandle.WaitOne();
                    }
                }
                // merge report files.
                if (reportState.FormatType == ExportFormatType.PortableDocFormat)
                {
                    //MergePDF(reportState.PdfMerger, tempOutputPath, "*" + fileExt, reportState.MergedReportFile);
                    MergePDF(tempOutputPath, "*" + fileExt, reportState.MergedReportFile);                    
                }
                else if (reportState.FormatType == ExportFormatType.ExcelRecord)
                {
                    //reportState.MergedReportFile += ".zip";
                    //ZipReports(tempOutputPath, "*" + fileExt, reportState.MergedReportFile);
                    MergeExcel(tempOutputPath, "*" + fileExt, reportState.MergedReportFile, true);                    
                }
                else if (reportState.FormatType == ExportFormatType.WordForWindows)
                {
                    reportState.MergedReportFile += ".zip";
                    ZipReports(tempOutputPath, "*" + fileExt, reportState.MergedReportFile);
                    //MergeWord(tempOutputPath, "*" + fileExt, reportState.MergedReportFile);                    
                }
                DeleteDirectory(tempOutputPath);
                ReportPath = "http://" + ConfigurationManager.AppSettings["ServerIp"] + ConfigurationManager.AppSettings["ReportsRootPath"] + "/TmpReports/" + Path.GetFileName(reportState.MergedReportFile);
                DateTime t6 = DateTime.Now;
                TimeSpan ts5 = t6.Subtract(t5);
                totalTime += ts5;
                System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, 
                   String.Format("TripFleetSummaryReportOneByOne end: outMaxFleetRecords {0}, totalSqlRecords {1}, sqlMaxOutRecords {2}, retrieve: {3:f2}, prepare: {4:f2}, export: {5:f2}, merge: {6:f2}, total: {7:f2}", 
                   outMaxFleetRecords, totalSqlRecords, sqlMaxOutRecords, retrievingTime.TotalSeconds, preparingTime.TotalSeconds, exportingTime.TotalSeconds, ts5.TotalSeconds, totalTime.TotalSeconds)));
                return (int)InterfaceError.NoError;
            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        private void ZipReports(string inputPath, string inputFile, string outputFile)
        {
            ZipFile zipFile = new ZipFile(outputFile);
            DirectoryInfo directoryInfo = new DirectoryInfo(inputPath);
            string currentDirecotrory = Directory.GetCurrentDirectory();
            Directory.SetCurrentDirectory(inputPath);
            FileInfo[] fileInfoList = directoryInfo.GetFiles(inputFile);
            for (int i = 0; i < fileInfoList.Length; i++)
            {
                zipFile.AddFile(fileInfoList[i].Name);
            }
            zipFile.Save();
            Directory.SetCurrentDirectory(currentDirecotrory);
        }

        private static Dictionary<string, string> MergeTripSummaryTable(DataSet sourceDataSet, DataSet destDataSet, bool isVehicleSummaryRequired)
        {
            DataTable summaryTable;
            summaryTable = destDataSet.Tables["TripReportSummary"];
            Dictionary<string, string> vehicleSummary = null;
            float totalCost = 0;
            Int64 totalDuration = 0;
            Int64 totalStopsDuration = 0;
            Int64 totalStopsDurationBetweenTrips = 0;
            // IMPORTANT ASSUMPTION: the trip index is in the same order in each source table.
            // if the assumption ever goes broken, a primary key should be created and use Find(PK) instead.
            for (int i = 0; i < sourceDataSet.Tables["TripStart"].Rows.Count; i++)
            {
                DataRow summaryRow = summaryTable.NewRow();
                summaryRow["TripIndex"] = sourceDataSet.Tables["TripStart"].Rows[i]["TripIndex"];
                summaryRow["StartTime"] = sourceDataSet.Tables["TripStart"].Rows[i]["Summary"];
                summaryRow["StartLocation"] = sourceDataSet.Tables["TripStart"].Rows[i]["Remarks"];
                try
                {
                    summaryRow["EndTime"] = sourceDataSet.Tables["TripEnd"].Rows[i]["Summary"];
                    summaryRow["EndLocation"] = sourceDataSet.Tables["TripEnd"].Rows[i]["Remarks"];
                    summaryRow["AverageSpeed"] = sourceDataSet.Tables["TripAverageSpeed"].Rows[i]["Summary"];
                    summaryRow["Cost"] = sourceDataSet.Tables["TripCost"].Rows[i]["Summary"];
                    summaryRow["Distance"] = sourceDataSet.Tables["TripDistance"].Rows[i]["Summary"];
                    //Convert time to user format							
                    Int64 duration = Int64.Parse((string)sourceDataSet.Tables["TripDuration"].Rows[i]["Remarks"]);
                    summaryRow["Duration"] = FormatDuration(duration);
                    Int64 stopsDuration = Int64.Parse((string)sourceDataSet.Tables["TripStopsDuration"].Rows[i]["Remarks"]);
                    summaryRow["StopsDuration"] = FormatDuration(stopsDuration);
                    Int64 stopsDurationBetweenTrips = Int64.Parse((string)sourceDataSet.Tables["StopDurationBetweenTrips"].Rows[i]["Remarks"]);
                    summaryRow["StopsDurationBetweenTrips"] = FormatDuration(stopsDurationBetweenTrips);
                    if (isVehicleSummaryRequired)
                    {
                        totalCost += float.Parse((string)summaryRow["Cost"]);
                        totalDuration += duration;
                        totalStopsDuration += stopsDuration;
                        totalStopsDurationBetweenTrips += stopsDurationBetweenTrips;
                    }
                }
                catch (Exception ex)
                {
                    // if a trip is still ongoing, we will get here.
                }
                summaryTable.Rows.Add(summaryRow);
            }
            if (isVehicleSummaryRequired)
            {
                vehicleSummary = new Dictionary<string, string>();
                vehicleSummary.Add("TotCost", totalCost.ToString());
                vehicleSummary.Add("TotTripTime", FormatDuration(totalDuration));
                vehicleSummary.Add("TotIdling", FormatDuration(totalStopsDuration));
                vehicleSummary.Add("TotStopTime", FormatDuration(totalStopsDurationBetweenTrips));
            }
            return vehicleSummary;
        }

        internal class ReportState
        {
            public DataSet CrystalDataSet;
            public string Lang;
            public ResourceManager ReportResourceManager;
            public string ReportTemplateFile;
            public Dictionary<string, object> ReportParameters;
            public ExportFormatType FormatType;
            public string OutputFile;
            public string PdfMerger;
            public string MergedReportFile;
        }

        private static void GenerateVehicleTripReport(ReportState reportState)
        {
            // localization
            LocalizeAddress(reportState.Lang, ref reportState.CrystalDataSet);
            // export
            ReportDocument reportDocument = new ReportDocument();
            reportDocument.Load(reportState.ReportTemplateFile);
            reportDocument.SetDataSource(reportState.CrystalDataSet);
            LocalizeTextObject(ref reportDocument, reportState.ReportResourceManager, reportState.Lang);
            foreach (KeyValuePair<string, object> parameter in reportState.ReportParameters)
            {
                reportDocument.SetParameterValue(parameter.Key, parameter.Value);
            }
            reportDocument.ExportToDisk(reportState.FormatType, reportState.OutputFile);
            reportDocument.Close();
        }

        private static void GenerateVehicleTripReportDelegateCallBack(IAsyncResult asyncResult)
        {
            GenerateVehicleTripReportDelegate reportDelegate = (GenerateVehicleTripReportDelegate)asyncResult.AsyncState;
            reportDelegate.EndInvoke(asyncResult);
        }

        private delegate void GenerateVehicleTripReportDelegate(ReportState reportState);

        private static int MergePDF(string pdfMerger, string inputPath, string inputFile, string outputFile)
        {
            int exitCode;
            // command line: pdftk *.pdf cat output cn.pdf dont_ask
            // note: pdftk can not take path that has space in it.
            Process pdfMergerProcess = new Process();
            pdfMergerProcess.StartInfo.FileName = pdfMerger;
            pdfMergerProcess.StartInfo.Arguments = string.Format("{0} cat output {1} dont_ask", inputFile, outputFile);
            pdfMergerProcess.StartInfo.CreateNoWindow = true;
            pdfMergerProcess.StartInfo.UseShellExecute = false;
            pdfMergerProcess.StartInfo.WorkingDirectory = inputPath;
            pdfMergerProcess.Start();
            pdfMergerProcess.WaitForExit();
            exitCode = pdfMergerProcess.ExitCode;
            pdfMergerProcess.Close();
            return exitCode;
        }

       private static void MergePDF(string inputPath, string searchPattern, string outputFile)
       {
          //int exitCode = 0;

          DirectoryInfo directoryInfo = new DirectoryInfo(inputPath);
          FileInfo[] fileInfoList = directoryInfo.GetFiles(searchPattern);
          //if (fileInfoList != null && fileInfoList.Length > 0)
          //{
             string[] inputFileNames = new string[fileInfoList.Length];
             for (int i = 0; i < fileInfoList.Length; i++)
             {
                inputFileNames[i] = fileInfoList[i].FullName;
             }
             PDFDocument.Merge(outputFile, inputFileNames);
          //}
          //return exitCode;
       }

        // Sometimes Syncfusion pdf merger does not release files, retry delete up to 3 times.
        private static bool DeleteDirectory(string path)
        {
            bool deleted = false;
            int i = 0;
            do
            {
                try
                {
                    Directory.Delete(path, true);
                    deleted = true;
                    break;
                }
                catch
                {
                    Thread.Sleep(500);
                    i++;
                }
            } while (i < 3);
            return deleted;
        }

        private static int MergeExcel(string inputPath, string inputFile, string outputFile, bool oneSheet)
        {
            int exitCode = 0;

            ExcelEngine excelEngine = new ExcelEngine();
            IApplication application = excelEngine.Excel;
            DirectoryInfo directoryInfo = new DirectoryInfo(inputPath);
            FileInfo[] fileInfoList = directoryInfo.GetFiles(inputFile);
            if (fileInfoList.Length > 0)
            {
                IWorkbook srcWorkbook;
                IWorkbook dstWorkbook = application.Workbooks.Open(fileInfoList[0].FullName);
                IRange srcRange, dstRange;
                for (int i = 1; i < fileInfoList.Length; i++)
                {
                    srcWorkbook = application.Workbooks.Open(fileInfoList[i].FullName);
                    //Copy the first worksheet from Source workbook to destination workbook.
                    if (oneSheet)
                    {
                        srcRange = srcWorkbook.Worksheets[0].UsedRange;
                        dstRange = dstWorkbook.Worksheets[0].Range[dstWorkbook.Worksheets[0].UsedRange.LastRow + 1, 1];
                        srcRange.CopyTo(dstRange);
                    }
                    else
                    {
                        dstWorkbook.Worksheets.AddCopy(srcWorkbook.Worksheets);
                    }
                    srcWorkbook.Close();
                }
                dstWorkbook.SaveAs(outputFile);
                dstWorkbook.Close();
            }
            //No exception will be thrown if there are unsaved workbooks.
            excelEngine.ThrowNotSavedOnDestroy = false;
            excelEngine.Dispose();

            return exitCode;
        }
        /*
        private static int MergeWord(string inputPath, string inputFile, string outputFile)
        {
            int exitCode = 0;

            DirectoryInfo directoryInfo = new DirectoryInfo(inputPath);
            FileInfo[] fileInfoList = directoryInfo.GetFiles(inputFile);
            if (fileInfoList.Length > 0)
            {
                WordDocument destinationDoc = new WordDocument();
                for (int i = 0; i < fileInfoList.Length; i++)
                {
                    WordDocument sourceDoc = new WordDocument(fileInfoList[i].FullName);
                    foreach (IWSection section in sourceDoc.Sections)
                    {
                        // Cloning all the sections one by one and merging it to the new document.
                        destinationDoc.Sections.Add(section.Clone(destinationDoc));
                        // Setting section break code to be the same as the template.
                        destinationDoc.LastSection.BreakCode = section.BreakCode;
                    }
                }
                // Saving the document to disk.
                destinationDoc.Save(outputFile, FormatType.Doc);
            }

            return exitCode;
        }
        */
        private static string FormatDuration(Int64 durationInSecond)
        {
            string outputString = "";
            TimeSpan durationSpan = new TimeSpan(durationInSecond * TimeSpan.TicksPerSecond);

            if (durationSpan.Days > 0)
            {
                outputString += durationSpan.Days.ToString() + " d, ";
                outputString += new TimeSpan(durationSpan.Ticks - durationSpan.Days * TimeSpan.TicksPerDay).ToString();
            }
            else
            {
                outputString = durationSpan.ToString();
            }
            return outputString;
        }

        [WebMethod]
        public int StopReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            TimeSpan totalTrip = new TimeSpan(0);
            TimeSpan totalIndling = new TimeSpan(0);
            TimeSpan totalStop = new TimeSpan(0);

            int StopCount = 0;
            string strTotalStopTime = "";
            string strTotalIdlingTime = "";
            int IdlingCount = 0;

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);

            try
            {
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetStopReportData(UserID, xmlParams, lang, ref IdlingCount, ref totalIndling, ref StopCount, ref totalStop, ref  requestOverflowed, ref  outMaxOverflowed);


                if (dsCrystal == null)
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_TripStopReport.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_StopReport.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                strTotalIdlingTime = "";
                if (totalIndling.Days > 0)
                {
                    strTotalIdlingTime += totalIndling.Days.ToString() + " d, ";
                    strTotalIdlingTime += new TimeSpan(totalIndling.Ticks - totalIndling.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotalIdlingTime = totalIndling.ToString();
                }


                crParameterDiscreteValue.Value = IdlingCount;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotIdling"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = strTotalIdlingTime;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotTimeIdling"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                strTotalStopTime = "";
                if (totalStop.Days > 0)
                {
                    strTotalStopTime += totalStop.Days.ToString() + " d, ";
                    strTotalStopTime += new TimeSpan(totalStop.Ticks - totalStop.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotalStopTime = totalStop.ToString();
                }


                crParameterDiscreteValue.Value = StopCount;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotStops"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = strTotalStopTime;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotTimeStop"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                string ReportName = "rptStopReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;


            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int StopFleetReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            TimeSpan totalTrip = new TimeSpan(0);
            TimeSpan totalIndling = new TimeSpan(0);
            TimeSpan totalStop = new TimeSpan(0);

            int StopCount = 0;
            string strTotalStopTime = "";
            string strTotalIdlingTime = "";
            int IdlingCount = 0;

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);

            try
            {
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetStopFleetReportData(UserID, xmlParams, lang, ref IdlingCount, ref totalIndling, ref StopCount, ref totalStop, ref requestOverflowed, ref  outMaxOverflowed);

                if (dsCrystal == null)
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_TripStopReport.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_StopReport.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                strTotalIdlingTime = "";
                if (totalIndling.Days > 0)
                {
                    strTotalIdlingTime += totalIndling.Days.ToString() + " d, ";
                    strTotalIdlingTime += new TimeSpan(totalIndling.Ticks - totalIndling.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotalIdlingTime = totalIndling.ToString();
                }


                crParameterDiscreteValue.Value = IdlingCount;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotIdling"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = strTotalIdlingTime;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotTimeIdling"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                strTotalStopTime = "";
                if (totalStop.Days > 0)
                {
                    strTotalStopTime += totalStop.Days.ToString() + " d, ";
                    strTotalStopTime += new TimeSpan(totalStop.Ticks - totalStop.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotalStopTime = totalStop.ToString();
                }


                crParameterDiscreteValue.Value = StopCount;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotStops"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = strTotalStopTime;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotTimeStop"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                string ReportName = "rptStopReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;


            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int AlarmsReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            try
            {
                TimeSpan currDuration;

                GetUserPreferences(UserID);
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];

                // Authenticate 
                LoginManager.GetInstance().SecurityCheck(UserID, SID);


                DataSet dsCrystal = new DataSet();
                strPath = ReportsDataSetPath;
                strPath = Server.MapPath(strPath) + @"\dstAlarmReport.xsd";

                dsCrystal.ReadXmlSchema(strPath);
                StringReader strrXML = null;
                DataSet dsAlarms = new DataSet();
                dsAlarms = GetAlarams(UserID, xmlParams, lang, ref RequestOverflowed, ref outMaxOverflowed);


                if ((dsAlarms == null) || (dsAlarms.Tables.Count < 1) || (dsAlarms.Tables[0].Rows.Count == 0))
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                string LicensePlate = Util.PairFindValue(ReportTemplate.RpAlarmFirstParamName, xmlParams);



                   VLF.DAS.Logic.Vehicle dbVehicle = new VLF.DAS.Logic.Vehicle(Application["ConnectionString"].ToString());
                    DataSet dsVehicle = dbVehicle.GetVehicleInfoByLicensePlate(LicensePlate);
                    if ((dsVehicle != null) && (dsVehicle.Tables[0].Rows.Count > 0))
                        CopyRows(dsVehicle.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                    //// Alarm Severity Name 
                    //DataColumn dc = new DataColumn();
                    //dc.ColumnName = "AlarmSeverityName";
                    //dc.DataType = Type.GetType("System.String");
                    //dc.DefaultValue = false;
                    //dsAlarms.Tables["VehicleAlarms"].Columns.Add(dc);


                    //foreach (DataRow rowItem in dsAlarms.Tables["VehicleAlarms"].Rows)
                    //{
                    //    int enumId = Convert.ToInt16(rowItem["AlarmSeverity"]);
                    //    rowItem["AlarmSeverityName"] = Enum.GetName(typeof(VLF.CLS.Def.Enums.AlarmSeverity), (VLF.CLS.Def.Enums.AlarmSeverity)enumId);
                    //}
                    CopyRows(dsAlarms.Tables[0], dsCrystal.Tables["rpt_AlarmReport"]);

                    LocalizeAddress(lang, ref dsCrystal);

                    ReportDocument oRpt = new ReportDocument();

                    DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                    string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_Alarms.rpt";
                    oRpt.Load(@sPath);


                    oRpt.SetDataSource(dsCrystal);

                    LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Alarms.aspx)), lang);

                    ParameterFieldDefinitions crParameterFieldDefinitions;
                    ParameterFieldDefinition crParameterFieldDefinition;
                    ParameterValues crParameterValues = new ParameterValues();
                    ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                    crParameterDiscreteValue.Value = FromDate;
                    crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                    crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                    crParameterValues = crParameterFieldDefinition.CurrentValues;
                    crParameterValues.Add(crParameterDiscreteValue);
                    crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                    crParameterDiscreteValue.Value = ToDate;
                    crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                    crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                    crParameterValues = crParameterFieldDefinition.CurrentValues;
                    crParameterValues.Add(crParameterDiscreteValue);
                    crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

                    string ReportName = "rptAlarmData" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();



                    strPath = ReportsOutputPath;
                    string fileExt = "";
                    switch (rFormat)
                    {
                        case 1:
                            oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                            fileExt = ".pdf";
                            break;
                        case 2:
                            oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                            fileExt = ".xls";
                            break;
                        case 3:
                            oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                            fileExt = ".doc";
                            break;
                    }


                    strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                    string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                    oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    diskOpt.DiskFileName = strPath;
                    oRpt.ExportOptions.DestinationOptions = diskOpt;
                    oRpt.Export();
                    oRpt.Close();
                    ReportPath = strURL;
                    return (int)InterfaceError.NoError;

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }

        }

        [WebMethod]
        public int AlarmsFleetReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            try
            {
                // Authenticate 
                LoginManager.GetInstance().SecurityCheck(UserID, SID);


                TimeSpan currDuration;
                GetUserPreferences(UserID);
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];

                DataSet dsVehicle = new DataSet();
                DataSet dsCrystal = new DataSet();
                strPath = ReportsDataSetPath;
                strPath = Server.MapPath(strPath) + @"\dstAlarmReport.xsd";

                dsCrystal.ReadXmlSchema(strPath);
                StringReader strrXML = null;
                DataSet dsAlarms = new DataSet();

                dsAlarms = GetFleetAlarams(UserID, xmlParams, lang, ref requestOverflowed, ref  outMaxOverflowed);

                if ((dsAlarms == null) || (dsAlarms.Tables.Count < 1) || (dsAlarms.Tables[0].Rows.Count == 0))
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }


                if (/*dsAlarms.Tables.IndexOf("VehicleAlarms") != -1 && */dsAlarms.Tables[0].Rows.Count > 0)
                {
                    VLF.DAS.Logic.User dbUser = new VLF.DAS.Logic.User(Application["ConnectionString"].ToString());
                    dsVehicle = dbUser.GetUserAllVehiclesActiveInfo(UserID);

                    if ((dsVehicle != null) && (dsVehicle.Tables[0].Rows.Count > 0))
                        CopyRows(dsVehicle.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                    //// Alarm Severity Name 
                    //DataColumn dc = new DataColumn();
                    //dc.ColumnName = "AlarmSeverityName";
                    //dc.DataType = Type.GetType("System.String");
                    //dc.DefaultValue = false;
                    //dsAlarms.Tables["VehicleAlarms"].Columns.Add(dc);


                    //foreach (DataRow rowItem in dsAlarms.Tables["VehicleAlarms"].Rows)
                    //{
                    //    int enumId = Convert.ToInt16(rowItem["AlarmSeverity"]);
                    //    rowItem["AlarmSeverityName"] = Enum.GetName(typeof(VLF.CLS.Def.Enums.AlarmSeverity), (VLF.CLS.Def.Enums.AlarmSeverity)enumId);
                    //}
                    CopyRows(dsAlarms.Tables[0], dsCrystal.Tables["rpt_AlarmReport"]);

                    LocalizeAddress(lang, ref dsCrystal);

                    ReportDocument oRpt = new ReportDocument();

                    DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                    string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_AlarmsFleet.rpt";
                    oRpt.Load(@sPath);


                    oRpt.SetDataSource(dsCrystal);

                    LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_AlarmsFleet.aspx)), lang);

                    ParameterFieldDefinitions crParameterFieldDefinitions;
                    ParameterFieldDefinition crParameterFieldDefinition;
                    ParameterValues crParameterValues = new ParameterValues();
                    ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                    crParameterDiscreteValue.Value = FromDate;
                    crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                    crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                    crParameterValues = crParameterFieldDefinition.CurrentValues;
                    crParameterValues.Add(crParameterDiscreteValue);
                    crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                    crParameterDiscreteValue.Value = ToDate;
                    crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                    crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                    crParameterValues = crParameterFieldDefinition.CurrentValues;
                    crParameterValues.Add(crParameterDiscreteValue);
                    crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                    string FleetId = Util.PairFindValue(ReportTemplate.RpFleetAlarmsFirstParamName, xmlParams);


                    crParameterDiscreteValue.Value = GetFleetInfo(Convert.ToInt32(FleetId));
                    crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                    crParameterFieldDefinition = crParameterFieldDefinitions["FleetName"];
                    crParameterValues = crParameterFieldDefinition.CurrentValues;
                    crParameterValues.Add(crParameterDiscreteValue);
                    crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                    string ReportName = "rptAlarmData" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();



                    strPath = ReportsOutputPath;
                    string fileExt = "";
                    switch (rFormat)
                    {
                        case 1:
                            oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                            fileExt = ".pdf";
                            break;
                        case 2:
                            oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                            fileExt = ".xls";
                            break;
                        case 3:
                            oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                            fileExt = ".doc";
                            break;
                    }


                    strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                    string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                    oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                    diskOpt.DiskFileName = strPath;
                    oRpt.ExportOptions.DestinationOptions = diskOpt;
                    oRpt.Export();
                    oRpt.Close();
                    ReportPath = strURL;
                    return (int)InterfaceError.NoError;
                }
                else
                {
                    return (int)InterfaceError.ServerError;
                }

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }

        }

        [WebMethod]
        public int HistoryReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, Int16 DclId, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            try
            {
                // Authenticate 
                LoginManager.GetInstance().SecurityCheck(UserID, SID);


                TimeSpan currDuration;

                GetUserPreferences(UserID);
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                string[] ParamList = new string[4];
                ParamList = xmlParams.ToString().Split(';');

                string LicensePlate = ParamList[4].TrimEnd();

                string xml = "";
                DataSet dsCrystal = new DataSet();
                strPath = ReportsDataSetPath;
                strPath = Server.MapPath(strPath) + @"\dstHistory.xsd";

                dsCrystal.ReadXmlSchema(strPath);
                StringReader strrXML = null;
                DataSet dsHistory = new DataSet();
                dsHistory = dsHistory_Fill(UserID, LicensePlate, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), xmlParams, DclId,lang, ref  requestOverflowed, ref  outMaxOverflowed);


                if ((dsHistory == null) || (dsHistory.Tables.Count < 1) || (dsHistory.Tables[0].Rows.Count == 0))
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                CopyRows(dsHistory.Tables[0], dsCrystal.Tables["rpt_History"]);





                VLF.DAS.Logic.Vehicle dbVehicle = new VLF.DAS.Logic.Vehicle(Application["ConnectionString"].ToString());
                DataSet dsVehicle = dbVehicle.GetVehicleInfoByLicensePlate(LicensePlate);
                if ((dsVehicle != null) && (dsVehicle.Tables[0].Rows.Count > 0))
                    CopyRows(dsVehicle.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_History.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);
                
               ReportDocument oRptSub = new ReportDocument();

               oRptSub=oRpt.Subreports["rpt_History_Summary"]; 


               LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_History.aspx)), lang);
               LocalizeTextObject(ref oRptSub, new ResourceManager(typeof(Resources.Report_History.aspx)), lang);
                


                

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

                string DistanceType = FindExistingPreference();

                crParameterDiscreteValue.Value = DistanceType;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["DistanceType"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                string ReportName = "rptHistoryData" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();

                //if (rFormat == 0)
                //{
                //    DateTime dt = System.DateTime.Now;
                //    System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "Performance Start : Loading Crystal report. User:" + sn.UserID.ToString() + " Form:Report_History.aspx"));

                //    //Hide Header
                //    crParameterDiscreteValue.Value = false;
                //    crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                //    crParameterFieldDefinition = crParameterFieldDefinitions["suppressHeader"];
                //    crParameterValues = crParameterFieldDefinition.CurrentValues;
                //    crParameterValues.Add(crParameterDiscreteValue);
                //    crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

                //    currDuration = new TimeSpan(System.DateTime.Now.Ticks - dt.Ticks);
                //    System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "Performance End  : Loading Crystal report. User:" + sn.UserID.ToString() + " Total Time:" + currDuration.ToString() + " Form:Report_History.aspx"));
                //}



                //else if (rFormat == 1)
                //{

                //Hide Header



                crParameterDiscreteValue.Value = false;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["suppressHeader"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;



                //}


                //else if (rFormat == 2)
                //{
                //    //Hide Header

                //    DateTime dt = System.DateTime.Now;
                //    System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "Performance Start : Loading Crystal report. User:" + sn.UserID.ToString() + " Form:Report_History.aspx"));


                //    crParameterDiscreteValue.Value = false;
                //    crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                //    crParameterFieldDefinition = crParameterFieldDefinitions["suppressHeader"];
                //    crParameterValues = crParameterFieldDefinition.CurrentValues;
                //    crParameterValues.Add(crParameterDiscreteValue);
                //    crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

                //    strPath = ReportsOutputPath;
                //    strPath = MapPath(strPath) + @"\" + ReportName + ".xls";
                //    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;

                //    oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                //    diskOpt.DiskFileName = strPath;
                //    oRpt.ExportOptions.DestinationOptions = diskOpt;
                //    oRpt.Export();
                //    oRpt.Close();
                //    System.Diagnostics.Trace.WriteLineIf(AppConfig.tsReports.Enabled | AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "Ending History Report..."));

                //    currDuration = new TimeSpan(System.DateTime.Now.Ticks - dt.Ticks);
                //    System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "Performance End  : History Report. User:" + sn.UserID.ToString() + " Total Time:" + currDuration.ToString() + " Form:Report_History.aspx"));

                //    Response.Expires = 10;
                //    Response.AddHeader("pragma", "no-cache");
                //    Response.AddHeader("cache-control", "private");
                //    Response.CacheControl = "no-cache";
                //    Response.Redirect(ReportsOutputPathURL + ReportName + ".xls");
                //}


                //else if (rFormat == 3)
                //{
                //    //Hide Header

                //    DateTime dt = System.DateTime.Now;
                //    System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "Performance Start : Loading Crystal report. User:" + sn.UserID.ToString() + " Form:Report_History.aspx"));


                //    crParameterDiscreteValue.Value = false;
                //    crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                //    crParameterFieldDefinition = crParameterFieldDefinitions["suppressHeader"];
                //    crParameterValues = crParameterFieldDefinition.CurrentValues;
                //    crParameterValues.Add(crParameterDiscreteValue);
                //    crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

                //    strPath = ReportsOutputPath;
                //    strPath = MapPath(strPath) + @"\" + ReportName + ".doc";
                //    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;

                //    oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                //    diskOpt.DiskFileName = strPath;
                //    oRpt.ExportOptions.DestinationOptions = diskOpt;
                //    oRpt.Export();
                //    oRpt.Close();
                //    System.Diagnostics.Trace.WriteLineIf(AppConfig.tsReports.Enabled | AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "Ending History Report..."));

                //    currDuration = new TimeSpan(System.DateTime.Now.Ticks - dt.Ticks);
                //    System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceInfo, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Info, "Performance End  : History Report. User:" + sn.UserID.ToString() + " Total Time:" + currDuration.ToString() + " Form:Report_History.aspx"));


                //    Response.Expires = 10;
                //    Response.AddHeader("pragma", "no-cache");
                //    Response.AddHeader("cache-control", "private");
                //    Response.CacheControl = "no-cache";
                //    Response.Redirect(ReportsOutputPathURL + ReportName + ".doc");
                //    //}
                //}
            }


            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int ExceptionReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            try
            {

                // Authenticate 
                LoginManager.GetInstance().SecurityCheck(UserID, SID);

                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetExceptionData(UserID, xmlParams, ref  requestOverflowed, ref  outMaxOverflowed);

                if (dsCrystal == null)
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_Exceptions.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Exception.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);






                string ReportName = "rptExceptionReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int ExceptionFleetReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {


            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            try
            {
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetFleetExceptionData(UserID, xmlParams, ref  requestOverflowed, ref  outMaxOverflowed);

                if (dsCrystal == null)
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_Exceptions.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Exception.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);






                string ReportName = "rptExceptionReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

       [WebMethod]
       public int MessagesReport(Int32 UserID, string SID, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            try
            {
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];






                string FromDate = Util.PairFindValue(ReportTemplate.RpMessagesFirstParamName, xmlParams);
                string ToDate = Util.PairFindValue(ReportTemplate.RpMessagesSecondParamName, xmlParams);
                Int32 FleetId = Convert.ToInt32(Util.PairFindValue(ReportTemplate.RpMessagesThirdParamName, xmlParams));
                string FleetName = Util.PairFindValue(ReportTemplate.RpMessagesFourthParamName, xmlParams);
                Int32 BoxId = Convert.ToInt32(Util.PairFindValue(ReportTemplate.RpMessagesFifthParamName, xmlParams));
                string VehicleName = Util.PairFindValue(ReportTemplate.RpMessagesSixthParamName, xmlParams);



                DataSet dsCrystal = new DataSet();
                DataSet ds = new DataSet();
                ds = GetMessages(UserID, BoxId, FromDate, ToDate, (Int16)VLF.CLS.Def.Enums.TxtMsgDirectionType.Both, ref requestOverflowed, ref outMaxOverflowed);

                if ((ds == null) || (ds.Tables.Count < 1) || (ds.Tables[0].Rows.Count == 0))
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }


                foreach (DataRow rowItem in ds.Tables[0].Rows)
                    rowItem["MsgDateTime"] = Convert.ToDateTime(rowItem["MsgDateTime"].ToString());



                strPath = ReportsDataSetPath;
                strPath = Server.MapPath(strPath) + @"\dstMessages.xsd";
                dsCrystal.ReadXmlSchema(strPath);

                CopyRows(ds.Tables[0], dsCrystal.Tables["rpt_Messages"]);

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();
                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_Messages.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Messages.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = FleetName;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FleetName"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = VehicleName;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["Vehicle"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                string ReportName = "rptExceptionReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

       [WebMethod]
       public int MessagesFleetReport(Int32 UserID, string SID, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
       {

          // Authenticate 
          LoginManager.GetInstance().SecurityCheck(UserID, SID);


          try
          {
             ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
             ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
             ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];






             string FromDate = Util.PairFindValue(ReportTemplate.RpMessagesFirstParamName, xmlParams);
             string ToDate = Util.PairFindValue(ReportTemplate.RpMessagesSecondParamName, xmlParams);
             Int32 FleetId = Convert.ToInt32(Util.PairFindValue(ReportTemplate.RpMessagesThirdParamName, xmlParams));
             string FleetName = Util.PairFindValue(ReportTemplate.RpMessagesFourthParamName, xmlParams);
             Int32 BoxId = Convert.ToInt32(Util.PairFindValue(ReportTemplate.RpMessagesFifthParamName, xmlParams));
             string VehicleName = Util.PairFindValue(ReportTemplate.RpMessagesSixthParamName, xmlParams);



             DataSet dsCrystal = new DataSet();
             DataSet ds = new DataSet();
             ds = GetFleetMessages(UserID, FleetId, FromDate, ToDate, (Int16)VLF.CLS.Def.Enums.TxtMsgDirectionType.Both, ref requestOverflowed, ref outMaxOverflowed);

             if ((ds == null) || (ds.Tables.Count < 1) || (ds.Tables[0].Rows.Count == 0))
             {
                ReportPath = "";
                return (int)InterfaceError.NoError;
             }


             foreach (DataRow rowItem in ds.Tables[0].Rows)
                rowItem["MsgDateTime"] = Convert.ToDateTime(rowItem["MsgDateTime"].ToString());


             strPath = ReportsDataSetPath;
             strPath = Server.MapPath(strPath) + @"\dstMessages.xsd";
             dsCrystal.ReadXmlSchema(strPath);


             CopyRows(ds.Tables[0], dsCrystal.Tables["rpt_Messages"]);

             LocalizeAddress(lang, ref dsCrystal);

             ReportDocument oRpt = new ReportDocument();
             DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
             string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_Messages.rpt";
             oRpt.Load(@sPath);


             oRpt.SetDataSource(dsCrystal);

             LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Messages.aspx)), lang);

             ParameterFieldDefinitions crParameterFieldDefinitions;
             ParameterFieldDefinition crParameterFieldDefinition;
             ParameterValues crParameterValues = new ParameterValues();
             ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

             crParameterDiscreteValue.Value = FromDate;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



             crParameterDiscreteValue.Value = ToDate;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



             crParameterDiscreteValue.Value = FleetName;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["FleetName"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


             crParameterDiscreteValue.Value = VehicleName;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["Vehicle"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



             string ReportName = "rptExceptionReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


             strPath = ReportsOutputPath;
             string fileExt = "";
             switch (rFormat)
             {
                case 1:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                   fileExt = ".pdf";
                   break;
                case 2:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                   fileExt = ".xls";
                   break;
                case 3:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                   fileExt = ".doc";
                   break;
             }


             strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
             string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

             oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
             diskOpt.DiskFileName = strPath;
             oRpt.ExportOptions.DestinationOptions = diskOpt;
             oRpt.Export();
             oRpt.Close();
             ReportPath = strURL;
             return (int)InterfaceError.NoError;

          }
          catch (Exception Ex)
          {
             return (int)ASIErrorCheck.CheckError(Ex);
          }
       }

        [WebMethod]
        public int UtilizationReport(Int32 UserID, string SID, int FleetId, string FromDate, string ToDate, int rFormat, string lang, ref string ReportPath)
        {

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];



            bool requestOverflowed = false;
            DataSet dsCrystal = new DataSet();
            DataSet ds = new DataSet();


            string strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstUtilization.xsd";

            dsCrystal.ReadXmlSchema(strPath);

            GetUtilizationInfo(UserID, FleetId, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), ref dsCrystal);

            if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
            {
                ReportPath = "";
                return (int)InterfaceError.NoError;
            }


            CrystalDecisions.CrystalReports.Engine.ReportDocument oRpt =
              new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_Utilization.rpt";



            oRpt.Load(@sPath);
            

            DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
            oRpt.SetDataSource(dsCrystal);

            LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Utilization.aspx)), lang);

            ParameterFieldDefinitions crParameterFieldDefinitions;
            ParameterFieldDefinition crParameterFieldDefinition;
            ParameterValues crParameterValues = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

            crParameterDiscreteValue.Value = FromDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



            crParameterDiscreteValue.Value = ToDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);






            string ReportName = "rptUtilizationReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


            strPath = ReportsOutputPath;
            string fileExt = "";
            switch (rFormat)
            {
                case 1:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    fileExt = ".pdf";
                    break;
                case 2:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                    fileExt = ".xls";
                    break;
                case 3:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                    fileExt = ".doc";
                    break;
            }


            strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
            string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

            oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            diskOpt.DiskFileName = strPath;
            oRpt.ExportOptions.DestinationOptions = diskOpt;
            oRpt.Export();
            oRpt.Close();
            ReportPath = strURL;
            return (int)InterfaceError.NoError;

        }

        [WebMethod]
        public int UtilizationSummaryReport(Int32 UserID, string SID, int FleetId, string FromDate, string ToDate, int rFormat, string lang, ref string ReportPath)
        {

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];



            bool requestOverflowed = false;
            DataSet dsCrystal = new DataSet();
            DataSet ds = new DataSet();


            string strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstUtilization.xsd";

            dsCrystal.ReadXmlSchema(strPath);

            GetUtilizationInfo(UserID, FleetId, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), ref dsCrystal);

            if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
            {
                ReportPath = "";
                return (int)InterfaceError.NoError;
            }


            CrystalDecisions.CrystalReports.Engine.ReportDocument oRpt =
              new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_UtilizationSummary.rpt";



            oRpt.Load(@sPath);


            DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
            oRpt.SetDataSource(dsCrystal);

            LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_UtilizationSummary.aspx)), lang);

            ParameterFieldDefinitions crParameterFieldDefinitions;
            ParameterFieldDefinition crParameterFieldDefinition;
            ParameterValues crParameterValues = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

            crParameterDiscreteValue.Value = FromDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



            crParameterDiscreteValue.Value = ToDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);






            string ReportName = "rptUtilizationReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


            strPath = ReportsOutputPath;
            string fileExt = "";
            switch (rFormat)
            {
                case 1:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    fileExt = ".pdf";
                    break;
                case 2:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                    fileExt = ".xls";
                    break;
                case 3:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                    fileExt = ".doc";
                    break;
            }


            strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
            string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

            oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            diskOpt.DiskFileName = strPath;
            oRpt.ExportOptions.DestinationOptions = diskOpt;
            oRpt.Export();
            oRpt.Close();
            ReportPath = strURL;
            return (int)InterfaceError.NoError;


        }

        [WebMethod]
        public int UtilizationByVehicleTypeReport(Int32 UserID, string SID, int FleetId, string FromDate, string ToDate, int rFormat, string lang, ref string ReportPath)
        {

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];



            bool requestOverflowed = false;
            DataSet dsCrystal = new DataSet();
            DataSet ds = new DataSet();


            string strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstUtilizationSummary.xsd";

            dsCrystal.ReadXmlSchema(strPath);

            GetUtilizationInfoByVehicleType(UserID, FleetId, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), ref dsCrystal);

            if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
            {
                ReportPath = "";
                return (int)InterfaceError.NoError;
            }


            CrystalDecisions.CrystalReports.Engine.ReportDocument oRpt =
              new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_VehicleTypeUtilization.rpt";



            oRpt.Load(@sPath);


            DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
            oRpt.SetDataSource(dsCrystal);

            LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_VehicleTypeUtilization.aspx)), lang);

            ParameterFieldDefinitions crParameterFieldDefinitions;
            ParameterFieldDefinition crParameterFieldDefinition;
            ParameterValues crParameterValues = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

            crParameterDiscreteValue.Value = FromDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



            crParameterDiscreteValue.Value = ToDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);






            string ReportName = "rptUtilizationReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


            strPath = ReportsOutputPath;
            string fileExt = "";
            switch (rFormat)
            {
                case 1:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    fileExt = ".pdf";
                    break;
                case 2:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                    fileExt = ".xls";
                    break;
                case 3:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                    fileExt = ".doc";
                    break;
            }


            strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
            string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

            oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            diskOpt.DiskFileName = strPath;
            oRpt.ExportOptions.DestinationOptions = diskOpt;
            oRpt.Export();
            oRpt.Close();
            ReportPath = strURL;
            return (int)InterfaceError.NoError;


        }

        [WebMethod]
        public int UtilizationWeeklyReport(Int32 UserID, string SID, int FleetId, string FromDate, string ToDate, int rFormat, string lang, ref string ReportPath)
        {
            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];



            bool requestOverflowed = false;
            DataSet dsCrystal = new DataSet();
            DataSet ds = new DataSet();


            string strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstUtilizationSummary.xsd";

            dsCrystal.ReadXmlSchema(strPath);

            GetUtilizationWeekly(UserID, FleetId, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), ref dsCrystal);
            if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
            {
                ReportPath = "";
                return (int)InterfaceError.NoError;
            }



            CrystalDecisions.CrystalReports.Engine.ReportDocument oRpt =
              new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_WeeklyUtilizationReport.rpt";



            oRpt.Load(@sPath);


            DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
            oRpt.SetDataSource(dsCrystal);

            LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_WeeklyUtilizationReport.aspx)), lang);

            ParameterFieldDefinitions crParameterFieldDefinitions;
            ParameterFieldDefinition crParameterFieldDefinition;
            ParameterValues crParameterValues = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

            crParameterDiscreteValue.Value = FromDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



            crParameterDiscreteValue.Value = ToDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);






            string ReportName = "rptUtilizationReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


            strPath = ReportsOutputPath;
            string fileExt = "";
            switch (rFormat)
            {
                case 1:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    fileExt = ".pdf";
                    break;
                case 2:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                    fileExt = ".xls";
                    break;
                case 3:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                    fileExt = ".doc";
                    break;
            }


            strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
            string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

            oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            diskOpt.DiskFileName = strPath;
            oRpt.ExportOptions.DestinationOptions = diskOpt;
            oRpt.Export();
            oRpt.Close();
            ReportPath = strURL;
            return (int)InterfaceError.NoError;


        }

        [WebMethod]
        public int UtilizationDailyDetailReport(Int32 UserID, string SID, int FleetId, string FromDate, string ToDate, int rFormat, string lang, ref string ReportPath)
        {

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];



            bool requestOverflowed = false;
            DataSet dsCrystal = new DataSet();
            DataSet ds = new DataSet();


            string strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstUtilizationSummary.xsd";

            dsCrystal.ReadXmlSchema(strPath);

            GetUtilizationDailyDetails(UserID, FleetId, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), ref dsCrystal);
            if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
            {
                ReportPath = "";
                return (int)InterfaceError.NoError;
            }



            CrystalDecisions.CrystalReports.Engine.ReportDocument oRpt =
              new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_DailyDetailUtilizationReport.rpt";



            oRpt.Load(@sPath);


            DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
            oRpt.SetDataSource(dsCrystal);

            LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_DailyDetailUtilizationReport.aspx)), lang);

            ParameterFieldDefinitions crParameterFieldDefinitions;
            ParameterFieldDefinition crParameterFieldDefinition;
            ParameterValues crParameterValues = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

            crParameterDiscreteValue.Value = FromDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



            crParameterDiscreteValue.Value = ToDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);






            string ReportName = "rptUtilizationReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


            strPath = ReportsOutputPath;
            string fileExt = "";
            switch (rFormat)
            {
                case 1:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    fileExt = ".pdf";
                    break;
                case 2:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                    fileExt = ".xls";
                    break;
                case 3:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                    fileExt = ".doc";
                    break;
            }


            strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
            string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

            oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            diskOpt.DiskFileName = strPath;
            oRpt.ExportOptions.DestinationOptions = diskOpt;
            oRpt.Export();
            oRpt.Close();
            ReportPath = strURL;
            return (int)InterfaceError.NoError;


        }

        [WebMethod]
        public int UtilizationDailyFleetReport(Int32 UserID, string SID, int FleetId, string FromDate, string ToDate, int rFormat, string lang, ref string ReportPath)
        {

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];



            bool requestOverflowed = false;
            DataSet dsCrystal = new DataSet();
            DataSet ds = new DataSet();


            string strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstUtilizationSummary.xsd";

            dsCrystal.ReadXmlSchema(strPath);

            GetUtilizationDailyFleet(UserID, FleetId, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), ref dsCrystal);
            if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
            {
                ReportPath = "";
                return (int)InterfaceError.NoError;
            }



            CrystalDecisions.CrystalReports.Engine.ReportDocument oRpt =
              new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_DailyFleetUtilization.rpt";



            oRpt.Load(@sPath);


            DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
            oRpt.SetDataSource(dsCrystal);

            LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_DailyFleetUtilization.aspx)), lang);

            ParameterFieldDefinitions crParameterFieldDefinitions;
            ParameterFieldDefinition crParameterFieldDefinition;
            ParameterValues crParameterValues = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

            crParameterDiscreteValue.Value = FromDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



            crParameterDiscreteValue.Value = ToDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);






            string ReportName = "rptUtilizationReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


            strPath = ReportsOutputPath;
            string fileExt = "";
            switch (rFormat)
            {
                case 1:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    fileExt = ".pdf";
                    break;
                case 2:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                    fileExt = ".xls";
                    break;
                case 3:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                    fileExt = ".doc";
                    break;
            }


            strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
            string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

            oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            diskOpt.DiskFileName = strPath;
            oRpt.ExportOptions.DestinationOptions = diskOpt;
            oRpt.Export();
            oRpt.Close();
            ReportPath = strURL;
            return (int)InterfaceError.NoError;

        }

        [WebMethod]
        public int OffHoursReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            TimeSpan totalTrip = new TimeSpan(0);
            TimeSpan totalIndling = new TimeSpan(0);
            TimeSpan totalStop = new TimeSpan(0);
            Double totalCost = 0;
            string strTotal = "";

            try
            {
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetOffHoursInfo(UserID, xmlParams,lang, ref  requestOverflowed, ref  outMaxOverflowed, ref totalTrip, ref totalIndling, ref totalStop, ref totalCost);

                if (dsCrystal == null)
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_OffHoursReport.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_OffHours.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

                string DistanceType = FindExistingPreference();



                crParameterDiscreteValue.Value = DistanceType;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["DistanceType"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);




                strTotal = "";
                if (totalTrip.Days > 0)
                {
                    strTotal += totalTrip.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalTrip.Ticks - totalTrip.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalTrip.ToString();
                }






                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotTripTime"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                strTotal = "";
                if (totalIndling.Days > 0)
                {
                    strTotal += totalIndling.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalIndling.Ticks - totalIndling.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalIndling.ToString();
                }




                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotIdling"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                strTotal = "";

                if (totalStop.Days > 0)
                {
                    strTotal += totalStop.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalStop.Ticks - totalStop.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalStop.ToString();
                }


                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotStopTime"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = totalCost.ToString();
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotCost"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);




                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourFifthParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDayH"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourSixthParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDayM"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourSeventhParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDayH"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourEightParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDayM"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourNineParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromWeekH"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourTenParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromWeekM"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourElevenParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToWeekH"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourTwelveParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToWeekM"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                string ReportName = "rptOffHours" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int OffHoursFleetReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            TimeSpan totalTrip = new TimeSpan(0);
            TimeSpan totalIndling = new TimeSpan(0);
            TimeSpan totalStop = new TimeSpan(0);
            Double totalCost = 0;
            string strTotal = "";

            try
            {
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetFleetOffHoursInfo(UserID, xmlParams, lang, ref  requestOverflowed, ref  outMaxOverflowed, ref totalTrip, ref totalIndling, ref totalStop, ref totalCost);

                if (dsCrystal == null)
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_OffHoursReport.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_OffHours.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

                string DistanceType = FindExistingPreference();



                crParameterDiscreteValue.Value = DistanceType;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["DistanceType"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);




                strTotal = "";
                if (totalTrip.Days > 0)
                {
                    strTotal += totalTrip.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalTrip.Ticks - totalTrip.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalTrip.ToString();
                }






                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotTripTime"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                strTotal = "";
                if (totalIndling.Days > 0)
                {
                    strTotal += totalIndling.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalIndling.Ticks - totalIndling.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalIndling.ToString();
                }




                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotIdling"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                strTotal = "";

                if (totalStop.Days > 0)
                {
                    strTotal += totalStop.Days.ToString() + " d, ";
                    strTotal += new TimeSpan(totalStop.Ticks - totalStop.Days * TimeSpan.TicksPerDay).ToString();
                }
                else
                {
                    strTotal = totalStop.ToString();
                }


                crParameterDiscreteValue.Value = strTotal;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotStopTime"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = totalCost.ToString();
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["TotCost"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);




                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourFifthParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDayH"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourSixthParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDayM"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourSeventhParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDayH"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourEightParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDayM"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourNineParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromWeekH"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourTenParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromWeekM"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourElevenParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToWeekH"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                crParameterDiscreteValue.Value = ReportTemplate.PairFindValue(ReportTemplate.RpOffHourTwelveParamName, xmlParams);
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToWeekM"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


                string ReportName = "rptOffHours" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;




            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int LandmarkActivityReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref bool requestOverflowed, ref bool outMaxOverflowed, ref string ReportPath)
        {

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            try
            {
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetLandmarkActivityInfo(UserID, xmlParams,lang, ref requestOverflowed, ref outMaxOverflowed);

                if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_LandmarkActivity.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_LandmarkActivity.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);





                string ReportName = "rptLandmarkActivity" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int LandmarkFleetActivityReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref bool requestOverflowed, ref bool outMaxOverflowed, ref string ReportPath)
        {
            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);

            try
            {
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];


                DataSet dsCrystal = new DataSet();
                dsCrystal = GetLandmarkFleetActivityInfo(UserID, xmlParams,lang , ref requestOverflowed, ref outMaxOverflowed);

                if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_LandmarkActivity.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_LandmarkActivity.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = FromDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



                crParameterDiscreteValue.Value = ToDate;
                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);





                string ReportName = "rptLandmarkActivity" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;

            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }
        }

        [WebMethod]
        public int ViolationReport(Int32 UserID, string SID, int FleetId, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath)
        {

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);

            ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];



            bool requestOverflowed = false;
            DataSet dsCrystal = new DataSet();
            DataSet ds = new DataSet();
            string[] tmp = xmlParams.Split('*');


            string strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstViolationReport.xsd";

            dsCrystal.ReadXmlSchema(strPath);

            GetViolationInfo(UserID, FleetId, Convert.ToInt32(tmp[0]), Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), lang, Convert.ToInt32(tmp[1]), ref dsCrystal);

            if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
            {
                ReportPath = "";
                return (int)InterfaceError.NoError;
            }


            CrystalDecisions.CrystalReports.Engine.ReportDocument oRpt =
              new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_ViolationReport.rpt";



            oRpt.Load(@sPath);


            DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
            oRpt.SetDataSource(dsCrystal);

            LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Violation.aspx)), lang);

            ParameterFieldDefinitions crParameterFieldDefinitions;
            ParameterFieldDefinition crParameterFieldDefinition;
            ParameterValues crParameterValues = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

            crParameterDiscreteValue.Value = FromDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



            crParameterDiscreteValue.Value = ToDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            GetUserPreferences(UserID);  

            string DistanceType = FindExistingPreference();
            crParameterDiscreteValue.Value ="("+DistanceType+@"\h)";
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["DistanceType"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            crParameterDiscreteValue.Value = GetFleetInfo(Convert.ToInt32(FleetId));

            if (lang != "en" && lang != null)
            {
                Resources.Const.Culture = new System.Globalization.CultureInfo(lang);
                crParameterDiscreteValue.Value = crParameterDiscreteValue.Value.ToString().Replace(VLF.CLS.Def.Const.defaultFleetName, Resources.Const.defaultFleetName);
            }

            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FleetName"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);




            string ReportName = "rptViolationReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


            strPath = ReportsOutputPath;
            string fileExt = "";
            switch (rFormat)
            {
                case 1:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    fileExt = ".pdf";
                    break;
                case 2:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                    fileExt = ".xls";
                    break;
                case 3:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                    fileExt = ".doc";
                    break;
            }


            strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
            string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

            oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            diskOpt.DiskFileName = strPath;
            oRpt.ExportOptions.DestinationOptions = diskOpt;
            oRpt.Export();
            oRpt.Close();
            ReportPath = strURL;
            return (int)InterfaceError.NoError;


        }

        [WebMethod]
        public int IdlingDetailReport(Int32 UserID, string SID, int FleetId, string FromDate, string ToDate, int rFormat, string lang, ref string ReportPath)
        {

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);


            ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];



            bool requestOverflowed = false;
            DataSet dsCrystal = new DataSet();
            DataSet ds = new DataSet();


            string strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstUtilization.xsd";

            dsCrystal.ReadXmlSchema(strPath);

            GetIdlingDetails(UserID, FleetId, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), ref dsCrystal);
            if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
            {
                ReportPath = "";
                return (int)InterfaceError.NoError;
            }



            CrystalDecisions.CrystalReports.Engine.ReportDocument oRpt =
              new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_IdlingDetailsFleet.rpt";



            oRpt.Load(@sPath);


            DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
            oRpt.SetDataSource(dsCrystal);

            LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_IdlingDetailsFleet.aspx)), lang);

            ParameterFieldDefinitions crParameterFieldDefinitions;
            ParameterFieldDefinition crParameterFieldDefinition;
            ParameterValues crParameterValues = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

            crParameterDiscreteValue.Value = FromDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



            crParameterDiscreteValue.Value = ToDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            crParameterDiscreteValue.Value = GetFleetInfo(Convert.ToInt32(FleetId));
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FleetName"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);





            string ReportName = "rptIdlingReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


            strPath = ReportsOutputPath;
            string fileExt = "";
            switch (rFormat)
            {
                case 1:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    fileExt = ".pdf";
                    break;
                case 2:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                    fileExt = ".xls";
                    break;
                case 3:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                    fileExt = ".doc";
                    break;
            }


            strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
            string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

            oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            diskOpt.DiskFileName = strPath;
            oRpt.ExportOptions.DestinationOptions = diskOpt;
            oRpt.Export();
            oRpt.Close();
            ReportPath = strURL;
            return (int)InterfaceError.NoError;


        }

        [WebMethod]
        public int IdlingSummaryOrgReport(Int32 UserID, string SID, string FromDate, string ToDate, int rFormat, string lang, ref string ReportPath)
        {
            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);

            ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];

            bool requestOverflowed = false;

            DataSet ds = new DataSet();


            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstIdlingSummaryReport.xsd";


            dsCrystal.ReadXmlSchema(strPath);


            VLF.DAS.Logic.Fleet dbFleet = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
            DataSet dsFleets = dbFleet.GetFleetsInfoByUserId(UserID);


            foreach (DataRow dr in dsFleets.Tables[0].Rows)
            {
                GetIdlingDataByFleetID(UserID, Convert.ToInt32(dr["FleetId"]), Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), ref dsCrystal);
            }

            if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
            {
                ReportPath = "";
                return (int)InterfaceError.NoError;
            }



            CrystalDecisions.CrystalReports.Engine.ReportDocument oRpt =
              new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_IdlingSummaryReport.rpt";

            oRpt.Load(@sPath);

            DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
            oRpt.SetDataSource(dsCrystal);

            LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_IdlingSummaryOrg.aspx)), lang);

            ParameterFieldDefinitions crParameterFieldDefinitions;
            ParameterFieldDefinition crParameterFieldDefinition;
            ParameterValues crParameterValues = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

            crParameterDiscreteValue.Value = FromDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

            crParameterDiscreteValue.Value = ToDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

            crParameterDiscreteValue.Value = "";
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FleetName"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

            string ReportName = "rptIdlingReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();

            strPath = ReportsOutputPath;
            string fileExt = "";
            switch (rFormat)
            {
                case 1:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    fileExt = ".pdf";
                    break;
                case 2:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                    fileExt = ".xls";
                    break;
                case 3:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                    fileExt = ".doc";
                    break;
            }


            strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
            string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

            oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            diskOpt.DiskFileName = strPath;
            oRpt.ExportOptions.DestinationOptions = diskOpt;
            oRpt.Export();
            oRpt.Close();
            ReportPath = strURL;
            return (int)InterfaceError.NoError;


        }

        [WebMethod]
        public int ViolationReportWithScore(Int32 UserID, string SID, int FleetId, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath)
        {

            // Authenticate 
            LoginManager.GetInstance().SecurityCheck(UserID, SID);

            ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
            ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
            ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];



            bool requestOverflowed = false;
            DataSet dsCrystal = new DataSet();
            DataSet ds = new DataSet();


            string strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstViolationReport.xsd";

            dsCrystal.ReadXmlSchema(strPath);

            
            string ViolationMask = xmlParams.Substring(0, xmlParams.IndexOf(";"));
            string ViolationPoints = xmlParams.Substring(xmlParams.IndexOf(";") + 1);

            GetViolationInfoWithScore(UserID, FleetId, Convert.ToInt32(ViolationMask), Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), ViolationPoints, lang, ref dsCrystal);

            if ((dsCrystal == null) || (dsCrystal.Tables.Count < 1) || (dsCrystal.Tables[0].Rows.Count == 0))
            {
                ReportPath = "";
                return (int)InterfaceError.NoError;
            }


            CrystalDecisions.CrystalReports.Engine.ReportDocument oRpt =
              new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_ViolationSummary.rpt";



            oRpt.Load(@sPath);


            DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
            oRpt.SetDataSource(dsCrystal);

            LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_ViolationSummary.aspx)), lang);

            ParameterFieldDefinitions crParameterFieldDefinitions;
            ParameterFieldDefinition crParameterFieldDefinition;
            ParameterValues crParameterValues = new ParameterValues();
            ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

            crParameterDiscreteValue.Value = FromDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



            crParameterDiscreteValue.Value = ToDate;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);



            crParameterDiscreteValue.Value = GetFleetInfo(Convert.ToInt32(FleetId));

            if (lang != "en" && lang != null)
            {
                Resources.Const.Culture = new System.Globalization.CultureInfo(lang);
                crParameterDiscreteValue.Value = crParameterDiscreteValue.Value.ToString().Replace(VLF.CLS.Def.Const.defaultFleetName, Resources.Const.defaultFleetName);
            }

            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["FleetName"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);




            string[] points = ViolationPoints.Split(';');


            crParameterDiscreteValue.Value = points[0];
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["Speed120"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            crParameterDiscreteValue.Value = points[1];
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["Speed130"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            crParameterDiscreteValue.Value = points[2];
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["Speed140"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            crParameterDiscreteValue.Value = points[3];
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["AccExtreme"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            crParameterDiscreteValue.Value = points[4];
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["AccHarsh"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            crParameterDiscreteValue.Value = points[5];
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["BrakingExtreme"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            crParameterDiscreteValue.Value = points[6];
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["BrakingHarsh"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            crParameterDiscreteValue.Value = points[7];
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["SeatBelt"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            GetUserPreferences(UserID);

            string Speed1 = "120";
            string Speed2 = "130";
            string Speed3 = "140";

            if (UnitOfMes != 1)
            {
                Speed1 = "75";
                Speed2 = "80";
                Speed3 = "85";
            }



            crParameterDiscreteValue.Value = Speed1;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["Speed1"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

            crParameterDiscreteValue.Value = Speed2;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["Speed2"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

            crParameterDiscreteValue.Value = Speed3;
            crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
            crParameterFieldDefinition = crParameterFieldDefinitions["Speed3"];
            crParameterValues = crParameterFieldDefinition.CurrentValues;
            crParameterValues.Add(crParameterDiscreteValue);
            crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);


            string ReportName = "rptViolationReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();


            strPath = ReportsOutputPath;
            string fileExt = "";
            switch (rFormat)
            {
                case 1:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                    fileExt = ".pdf";
                    break;
                case 2:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                    fileExt = ".xls";
                    break;
                case 3:
                    oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                    fileExt = ".doc";
                    break;
            }


            strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
            string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

            oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
            diskOpt.DiskFileName = strPath;
            oRpt.ExportOptions.DestinationOptions = diskOpt;
            oRpt.Export();
            oRpt.Close();
            ReportPath = strURL;
            return (int)InterfaceError.NoError;


        }

        [WebMethod]
        public int FleetMaintenaceReport(Int32 UserID, string SID, int FleetId, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            try
            {
                TimeSpan currDuration;

                GetUserPreferences(UserID);
                ReportsOutputPathURL = ConfigurationSettings.AppSettings["ReportsOutputPathURL"];
                ReportsOutputPath = @ConfigurationSettings.AppSettings["ReportsOutputPath"];
                ReportsDataSetPath = @ConfigurationSettings.AppSettings["ReportsDataSetPath"];

                // Authenticate 
                LoginManager.GetInstance().SecurityCheck(UserID, SID);


                DataSet dsCrystal = new DataSet();
                strPath = ReportsDataSetPath;
                strPath = Server.MapPath(strPath) + @"\dstMaintenanceReport.xsd";

                dsCrystal.ReadXmlSchema(strPath);
                StringReader strrXML = null;
                DataSet ds = new DataSet();
                ds = GetFleetMaintenance(UserID, xmlParams,lang, ref RequestOverflowed, ref outMaxOverflowed);


                if ((ds == null) || (ds.Tables.Count < 1) || (ds.Tables[0].Rows.Count == 0))
                {
                    ReportPath = "";
                    return (int)InterfaceError.NoError;
                }




                DataColumn colCurrentValue = new DataColumn("CurrentValue", Type.GetType("System.String"));
                ds.Tables[0].Columns.Add(colCurrentValue);

                DataColumn colStatus = new DataColumn("Status", Type.GetType("System.String"));
                ds.Tables[0].Columns.Add(colStatus);

                GetUserPreferences(UserID);

                foreach (DataRow dr in ds.Tables[0].Rows)
                {
                    if (Convert.ToSingle(dr["CurrentEngHrs"]) != 0)
                    {

                        dr["CurrentValue"] = dr["CurrentEngHrs"] + " Hrs";
                        dr["Status"] = Convert.ToString(Math.Round((Convert.ToSingle(dr["CurrentEngHrs"]) * 100) / (Convert.ToSingle(dr["LastSrvEngHrs"]) + Convert.ToSingle(dr["EngHrsSrvInterval"])), 2));
                    }
                    else if (Convert.ToSingle(dr["CurrentOdo"]) != 0)
                    {
                        if (UnitOfMes == 1)
                            dr["CurrentValue"] = dr["CurrentOdo"] + " km";
                        if (UnitOfMes == 0.6214)
                            dr["CurrentValue"] = dr["CurrentOdo"] + " mi";

                        if (Convert.ToSingle(dr["LastSrvOdo"]) != 0 && Convert.ToSingle(dr["MaxSrvInterval"]) != 0)
                            dr["Status"] = Convert.ToString(Math.Round((Convert.ToSingle(dr["CurrentOdo"]) * 100) / (Convert.ToSingle(dr["LastSrvOdo"]) + Convert.ToSingle(dr["MaxSrvInterval"])), 2));
                        else
                            dr["Status"] = null;
                    }
                }



                CopyRows(ds.Tables[0], dsCrystal.Tables["rpt_MaintenanceReport"]);

                LocalizeAddress(lang, ref dsCrystal);

                ReportDocument oRpt = new ReportDocument();

                DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
                string sPath = Server.MapPath(@ConfigurationSettings.AppSettings["ReportsRootPath"]) + @"\rpt_FleetMaintenance.rpt";
                oRpt.Load(@sPath);


                oRpt.SetDataSource(dsCrystal);

                LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_FleetMaintenance.aspx)), lang);

                ParameterFieldDefinitions crParameterFieldDefinitions;
                ParameterFieldDefinition crParameterFieldDefinition;
                ParameterValues crParameterValues = new ParameterValues();
                ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

                crParameterDiscreteValue.Value = GetFleetInfo(Convert.ToInt32(FleetId));

                if (lang != "en" && lang != null)
                {
                    Resources.Const.Culture = new System.Globalization.CultureInfo(lang);
                    crParameterDiscreteValue.Value = crParameterDiscreteValue.Value.ToString().Replace(VLF.CLS.Def.Const.defaultFleetName, Resources.Const.defaultFleetName);
                }

                crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
                crParameterFieldDefinition = crParameterFieldDefinitions["FleetName"];
                crParameterValues = crParameterFieldDefinition.CurrentValues;
                crParameterValues.Add(crParameterDiscreteValue);
                crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

                string ReportName = "rptFleetMaintenance" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();



                strPath = ReportsOutputPath;
                string fileExt = "";
                switch (rFormat)
                {
                    case 1:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                        fileExt = ".pdf";
                        break;
                    case 2:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                        fileExt = ".xls";
                        break;
                    case 3:
                        oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                        fileExt = ".doc";
                        break;
                }


                strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
                string strURL = "http://" + ConfigurationSettings.AppSettings["ServerIp"] + ConfigurationSettings.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

                oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
                diskOpt.DiskFileName = strPath;
                oRpt.ExportOptions.DestinationOptions = diskOpt;
                oRpt.Export();
                oRpt.Close();
                ReportPath = strURL;
                return (int)InterfaceError.NoError;


            }
            catch (Exception Ex)
            {
                return (int)ASIErrorCheck.CheckError(Ex);
            }

        }

       [WebMethod(Description="Get landmark summary report for fleet")]
       public int LandmarkFleetReport(Int32 UserID, string SID, int fleetId, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath)
       {
          // Authenticate 
          LoginManager.GetInstance().SecurityCheck(UserID, SID);
          string landmark = "", strFrom = "", strTo = "";
          try
          {
             DataSet dsCrystal = new DataSet();
             using (VLF.CLS.Json json = new Json(xmlParams, ';', '='))
             {
                landmark = json[ReportTemplate.RptParamLandmark];
                //strFrom = json[ReportTemplate.RptParamFromDateTime];
                //strTo = json[ReportTemplate.RptParamToDateTime];
             }
             
             if (String.IsNullOrEmpty(landmark))
                throw new ArgumentException("XML Params string error: Landmark name is null or empty");
             //if (String.IsNullOrEmpty(strFrom))
             //   throw new ArgumentException("XML Params string error: FromDate is null or empty");
             //if (String.IsNullOrEmpty(strTo))
             //   throw new ArgumentException("XML Params string error: ToDate is null or empty");

             using (VLF.DAS.Logic.Report rpt = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString()))
             {
                dsCrystal = rpt.GetLandmarkFleetSummaryReport(UserID, fleetId, landmark,
                   Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate));
             }

             if (!Util.IsDataSetValid(dsCrystal))
             {
                ReportPath = "";
                return (int)InterfaceError.NoError;
             }

             LocalizeAddress(lang, ref dsCrystal);

             ReportDocument oRpt = new ReportDocument();

             DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
             string sPath = Server.MapPath(@ConfigurationManager.AppSettings["ReportsRootPath"]) + @"\rpt_Landmarks.rpt";
             oRpt.Load(@sPath);

             oRpt.SetDataSource(dsCrystal);

             LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Landmarks)), lang);

             # region Report parameters
             ParameterFieldDefinitions crParameterFieldDefinitions;
             ParameterFieldDefinition crParameterFieldDefinition;
             ParameterValues crParameterValues = new ParameterValues();
             ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

             // from date
             crParameterDiscreteValue.Value = FromDate;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // to date
             crParameterDiscreteValue.Value = ToDate;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // landmark name
             crParameterDiscreteValue.Value = landmark;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["LandmarkName"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             # endregion

             string ReportName = "rptLandmarksReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();

             strPath = ReportsOutputPath;
             string fileExt = "";
             switch (rFormat)
             {
                case 1:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                   fileExt = ".pdf";
                   break;
                case 2:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                   fileExt = ".xls";
                   break;
                case 3:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                   fileExt = ".doc";
                   break;
             }


             strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
             string strURL = "http://" + ConfigurationManager.AppSettings["ServerIp"] + 
                ConfigurationManager.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

             oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
             diskOpt.DiskFileName = strPath;
             oRpt.ExportOptions.DestinationOptions = diskOpt;
             oRpt.Export();
             oRpt.Close();
             ReportPath = strURL;
             return (int)InterfaceError.NoError;

          }
          catch (Exception Ex)
          {
             return (int)ASIErrorCheck.CheckError(Ex);
          }
       }

       [WebMethod(Description = "Get landmark summary report for vehicle")]
       public int LandmarkVehicleReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath)
       {
          // Authenticate 
          LoginManager.GetInstance().SecurityCheck(UserID, SID);
          string landmark = "", plateNo = "", strFrom = "", strTo = "";
          //long vehicleId = -1;

          try
          {
             DataSet dsCrystal = new DataSet();

             using (VLF.CLS.Json json = new Json(xmlParams, ';', '='))
             {
                landmark = json[ReportTemplate.RptParamLandmark];
                plateNo = json[ReportTemplate.RptParamLicensePlate];
                //strFrom = json[ReportTemplate.RptParamFromDateTime];
                //strTo = json[ReportTemplate.RptParamToDateTime];
             }

             if (String.IsNullOrEmpty(plateNo))
                throw new ArgumentException("XML Params string error: License Plate is null or empty");
             if (String.IsNullOrEmpty(landmark))
                throw new ArgumentException("XML Params string error: Landmark name is null or empty");
             //if (String.IsNullOrEmpty(strFrom))
             //   throw new ArgumentException("XML Params string error: FromDate is null or empty");
             //if (String.IsNullOrEmpty(strTo))
             //   throw new ArgumentException("XML Params string error: ToDate is null or empty");

             //using (VLF.DAS.Logic.Vehicle vass = new VLF.DAS.Logic.Vehicle(Application["ConnectionString"].ToString()))
             //{
             //   vehicleId = vass.GetVehicleIdByLicensePlate(plateNo);
             //}

             using (VLF.DAS.Logic.Report rpt = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString()))
             {
                dsCrystal = rpt.GetLandmarkVehicleSummaryReport(UserID, plateNo, landmark,
                   Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate));
             }

             if (!Util.IsDataSetValid(dsCrystal))
             {
                ReportPath = "";
                return (int)InterfaceError.NoError;
             }

             LocalizeAddress(lang, ref dsCrystal);

             ReportDocument oRpt = new ReportDocument();

             DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
             string sPath = Server.MapPath(@ConfigurationManager.AppSettings["ReportsRootPath"]) + @"\rpt_Landmarks.rpt";
             oRpt.Load(@sPath);

             oRpt.SetDataSource(dsCrystal);

             LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Landmarks)), lang);

             # region Report parameters

             ParameterFieldDefinitions crParameterFieldDefinitions;
             ParameterFieldDefinition crParameterFieldDefinition;
             ParameterValues crParameterValues = new ParameterValues();
             ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

             // from date
             crParameterDiscreteValue.Value = FromDate;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // to date
             crParameterDiscreteValue.Value = ToDate;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // landmark name
             crParameterDiscreteValue.Value = landmark;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["LandmarkName"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             # endregion

             string ReportName = "rptLandmarksReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();

             strPath = ReportsOutputPath;
             string fileExt = "";
             switch (rFormat)
             {
                case 1:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                   fileExt = ".pdf";
                   break;
                case 2:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                   fileExt = ".xls";
                   break;
                case 3:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                   fileExt = ".doc";
                   break;
             }


             strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
             string strURL = "http://" + ConfigurationManager.AppSettings["ServerIp"] + 
                ConfigurationManager.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

             oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
             diskOpt.DiskFileName = strPath;
             oRpt.ExportOptions.DestinationOptions = diskOpt;
             oRpt.Export();
             oRpt.Close();
             ReportPath = strURL;
             return (int)InterfaceError.NoError;

          }
          catch (Exception Ex)
          {
             return (int)ASIErrorCheck.CheckError(Ex);
          }
       }

       [WebMethod(Description = "Get landmark details report for vehicle")]
       public int LandmarkVehicleDetailsReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath)
       {
          // Authenticate 
          LoginManager.GetInstance().SecurityCheck(UserID, SID);
          string landmark = "", plateNo = "", strFrom = "", strTo = "";
          //long vehicleId = -1;

          try
          {
             DataSet dsCrystal = new DataSet();

             using (VLF.CLS.Json json = new Json(xmlParams, ';', '='))
             {
                landmark = json[ReportTemplate.RptParamLandmark];
                plateNo = json[ReportTemplate.RptParamLicensePlate];
                //strFrom = json[ReportTemplate.RptParamFromDateTime];
                //strTo = json[ReportTemplate.RptParamToDateTime];
             }

             if (String.IsNullOrEmpty(plateNo))
                throw new ArgumentException("XML Params string error: License Plate is null or empty");
             if (String.IsNullOrEmpty(landmark))
                throw new ArgumentException("XML Params string error: Landmark name is null or empty");
             //if (String.IsNullOrEmpty(strFrom))
             //   throw new ArgumentException("XML Params string error: FromDate is null or empty");
             //if (String.IsNullOrEmpty(strTo))
             //   throw new ArgumentException("XML Params string error: ToDate is null or empty");

             //using (VLF.DAS.Logic.Vehicle vass = new VLF.DAS.Logic.Vehicle(Application["ConnectionString"].ToString()))
             //{
             //   vehicleId = vass.GetVehicleIdByLicensePlate(plateNo);
             //}

             using (VLF.DAS.Logic.Report rpt = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString()))
             {
                dsCrystal = rpt.GetLandmarkVehicleDetailsReport(UserID, plateNo, landmark,
                   Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate));
             }

             if (!Util.IsDataSetValid(dsCrystal))
             {
                ReportPath = "";
                return (int)InterfaceError.NoError;
             }

             LocalizeAddress(lang, ref dsCrystal);

             ReportDocument oRpt = new ReportDocument();

             DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
             string sPath = Server.MapPath(@ConfigurationManager.AppSettings["ReportsRootPath"]) + @"\rpt_LandmarkDetails.rpt";
             oRpt.Load(@sPath);

             oRpt.SetDataSource(dsCrystal);

             LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_LandmarkDetails)), lang);

             # region Report parameters

             ParameterFieldDefinitions crParameterFieldDefinitions;
             ParameterFieldDefinition crParameterFieldDefinition;
             ParameterValues crParameterValues = new ParameterValues();
             ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

             // from date
             crParameterDiscreteValue.Value = FromDate;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // to date
             crParameterDiscreteValue.Value = ToDate;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // landmark name
             crParameterDiscreteValue.Value = landmark;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["LandmarkName"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             # endregion

             string ReportName = "rptLandmarksReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();

             strPath = ReportsOutputPath;
             string fileExt = "";
             switch (rFormat)
             {
                case 1:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                   fileExt = ".pdf";
                   break;
                case 2:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                   fileExt = ".xls";
                   break;
                case 3:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                   fileExt = ".doc";
                   break;
             }


             strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
             string strURL = "http://" + ConfigurationManager.AppSettings["ServerIp"] + 
                ConfigurationManager.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

             oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
             diskOpt.DiskFileName = strPath;
             oRpt.ExportOptions.DestinationOptions = diskOpt;
             oRpt.Export();
             oRpt.Close();
             ReportPath = strURL;
             return (int)InterfaceError.NoError;

          }
          catch (Exception Ex)
          {
             return (int)ASIErrorCheck.CheckError(Ex);
          }
       }

       [WebMethod(Description = "Get landmark details report for fleet")]
       public int LandmarkFleetDetailsReport(Int32 UserID, string SID, int fleetId, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath)
       {
          // Authenticate 
          LoginManager.GetInstance().SecurityCheck(UserID, SID);
          string landmark = "", strFrom = "", strTo = "";
          try
          {
             DataSet dsCrystal = new DataSet();
             using (VLF.CLS.Json json = new Json(xmlParams, ';', '='))
             {
                landmark = json[ReportTemplate.RptParamLandmark];
                //strFrom = json[ReportTemplate.RptParamFromDateTime];
                //strTo = json[ReportTemplate.RptParamToDateTime];
             }

             if (String.IsNullOrEmpty(landmark))
                throw new ArgumentException("XML Params string error: Landmark name is null or empty");
             //if (String.IsNullOrEmpty(strFrom))
             //   throw new ArgumentException("XML Params string error: FromDate is null or empty");
             //if (String.IsNullOrEmpty(strTo))
             //   throw new ArgumentException("XML Params string error: ToDate is null or empty");

             using (VLF.DAS.Logic.Report rpt = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString()))
             {
                dsCrystal = rpt.GetLandmarkFleetDetailsReport(UserID, fleetId, landmark,
                   Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate));
             }

             if (!Util.IsDataSetValid(dsCrystal))
             {
                ReportPath = "";
                return (int)InterfaceError.NoError;
             }

             LocalizeAddress(lang, ref dsCrystal);

             ReportDocument oRpt = new ReportDocument();

             DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
             string sPath = Server.MapPath(@ConfigurationManager.AppSettings["ReportsRootPath"]) + @"\rpt_LandmarkDetails.rpt";
             oRpt.Load(@sPath);

             oRpt.SetDataSource(dsCrystal);

             //LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Exception.aspx)), lang);

             # region Report parameters
             ParameterFieldDefinitions crParameterFieldDefinitions;
             ParameterFieldDefinition crParameterFieldDefinition;
             ParameterValues crParameterValues = new ParameterValues();
             ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

             // from date
             crParameterDiscreteValue.Value = FromDate;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // to date
             crParameterDiscreteValue.Value = ToDate;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // landmark name
             crParameterDiscreteValue.Value = landmark;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["LandmarkName"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             # endregion

             string ReportName = "rptLandmarksReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();

             strPath = ReportsOutputPath;
             string fileExt = "";
             switch (rFormat)
             {
                case 1:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                   fileExt = ".pdf";
                   break;
                case 2:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                   fileExt = ".xls";
                   break;
                case 3:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                   fileExt = ".doc";
                   break;
             }


             strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
             string strURL = "http://" + ConfigurationManager.AppSettings["ServerIp"] +
                ConfigurationManager.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

             oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
             diskOpt.DiskFileName = strPath;
             oRpt.ExportOptions.DestinationOptions = diskOpt;
             oRpt.Export();
             oRpt.Close();
             ReportPath = strURL;
             return (int)InterfaceError.NoError;

          }
          catch (Exception Ex)
          {
             return (int)ASIErrorCheck.CheckError(Ex);
          }
       }

       [WebMethod(Description = "Get Geozone report for fleet")]
       public int GeozoneFleetReport(Int32 UserID, string SID, int fleetId, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath)
       {
          // Authenticate 
          LoginManager.GetInstance().SecurityCheck(UserID, SID);
          string strFrom = "", strTo = "";
          long geozone = -1;
          try
          {
             DataSet dsCrystal = new DataSet();
             using (VLF.CLS.Json json = new Json(xmlParams, ';', '='))
             {
                if (!Int64.TryParse(json[ReportTemplate.RptParamGeozone], out geozone))
                  throw new ArgumentException("XML Params string error: Geozone is null or empty");
               //strFrom = json[ReportTemplate.RptParamFromDateTime];
               //strTo = json[ReportTemplate.RptParamToDateTime];
            }

            //if (String.IsNullOrEmpty(strFrom))
            //   throw new ArgumentException("XML Params string error: FromDate is null or empty");
            //if (String.IsNullOrEmpty(strTo))
            //   throw new ArgumentException("XML Params string error: ToDate is null or empty");

            using (VLF.DAS.Logic.Report rpt = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString()))
            {
               dsCrystal = rpt.GetFleetGeozoneReport(UserID, fleetId, geozone,
                  Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate));
            }

             if (!Util.IsDataSetValid(dsCrystal))
             {
                ReportPath = "";
                return (int)InterfaceError.NoError;
             }

             LocalizeAddress(lang, ref dsCrystal);

             ReportDocument oRpt = new ReportDocument();

             DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
             string sPath = Server.MapPath(@ConfigurationManager.AppSettings["ReportsRootPath"]) + @"\rpt_Geozone.rpt";
             oRpt.Load(@sPath);

             oRpt.SetDataSource(dsCrystal);

             LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Geozone)), lang);

             # region Report parameters
             ParameterFieldDefinitions crParameterFieldDefinitions;
             ParameterFieldDefinition crParameterFieldDefinition;
             ParameterValues crParameterValues = new ParameterValues();
             ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

             // from date
             crParameterDiscreteValue.Value = FromDate;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // to date
             crParameterDiscreteValue.Value = ToDate;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // gz name
             //crParameterDiscreteValue.Value = landmark;
             //crParameterFieldDefinition = crParameterFieldDefinitions["LandmarkName"];
             //crParameterValues = crParameterFieldDefinition.CurrentValues;
             //crParameterValues.Add(crParameterDiscreteValue);
             //crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             # endregion

             string ReportName = "rptGeozoneReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();

             strPath = ReportsOutputPath;
             string fileExt = "";
             switch (rFormat)
             {
                case 1:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                   fileExt = ".pdf";
                   break;
                case 2:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                   fileExt = ".xls";
                   break;
                case 3:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                   fileExt = ".doc";
                   break;
             }


             strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
             string strURL = "http://" + ConfigurationManager.AppSettings["ServerIp"] + 
                ConfigurationManager.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

             oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
             diskOpt.DiskFileName = strPath;
             oRpt.ExportOptions.DestinationOptions = diskOpt;
             oRpt.Export();
             oRpt.Close();
             ReportPath = strURL;
             return (int)InterfaceError.NoError;

          }
          catch (Exception Ex)
          {
             return (int)ASIErrorCheck.CheckError(Ex);
          }
       }

       [WebMethod(Description = "Get Geozone report for vehicle")]
       public int GeozoneVehicleReport(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath)
       {
          // Authenticate 
          LoginManager.GetInstance().SecurityCheck(UserID, SID);
          long geozone = -1/*, vehicleId = -1*/;
          string plateNo = "", strFrom = "", strTo = "";
          try
          {
             DataSet dsCrystal = new DataSet();
             using (VLF.CLS.Json json = new Json(xmlParams, ';', '='))
             {
                if (!Int64.TryParse(json[ReportTemplate.RptParamGeozone], out geozone))
                   throw new ArgumentException("XML Params string error: Geozone is null or empty");
                plateNo = json[ReportTemplate.RptParamLicensePlate];
                //strFrom = json[ReportTemplate.RptParamFromDateTime];
                //strTo = json[ReportTemplate.RptParamToDateTime];
             }

             if (String.IsNullOrEmpty(plateNo))
                throw new ArgumentException("XML Params string error: Vehicle is null or empty");
             //if (String.IsNullOrEmpty(strFrom))
             //   throw new ArgumentException("XML Params string error: FromDate is null or empty");
             //if (String.IsNullOrEmpty(strTo))
             //   throw new ArgumentException("XML Params string error: ToDate is null or empty");

             //using (VLF.DAS.Logic.Vehicle vass = new VLF.DAS.Logic.Vehicle(Application["ConnectionString"].ToString()))
             //{
             //   vehicleId = vass.GetVehicleIdByLicensePlate(plateNo);
             //}

             using (VLF.DAS.Logic.Report rpt = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString()))
             {
                dsCrystal = rpt.GetVehicleGeozoneReport(UserID, plateNo, geozone,
                   Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate));
             }

             if (!Util.IsDataSetValid(dsCrystal))
             {
                ReportPath = "";
                return (int)InterfaceError.NoError;
             }

             LocalizeAddress(lang, ref dsCrystal);

             ReportDocument oRpt = new ReportDocument();

             DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
             string sPath = Server.MapPath(@ConfigurationManager.AppSettings["ReportsRootPath"]) + @"\rpt_Geozone.rpt";
             oRpt.Load(@sPath);

             oRpt.SetDataSource(dsCrystal);

             LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Geozone)), lang);

             # region Report parameters
             ParameterFieldDefinitions crParameterFieldDefinitions;
             ParameterFieldDefinition crParameterFieldDefinition;
             ParameterValues crParameterValues = new ParameterValues();
             ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

             // from date
             crParameterDiscreteValue.Value = FromDate;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // to date
             crParameterDiscreteValue.Value = ToDate;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // gz name
             //crParameterDiscreteValue.Value = landmark;
             //crParameterFieldDefinition = crParameterFieldDefinitions["LandmarkName"];
             //crParameterValues = crParameterFieldDefinition.CurrentValues;
             //crParameterValues.Add(crParameterDiscreteValue);
             //crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             # endregion

             string ReportName = "rptGeozoneReport" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();

             strPath = ReportsOutputPath;
             string fileExt = "";
             switch (rFormat)
             {
                case 1:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                   fileExt = ".pdf";
                   break;
                case 2:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                   fileExt = ".xls";
                   break;
                case 3:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                   fileExt = ".doc";
                   break;
             }


             strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
             string strURL = "http://" + ConfigurationManager.AppSettings["ServerIp"] + 
                ConfigurationManager.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

             oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
             diskOpt.DiskFileName = strPath;
             oRpt.ExportOptions.DestinationOptions = diskOpt;
             oRpt.Export();
             oRpt.Close();
             ReportPath = strURL;
             return (int)InterfaceError.NoError;

          }
          catch (Exception Ex)
          {
             return (int)ASIErrorCheck.CheckError(Ex);
          }
       }

       [WebMethod(Description = "Vehicle Inactivity Report")]
       public int InactivityReport4Vehicle(Int32 UserID, string SID, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath)
       {
          try
          {
             // Authenticate 
             LoginManager.GetInstance().SecurityCheck(UserID, SID);
             long vehicleId = -1;
             short sensorId = -1;
             string plateNo = "", strFrom = "", strTo = "";

             DataSet dsCrystal = new DataSet();
             using (VLF.CLS.Json json = new Json(xmlParams, ';', '='))
             {
                plateNo = json[ReportTemplate.RptParamLicensePlate];
                sensorId = Convert.ToInt16(json[ReportTemplate.RptParamSensorId]);
                //strFrom = json[ReportTemplate.RptParamFromDateTime];
                //strTo = json[ReportTemplate.RptParamToDateTime];
             }

             if (String.IsNullOrEmpty(plateNo))
                throw new ArgumentException("XML Params string error: Vehicle is null or empty");
             //if (String.IsNullOrEmpty(strFrom))
             //   throw new ArgumentException("XML Params string error: FromDate is null or empty");
             //if (String.IsNullOrEmpty(strTo))
             //   throw new ArgumentException("XML Params string error: ToDate is null or empty");

             //using (VLF.DAS.Logic.Vehicle vass = new VLF.DAS.Logic.Vehicle(Application["ConnectionString"].ToString()))
             //{
             //   vehicleId = vass.GetVehicleIdByLicensePlate(plateNo);
             //}

             using (VLF.DAS.Logic.Report rpt = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString()))
             {
                dsCrystal = rpt.GetVehicleInactivityReport(UserID, plateNo, sensorId, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate));
             }

             if (!Util.IsDataSetValid(dsCrystal))
             {
                ReportPath = "";
                return (int)InterfaceError.NoError;
             }

             LocalizeAddress(lang, ref dsCrystal);

             ReportDocument oRpt = new ReportDocument();

             DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
             string sPath = Server.MapPath(@ConfigurationManager.AppSettings["ReportsRootPath"]) + @"\rpt_Inactivity.rpt";
             oRpt.Load(@sPath);

             oRpt.SetDataSource(dsCrystal);

             LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Inactivity)), lang);

             # region Report parameters
             ParameterFieldDefinitions crParameterFieldDefinitions;
             ParameterFieldDefinition crParameterFieldDefinition;
             ParameterValues crParameterValues = new ParameterValues();
             ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

             // from date
             crParameterDiscreteValue.Value = FromDate;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // to date
             crParameterDiscreteValue.Value = ToDate;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // name
             //crParameterDiscreteValue.Value = "";
             //crParameterFieldDefinition = crParameterFieldDefinitions[""];
             //crParameterValues = crParameterFieldDefinition.CurrentValues;
             //crParameterValues.Add(crParameterDiscreteValue);
             //crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             # endregion

             string ReportName = "rptInactivity" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();

             strPath = ReportsOutputPath;
             string fileExt = "";
             switch (rFormat)
             {
                case 1:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                   fileExt = ".pdf";
                   break;
                case 2:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                   fileExt = ".xls";
                   break;
                case 3:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                   fileExt = ".doc";
                   break;
             }


             strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
             string strURL = "http://" + ConfigurationManager.AppSettings["ServerIp"] + 
                ConfigurationManager.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

             oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
             diskOpt.DiskFileName = strPath;
             oRpt.ExportOptions.DestinationOptions = diskOpt;
             oRpt.Export();
             oRpt.Close();
             ReportPath = strURL;

             return (int)InterfaceError.NoError;
          }
          catch (Exception Ex)
          {
             return (int)ASIErrorCheck.CheckError(Ex);
          }
       }

       [WebMethod(Description = "Fleet Inactivity Report")]
       public int InactivityReport4Fleet(Int32 UserID, string SID, int fleetId, string FromDate, string ToDate, string xmlParams, int rFormat, string lang, ref string ReportPath)
       {
          try
          {
             // Authenticate 
             LoginManager.GetInstance().SecurityCheck(UserID, SID);
             string strFrom = "", strTo = "";
             short sensorId = -1;

             DataSet dsCrystal = new DataSet();
             using (VLF.CLS.Json json = new Json(xmlParams, ';', '='))
             {
                sensorId = Convert.ToInt16(json[ReportTemplate.RptParamSensorId]);
                //strFrom = json[ReportTemplate.RptParamFromDateTime];
                //strTo = json[ReportTemplate.RptParamToDateTime];
             }

             //if (String.IsNullOrEmpty(strFrom))
             //   throw new ArgumentException("XML Params string error: FromDate is null or empty");
             //if (String.IsNullOrEmpty(strTo))
             //   throw new ArgumentException("XML Params string error: ToDate is null or empty");

             using (VLF.DAS.Logic.Report rpt = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString()))
             {
                dsCrystal = rpt.GetFleetInactivityReport(UserID, fleetId, sensorId, Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate));
             }

             if (!Util.IsDataSetValid(dsCrystal))
             {
                ReportPath = "";
                return (int)InterfaceError.NoError;
             }

             LocalizeAddress(lang, ref dsCrystal);

             ReportDocument oRpt = new ReportDocument();

             DiskFileDestinationOptions diskOpt = new DiskFileDestinationOptions();
             string sPath = Server.MapPath(@ConfigurationManager.AppSettings["ReportsRootPath"]) + @"\rpt_Inactivity.rpt";
             oRpt.Load(@sPath);

             oRpt.SetDataSource(dsCrystal);

             LocalizeTextObject(ref oRpt, new ResourceManager(typeof(Resources.Report_Inactivity)), lang);

             # region Report parameters
             ParameterFieldDefinitions crParameterFieldDefinitions;
             ParameterFieldDefinition crParameterFieldDefinition;
             ParameterValues crParameterValues = new ParameterValues();
             ParameterDiscreteValue crParameterDiscreteValue = new ParameterDiscreteValue();

             // from date
             crParameterDiscreteValue.Value = FromDate;
             crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["FromDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // to date
             crParameterDiscreteValue.Value = ToDate;
             //crParameterFieldDefinitions = oRpt.DataDefinition.ParameterFields;
             crParameterFieldDefinition = crParameterFieldDefinitions["ToDate"];
             crParameterValues = crParameterFieldDefinition.CurrentValues;
             crParameterValues.Add(crParameterDiscreteValue);
             crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             // sns name
             //crParameterDiscreteValue.Value = sensor;
             //crParameterFieldDefinition = crParameterFieldDefinitions["Sensor"];
             //crParameterValues = crParameterFieldDefinition.CurrentValues;
             //crParameterValues.Add(crParameterDiscreteValue);
             //crParameterFieldDefinition.ApplyCurrentValues(crParameterValues);

             # endregion

             string ReportName = "rptInactivity" + DateTime.Now.Day.ToString() + DateTime.Now.Millisecond.ToString();

             strPath = ReportsOutputPath;
             string fileExt = "";
             switch (rFormat)
             {
                case 1:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.PortableDocFormat;
                   fileExt = ".pdf";
                   break;
                case 2:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.ExcelRecord;
                   fileExt = ".xls";
                   break;
                case 3:
                   oRpt.ExportOptions.ExportFormatType = ExportFormatType.WordForWindows;
                   fileExt = ".doc";
                   break;
             }


             strPath = Server.MapPath(strPath) + @"\" + ReportName + fileExt;
             string strURL = "http://" + ConfigurationManager.AppSettings["ServerIp"] +
                ConfigurationManager.AppSettings["ReportsRootPath"] + "/TmpReports/" + ReportName + fileExt;

             oRpt.ExportOptions.ExportDestinationType = ExportDestinationType.DiskFile;
             diskOpt.DiskFileName = strPath;
             oRpt.ExportOptions.DestinationOptions = diskOpt;
             oRpt.Export();
             oRpt.Close();
             ReportPath = strURL;

             return (int)InterfaceError.NoError;
          }
          catch (Exception Ex)
          {
             return (int)ASIErrorCheck.CheckError(Ex);
          }
       }

       # region Private Methods
       private string FindExistingPreference()
        {
            try
            {

                if (UnitOfMes == 1)
                    return "km";
                else if (UnitOfMes == 0.6214)
                    return "mi";
                else
                    return "";
            }
            catch (Exception Ex)
            {
                System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceError, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Error, Ex.Message.ToString() + " Form:Report_History.aspx"));
                return "";
            }

        }

        private DataSet dsHistory_Fill(Int32 UserID, string LicensePlate, DateTime FromDate, DateTime ToDate, string XmlParams, Int16 DclId, string lang, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            try
            {

                DataSet dsHistory = new DataSet();
                DataSet dsVehicle = new DataSet();
                StringReader strrXML = null;

                string xml = "";
                VLF.DAS.Logic.Vehicle dbVehicle = null;

                dbVehicle = new VLF.DAS.Logic.Vehicle(Application["ConnectionString"].ToString());
                dsVehicle = dbVehicle.GetVehicleInfoByLicensePlate(LicensePlate);
                Int64 VehicleId = 0;
                if (dsVehicle.Tables[0].Rows.Count > 0)
                    VehicleId = Convert.ToInt64(dsVehicle.Tables[0].Rows[0]["VehicleId"]);
                else
                    return null;


                VLF.DAS.Logic.MessageQueue dbMessageQueue = new VLF.DAS.Logic.MessageQueue(Application["ConnectionString"].ToString());

                string[] ParamList = new string[4];
                ParamList = XmlParams.ToString().Split(';');

                int totalSqlRecords = 0;


                dsHistory = dbMessageQueue.GetMessagesFromHistoryByVehicleId(UserID, VehicleId, FromDate.AddHours(-TimeZone - DayLightSaving), ToDate.AddHours(-TimeZone - DayLightSaving), Convert.ToBoolean(ParamList[0]), Convert.ToBoolean(ParamList[1]), Convert.ToBoolean(ParamList[2]), Convert.ToBoolean(ParamList[3]), DclId,lang, ref RequestOverflowed, ref totalSqlRecords);

                if (lang != "en" && lang != null)
                {
                   LocalizationLayer.ServerLocalizationLayer dbl = new LocalizationLayer.ServerLocalizationLayer(Application["ConnectionString"].ToString());
                   dbl.LocalizationData(lang, "BoxMsgInTypeId", "BoxMsgInTypeName", "MessageType", ref dsHistory);
                }

                if (dsHistory.Tables[0].Columns.IndexOf("StreetAddress") == -1)
                {
                    DataColumn colStreetAddress = new DataColumn("StreetAddress", Type.GetType("System.String"));
                    dsHistory.Tables[0].Columns.Add(colStreetAddress);
                }

                // Show Heading

                DataColumn dc = new DataColumn();
                dc.ColumnName = "MyHeading";
                dc.DataType = Type.GetType("System.String");
                dc.DefaultValue = "";
                dsHistory.Tables[0].Columns.Add(dc);


                if (dsHistory.Tables[0].Columns.IndexOf("Speed") != -1 && lang == "en")
                {
                    foreach (DataRow rowItem in dsHistory.Tables[0].Rows)
                    {
                           // Heading
                           if ((rowItem["Speed"].ToString().TrimEnd() != "0") && (rowItem["Speed"].ToString().TrimEnd() != "N/A") && (rowItem["Speed"].ToString().TrimEnd() != VLF.CLS.Def.Const.blankValue))
                           {

                               if ((rowItem["Heading"] != null) &&
                                   (rowItem["Heading"].ToString() != "") && rowItem["Heading"].ToString() != "N/A")
                               {
                                   rowItem["MyHeading"] = Heading(rowItem["Heading"].ToString());
                               }
                           }
                       
                       
                           if ((Convert.ToInt16(rowItem["BoxMsgInTypeId"]) == Convert.ToInt16(VLF.CLS.Def.Enums.MessageType.ExtremeAcceleration)) ||
                         (Convert.ToInt16(rowItem["BoxMsgInTypeId"]) == Convert.ToInt16(VLF.CLS.Def.Enums.MessageType.ExtremeBraking)) ||
                         (Convert.ToInt16(rowItem["BoxMsgInTypeId"]) == Convert.ToInt16(VLF.CLS.Def.Enums.MessageType.HarshAcceleration)) ||
                         (Convert.ToInt16(rowItem["BoxMsgInTypeId"]) == Convert.ToInt16(VLF.CLS.Def.Enums.MessageType.HarshBraking)) ||
                         (Convert.ToInt16(rowItem["BoxMsgInTypeId"]) == Convert.ToInt16(VLF.CLS.Def.Enums.MessageType.SeatBelt)) ||
                         (Convert.ToInt16(rowItem["BoxMsgInTypeId"]) == Convert.ToInt16(VLF.CLS.Def.Enums.MessageType.Idling)))
                              rowItem["Speed"] = VLF.CLS.Def.Const.defNA.ToString();
                        
                    }
                }

                return dsHistory;

            }
            catch (Exception Ex)
            {

                return null;
            }
        }

        public string Heading(string heading)
        {
            int intHeading = 0;
            try
            {
                intHeading = Convert.ToInt16(heading);

            }
            catch
            {
                return "N/A";
            }


            try
            {
                if ((intHeading >= 337) || (intHeading < 22))
                    return "N";

                if ((intHeading >= 22) && (intHeading < 67))
                    return "NE";

                if ((intHeading >= 67) && (intHeading < 112))
                    return "E";


                if ((intHeading >= 112) && (intHeading < 157))
                    return "SE";

                if ((intHeading >= 157) && (intHeading < 202))
                    return "S";


                if ((intHeading >= 202) && (intHeading < 247))
                    return "SW";


                if ((intHeading >= 247) && (intHeading < 292))
                    return "W";


                if ((intHeading >= 292) && (intHeading < 337))
                    return "NW";
                else
                    return "N/A";
            }
            catch (Exception Ex)
            {
                return "N/A";
            }



        }

        private void CopyRows(DataTable oSrcDataTable, DataTable oDstDataTable)
        {
            try
            {
                foreach (DataRow oDataRow in oSrcDataTable.Rows)
                    oDstDataTable.ImportRow(oDataRow);
            }
            catch (Exception Ex)
            {
                System.Diagnostics.Trace.WriteLineIf(AppConfig.tsMain.TraceError, VLF.CLS.Util.TraceFormat(VLF.CLS.Def.Enums.TraceSeverity.Error, Ex.Message.ToString() + " Form:Report_History.aspx"));
            }
        }

        private DataSet GetAlarams(Int32 UserID, string xmlParams,string lang, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            int TotalSqlRecords = 0;
            int OutMaxRecords = 0;

            ReportGenerator dbReport = new ReportGenerator(Application["ConnectionString"].ToString());
            string xml = dbReport.GetXml(ReportTemplate.ReportTypes.Alarm, xmlParams, UserID,lang, ref RequestOverflowed, ref TotalSqlRecords, ref outMaxOverflowed, ref OutMaxRecords);

            if (xml == "")
                return null;

            StringReader strrXML = new StringReader(xml);
            DataSet ds = new DataSet();
            ds.ReadXml(strrXML);

            if (lang != "en" && lang != null)
            {
                   foreach (DataRow dr in ds.Tables[0].Rows)
                     dr["Description"] = LocalizationLayer.GUILocalizationLayer.LocalizeAlarms(dr["Description"].ToString(), lang);
            }

            return ds;
        }

        private DataSet GetFleetMaintenance(Int32 UserID, string xmlParams,string lang, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            int TotalSqlRecords = 0;
            int OutMaxRecords = 0;

            ReportGenerator dbReport = new ReportGenerator(Application["ConnectionString"].ToString());
            string xml = dbReport.GetXml(ReportTemplate.ReportTypes.FleetMaintenanceReport, xmlParams, UserID,lang, ref RequestOverflowed, ref TotalSqlRecords, ref outMaxOverflowed, ref OutMaxRecords);

            if (xml == "")
                return null;

            StringReader strrXML = new StringReader(xml);
            DataSet ds = new DataSet();
            ds.ReadXml(strrXML);
            return ds;
        }

        private DataSet GetFleetAlarams(Int32 UserID, string xmlParams,string lang, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            int TotalSqlRecords = 0;
            int OutMaxRecords = 0;

            ReportGenerator dbReport = new ReportGenerator(Application["ConnectionString"].ToString());
            string xml = dbReport.GetXml(ReportTemplate.ReportTypes.FleetAlarms, xmlParams, UserID,lang, ref RequestOverflowed, ref TotalSqlRecords, ref outMaxOverflowed, ref OutMaxRecords);

            StringReader strrXML = new StringReader(xml);
            DataSet ds = new DataSet();
            ds.ReadXml(strrXML);

            if (lang != "en" && lang != null)
            {
                  foreach (DataRow dr in ds.Tables[0].Rows)
                     dr["Description"] = LocalizationLayer.GUILocalizationLayer.LocalizeAlarms(dr["Description"].ToString(), lang);

            }

            return ds;
        }

        private DataSet GetTripDetails(int UserID, string xmlParams,string lang, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";
            string prm6 = "";
            string prm7 = "";
            string prm8 = "";
            string prm9 = "";
            string prm10 = "";
            string prm11 = "";
            string prm12 = "";
            string prm13 = "";
            string prm14 = "";
            string prm15 = "";
            string prm16 = "";
            string prm17 = "";
            string prm18 = "";
            string prm19 = "";
            string prm20 = "";
            string prm21 = "";

            int totalSqlRecords = 0;
            int outMaxRecords = 0;


            VLF.DAS.Logic.Report detailedTrip = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpDetailedTripFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpDetailedTripSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpDetailedTripThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpDetailedTripFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpDetailedTripFifthParamName, xmlParams);
            prm6 = Util.PairFindValue(ReportTemplate.RpDetailedTripSixthParamName, xmlParams);
            prm7 = Util.PairFindValue(ReportTemplate.RpDetailedTripSeventhParamName, xmlParams);
            prm8 = Util.PairFindValue(ReportTemplate.RpDetailedTripEighthParamName, xmlParams);
            prm9 = Util.PairFindValue(ReportTemplate.RpDetailedTripNinthParamName, xmlParams);
            prm10 = Util.PairFindValue(ReportTemplate.RpDetailedTripTenthParamName , xmlParams);

            if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null || prm4 == null ||
                prm5 == null || prm6 == null || prm7 == null || prm8 == null || prm9 == null || prm9 == null)
            {
                // empty result
                return null;
            }


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;

            DataSet ds = detailedTrip.GetDetailedTripReport(prm1, prm2, prm3,
                    Convert.ToBoolean(prm4),
                    Convert.ToBoolean(prm5),
                    Convert.ToBoolean(prm6),
                    Convert.ToBoolean(prm7),
                    Convert.ToBoolean(prm8),
                    Convert.ToBoolean(prm9),
                    UserID, Convert.ToInt32(prm10), lang,
                    ref requestOverflowed,
                    ref totalSqlRecords,
                    ref outMaxOverflowed,
                    ref outMaxRecords);


            DataSet dsCrystal = new DataSet();
            string tmpXml = ds.GetXml(); 
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstTripReportData.xsd";
           

            dsCrystal.ReadXmlSchema(strPath);
            string strTotal = "";

            if (ds.Tables.IndexOf("TripReportVehicleInfo") != -1)
                CopyRows(ds.Tables["TripReportVehicleInfo"], dsCrystal.Tables["rpt_VechicleInfo"]);
            if (ds.Tables.IndexOf("TripReportDriverInfo") != -1)
                CopyRows(ds.Tables["TripReportDriverInfo"], dsCrystal.Tables["rpt_DriverInfo"]);
            if (ds.Tables.IndexOf("TripReportData") != -1)
                CopyRows(ds.Tables["TripReportData"], dsCrystal.Tables["rpt_TripReportData"]);
             else
             {
                if (!Convert.ToBoolean(prm8))
                   return null;

             }
             if (ds.Tables.IndexOf("TripStart") != -1 && ds.Tables["TripStart"].Rows.Count > 0)
                CopyRows(ds.Tables["TripStart"], dsCrystal.Tables["rpt_TripStart"]);
             else
             {
                if (Convert.ToBoolean(prm8))
                   return null;
             }

            if (ds.Tables.IndexOf("TripAverageSpeed") != -1)
                CopyRows(ds.Tables["TripAverageSpeed"], dsCrystal.Tables["rpt_TripAverageSpeed"]);
            if (ds.Tables.IndexOf("TripCost") != -1)
                CopyRows(ds.Tables["TripCost"], dsCrystal.Tables["rpt_TripCost"]);
            if (ds.Tables.IndexOf("TripDistance") != -1)
                CopyRows(ds.Tables["TripDistance"], dsCrystal.Tables["rpt_TripDistance"]);
             if (ds.Tables.IndexOf("TripDuration") != -1)
             {
                foreach (DataRow rowItem in ds.Tables["TripDuration"].Rows)
                {

                   //Convert time to user format							
                   TimeSpan TripDuration;
                   strTotal = "";
                   TripDuration = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                   if (TripDuration.Days > 0)
                   {
                      strTotal += TripDuration.Days.ToString() + " d, ";
                      strTotal += new TimeSpan(TripDuration.Ticks - TripDuration.Days * TimeSpan.TicksPerDay).ToString();
                   }
                   else
                   {
                      strTotal = TripDuration.ToString();
                   }

                   rowItem["Summary"] = strTotal;
                }

                CopyRows(ds.Tables["TripDuration"], dsCrystal.Tables["rpt_TripDuration"]);
             }
            

            if (ds.Tables.IndexOf("TripStopsDuration") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripStopsDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripIndling;
                    strTotal = "";
                    TripIndling = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripIndling.Days > 0)
                    {
                        strTotal += TripIndling.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripIndling.Ticks - TripIndling.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripIndling.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                }

                CopyRows(ds.Tables["TripStopsDuration"], dsCrystal.Tables["rpt_TripStopsDuration"]);
            }
            if (ds.Tables.IndexOf("TripEnd") != -1)
                CopyRows(ds.Tables["TripEnd"], dsCrystal.Tables["rpt_TripEnd"]);


            return dsCrystal;

        }

        private DataSet GetTripSummary(int UserID, string xmlParams,string lang, ref TimeSpan totalTrip, ref TimeSpan totalIndling, ref TimeSpan totalStop, ref Double totalCost, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";

            int totalSqlRecords = 0;
            int outMaxRecords = 0;


            VLF.DAS.Logic.Report detailedTrip = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpTripFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpTripSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpTripThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpTripFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpTripFifthParamName , xmlParams);
            if ((xmlParams == null) || (prm1 == null) || (prm2 == null) || (prm3 == null) || (prm4 == null) || (prm5 == null))
            {
                // empty result
                return null;
            }


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;

            DataSet ds = detailedTrip.GetTripReport(prm1, prm2, prm3, UserID, Convert.ToBoolean(prm4), Convert.ToInt32(prm5), lang,
                ref requestOverflowed, ref totalSqlRecords,
                ref outMaxOverflowed, ref outMaxRecords);


            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstTripReportData.xsd";

            dsCrystal.ReadXmlSchema(strPath);
            string strTotal = "";



            if (ds.Tables.IndexOf("TripReportVehicleInfo") != -1)
                CopyRows(ds.Tables["TripReportVehicleInfo"], dsCrystal.Tables["rpt_VechicleInfo"]);
            if (ds.Tables.IndexOf("TripReportDriverInfo") != -1)
                CopyRows(ds.Tables["TripReportDriverInfo"], dsCrystal.Tables["rpt_DriverInfo"]);

             if (ds.Tables.IndexOf("TripStart") != -1 && ds.Tables["TripStart"].Rows.Count > 0)
                CopyRows(ds.Tables["TripStart"], dsCrystal.Tables["rpt_TripStart"]);
            else
                return null;

            if (ds.Tables.IndexOf("TripAverageSpeed") != -1)
                CopyRows(ds.Tables["TripAverageSpeed"], dsCrystal.Tables["rpt_TripAverageSpeed"]);
            if (ds.Tables.IndexOf("TripCost") != -1)
                CopyRows(ds.Tables["TripCost"], dsCrystal.Tables["rpt_TripCost"]);
            if (ds.Tables.IndexOf("TripDistance") != -1)
                CopyRows(ds.Tables["TripDistance"], dsCrystal.Tables["rpt_TripDistance"]);
            if (ds.Tables.IndexOf("TripDuration") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripDuration;
                    strTotal = "";
                    TripDuration = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripDuration.Days > 0)
                    {
                        strTotal += TripDuration.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripDuration.Ticks - TripDuration.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripDuration.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalTrip += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                }

                CopyRows(ds.Tables["TripDuration"], dsCrystal.Tables["rpt_TripDuration"]);
            }
            if (ds.Tables.IndexOf("TripStopsDuration") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripStopsDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripIndling;
                    strTotal = "";
                    TripIndling = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripIndling.Days > 0)
                    {
                        strTotal += TripIndling.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripIndling.Ticks - TripIndling.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripIndling.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalIndling += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);
                }

                CopyRows(ds.Tables["TripStopsDuration"], dsCrystal.Tables["rpt_TripStopsDuration"]);
            }
            if (ds.Tables.IndexOf("TripEnd") != -1)
                CopyRows(ds.Tables["TripEnd"], dsCrystal.Tables["rpt_TripEnd"]);
            if (ds.Tables.IndexOf("StopDurationBetweenTrips") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["StopDurationBetweenTrips"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripStop;
                    strTotal = "";
                    TripStop = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripStop.Days > 0)
                    {
                        strTotal += TripStop.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripStop.Ticks - TripStop.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripStop.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalStop += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);
                }

                CopyRows(ds.Tables["StopDurationBetweenTrips"], dsCrystal.Tables["rpt_StopDurationBetweenTrips"]);
            }


            if (ds.Tables.IndexOf("TripCost") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripCost"].Rows)
                {

                    totalCost += Convert.ToDouble(rowItem["Summary"]);
                }


            }



            return dsCrystal;

        }

        private DataSet GetFleetTripSummary(int UserID, string xmlParams, string lang, ref TimeSpan totalTrip, ref TimeSpan totalIndling, ref TimeSpan totalStop, ref Double totalCost, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";


            int totalSqlRecords = 0;
            int outMaxRecords = 0;


            VLF.DAS.Logic.Report detailedTrip = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpFleetTripFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpFleetTripSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpFleetTripThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpFleetTripFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpFleetTripFifthParamName , xmlParams);
            if ((xmlParams == null) || (prm1 == null) || (prm2 == null) || (prm3 == null) || (prm4 == null) || (prm5 == null))
            {
                // empty result
                return null;
            }


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;

            DataSet ds = detailedTrip.GetFleetTripReport(Convert.ToInt16(prm1), prm2, prm3, UserID, Convert.ToBoolean(prm4),Convert.ToInt32(prm5),lang,
                ref requestOverflowed, ref totalSqlRecords,
                ref outMaxOverflowed, ref outMaxRecords);


            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstTripReportData.xsd";

            dsCrystal.ReadXmlSchema(strPath);
            string strTotal = "";



            if (ds.Tables.IndexOf("TripReportVehicleInfo") != -1)
                CopyRows(ds.Tables["TripReportVehicleInfo"], dsCrystal.Tables["rpt_VechicleInfo"]);
            if (ds.Tables.IndexOf("TripReportDriverInfo") != -1)
                CopyRows(ds.Tables["TripReportDriverInfo"], dsCrystal.Tables["rpt_DriverInfo"]);
            if (ds.Tables.IndexOf("TripStart") != -1)
                CopyRows(ds.Tables["TripStart"], dsCrystal.Tables["rpt_TripStart"]);
            else
                return null;

            if (ds.Tables.IndexOf("TripAverageSpeed") != -1)
                CopyRows(ds.Tables["TripAverageSpeed"], dsCrystal.Tables["rpt_TripAverageSpeed"]);
            if (ds.Tables.IndexOf("TripCost") != -1)
                CopyRows(ds.Tables["TripCost"], dsCrystal.Tables["rpt_TripCost"]);
            if (ds.Tables.IndexOf("TripDistance") != -1)
                CopyRows(ds.Tables["TripDistance"], dsCrystal.Tables["rpt_TripDistance"]);
            if (ds.Tables.IndexOf("TripDuration") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripDuration;
                    strTotal = "";
                    TripDuration = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripDuration.Days > 0)
                    {
                        strTotal += TripDuration.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripDuration.Ticks - TripDuration.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripDuration.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalTrip += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                }

                CopyRows(ds.Tables["TripDuration"], dsCrystal.Tables["rpt_TripDuration"]);
            }
            if (ds.Tables.IndexOf("TripStopsDuration") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripStopsDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripIndling;
                    strTotal = "";
                    TripIndling = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripIndling.Days > 0)
                    {
                        strTotal += TripIndling.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripIndling.Ticks - TripIndling.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripIndling.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalIndling += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);
                }

                CopyRows(ds.Tables["TripStopsDuration"], dsCrystal.Tables["rpt_TripStopsDuration"]);
            }
            if (ds.Tables.IndexOf("TripEnd") != -1)
                CopyRows(ds.Tables["TripEnd"], dsCrystal.Tables["rpt_TripEnd"]);
            if (ds.Tables.IndexOf("StopDurationBetweenTrips") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["StopDurationBetweenTrips"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripStop;
                    strTotal = "";
                    TripStop = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripStop.Days > 0)
                    {
                        strTotal += TripStop.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripStop.Ticks - TripStop.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripStop.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalStop += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);
                }

                CopyRows(ds.Tables["StopDurationBetweenTrips"], dsCrystal.Tables["rpt_StopDurationBetweenTrips"]);
            }


            if (ds.Tables.IndexOf("TripCost") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripCost"].Rows)
                {

                    totalCost += Convert.ToDouble(rowItem["Summary"]);
                }


            }



            return dsCrystal;

        }

        private DataSet GetTripFleetDetails(int UserID, string xmlParams, string lang, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";
            string prm6 = "";
            string prm7 = "";
            string prm8 = "";
            string prm9 = "";
            string prm10 = "";
            string prm11 = "";
            string prm12 = "";
            string prm13 = "";
            string prm14 = "";
            string prm15 = "";
            string prm16 = "";
            string prm17 = "";
            string prm18 = "";
            string prm19 = "";
            string prm20 = "";
            string prm21 = "";

            int totalSqlRecords = 0;
            int outMaxRecords = 0;


            VLF.DAS.Logic.Report detailedTrip = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripFifthParamName, xmlParams);
            prm6 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripSixthParamName, xmlParams);
            prm7 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripSeventhParamName, xmlParams);
            prm8 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripEighthParamName, xmlParams);
            prm9 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripNinthParamName, xmlParams);
            prm10 = Util.PairFindValue(ReportTemplate.RpFleetDetailedTripTenthParamName, xmlParams);

            if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null || prm4 == null ||
                prm5 == null || prm6 == null || prm7 == null || prm8 == null || prm9 == null || prm10 == null)
            {
                // empty result
                return null;
            }


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;

            DataSet ds = detailedTrip.GetFleetDetailedTripReport(Convert.ToInt16(prm1), prm2, prm3,
                    Convert.ToBoolean(prm4),
                    Convert.ToBoolean(prm5),
                    Convert.ToBoolean(prm6),
                    Convert.ToBoolean(prm7),
                    Convert.ToBoolean(prm8),
                    Convert.ToBoolean(prm9),
                    UserID, Convert.ToInt32 (prm10), lang,
                    ref requestOverflowed,
                    ref totalSqlRecords,
                    ref outMaxOverflowed,
                    ref outMaxRecords);


            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstTripReportData.xsd";

            dsCrystal.ReadXmlSchema(strPath);
            string strTotal = "";

            if (ds.Tables.IndexOf("TripReportVehicleInfo") != -1)
                CopyRows(ds.Tables["TripReportVehicleInfo"], dsCrystal.Tables["rpt_VechicleInfo"]);
            if (ds.Tables.IndexOf("TripReportDriverInfo") != -1)
                CopyRows(ds.Tables["TripReportDriverInfo"], dsCrystal.Tables["rpt_DriverInfo"]);
            if (ds.Tables.IndexOf("TripReportData") != -1)
                CopyRows(ds.Tables["TripReportData"], dsCrystal.Tables["rpt_TripReportData"]);

             if (ds.Tables.IndexOf("TripStart") != -1 && ds.Tables["TripStart"].Rows.Count > 0)
                CopyRows(ds.Tables["TripStart"], dsCrystal.Tables["rpt_TripStart"]);
             else
                return null;

            if (ds.Tables.IndexOf("TripAverageSpeed") != -1)
                CopyRows(ds.Tables["TripAverageSpeed"], dsCrystal.Tables["rpt_TripAverageSpeed"]);
            if (ds.Tables.IndexOf("TripCost") != -1)
                CopyRows(ds.Tables["TripCost"], dsCrystal.Tables["rpt_TripCost"]);
            if (ds.Tables.IndexOf("TripDistance") != -1)
                CopyRows(ds.Tables["TripDistance"], dsCrystal.Tables["rpt_TripDistance"]);
            if (ds.Tables.IndexOf("TripDuration") != -1)
            {

                foreach (DataRow rowItem in ds.Tables["TripDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripDuration;
                    strTotal = "";
                    TripDuration = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripDuration.Days > 0)
                    {
                        strTotal += TripDuration.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripDuration.Ticks - TripDuration.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripDuration.ToString();
                    }

                    rowItem["Summary"] = strTotal;


                }


                CopyRows(ds.Tables["TripDuration"], dsCrystal.Tables["rpt_TripDuration"]);
            }
            if (ds.Tables.IndexOf("TripStopsDuration") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripStopsDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripIndling;
                    strTotal = "";
                    TripIndling = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripIndling.Days > 0)
                    {
                        strTotal += TripIndling.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripIndling.Ticks - TripIndling.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripIndling.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                }

                CopyRows(ds.Tables["TripStopsDuration"], dsCrystal.Tables["rpt_TripStopsDuration"]);
            }
            if (ds.Tables.IndexOf("TripEnd") != -1)
                CopyRows(ds.Tables["TripEnd"], dsCrystal.Tables["rpt_TripEnd"]);


            return dsCrystal;

        }

        private DataSet GetStopReportData(int UserID, string xmlParams,string lang, ref int IdlingCount, ref TimeSpan totalIndling, ref int StopCount, ref TimeSpan totalStop, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";
            string prm6 = "";
            string prm7 = "";
            string prm8 = "";

            int totalSqlRecords = 0;
            int outMaxRecords = 0;
            string strTotalStopTime = "";
            string strTotalIdlingTime = "";


            VLF.DAS.Logic.Report detailedTrip = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpStopFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpStopSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpStopThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpStopFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpStopFifthParamName, xmlParams);
            prm6 = Util.PairFindValue(ReportTemplate.RpStopSixthParamName, xmlParams);
            prm7 = Util.PairFindValue(ReportTemplate.RpStopSeventhParamName, xmlParams);
            prm8 = Util.PairFindValue(ReportTemplate.RpStopEighthParamName , xmlParams);

            if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null || prm4 == null || prm5 == null || prm6 == null || prm7 == null)
            {
                // empty result
                return null;
            }


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;

            DataSet ds = detailedTrip.GetStopReport(prm1, prm2, prm3, UserID, Convert.ToBoolean(prm4), Convert.ToInt32(prm5), Convert.ToBoolean(prm6), Convert.ToBoolean(prm7),Convert.ToInt32(prm8), lang, ref requestOverflowed, ref totalSqlRecords);


            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstStopReport.xsd";

            dsCrystal.ReadXmlSchema(strPath);
            string strTotal = "";



            if (ds.Tables.IndexOf("TripReportVehicleInfo") != -1)
                CopyRows(ds.Tables["TripReportVehicleInfo"], dsCrystal.Tables["rpt_VechicleInfo"]);

            if (ds.Tables.IndexOf("StopData") != -1 && ds.Tables["StopData"].Rows.Count>0)
            {

                //ArrivalDate_
                DataColumn col = new DataColumn("ArrivalDateTime_", Type.GetType("System.String"));
                ds.Tables["StopData"].Columns.Add(col);

                //DepartureDate_
                col = new DataColumn("DepartureDateTime_", Type.GetType("System.String"));
                ds.Tables["StopData"].Columns.Add(col);

                //Summary
                col = new DataColumn("Summary", Type.GetType("System.Int32"));
                ds.Tables["StopData"].Columns.Add(col);



                foreach (DataRow rowItem in ds.Tables["StopData"].Rows)
                {

                    TimeSpan TripStop = new TimeSpan(0);
                    TimeSpan TripIndling = new TimeSpan(0);

                    if (rowItem["Remarks"].ToString().TrimEnd() == "Stopped")
                    {
                        StopCount++;
                        //Convert time to user format							

                        TripStop = new TimeSpan(Convert.ToInt64(rowItem["StopDurationVal"]) * TimeSpan.TicksPerSecond);

                        strTotalStopTime = "";

                        if (TripStop.Days > 0)
                        {
                            strTotalStopTime += TripStop.Days.ToString() + " d, ";
                            strTotalStopTime += new TimeSpan(TripStop.Ticks - TripStop.Days * TimeSpan.TicksPerDay).ToString();
                        }
                        else
                        {
                            strTotalStopTime = TripStop.ToString();
                        }



                        totalStop += new TimeSpan(Convert.ToInt64(rowItem["StopDurationVal"]) * TimeSpan.TicksPerSecond);

                        rowItem["StopDurationVal"] = strTotalStopTime;
                        rowItem["Summary"] = TripStop.TotalMinutes;
                    }
                    else if (rowItem["Remarks"].ToString().TrimEnd() == "Idling")
                    {
                        IdlingCount++;
                        //Convert time to user format							

                        TripIndling = new TimeSpan(Convert.ToInt64(rowItem["StopDurationVal"]) * TimeSpan.TicksPerSecond);

                        strTotalIdlingTime = "";

                        if (TripIndling.Days > 0)
                        {
                            strTotalIdlingTime += TripIndling.Days.ToString() + " d, ";
                            strTotalIdlingTime += new TimeSpan(TripIndling.Ticks - TripIndling.Days * TimeSpan.TicksPerDay).ToString();
                        }
                        else
                        {
                            strTotalIdlingTime = TripIndling.ToString();
                        }



                        totalIndling += new TimeSpan(Convert.ToInt64(rowItem["StopDurationVal"]) * TimeSpan.TicksPerSecond);

                        rowItem["StopDurationVal"] = strTotalIdlingTime;
                        rowItem["Summary"] = TripIndling.TotalMinutes;
                    }




                    rowItem["ArrivalDateTime_"] = Convert.ToDateTime(rowItem["ArrivalDateTime"]).ToString();
                    //rowItem["DepartureDateTime_"]=rowItem["DepartureDateTime"].ToString();					

                    if (Convert.ToDateTime(rowItem["DepartureDateTime"]) == VLF.CLS.Def.Const.unassignedDateTime)
                        rowItem["DepartureDateTime_"] = VLF.CLS.Def.Const.blankValue;
                    else
                        rowItem["DepartureDateTime_"] = Convert.ToDateTime(rowItem["DepartureDateTime"]).ToString();


                }

                CopyRows(ds.Tables["StopData"], dsCrystal.Tables["rpt_StopData"]);
            }
            else
            {

                return null;
            }



            return dsCrystal;

        }

        private DataSet GetStopFleetReportData(int UserID, string xmlParams,string lang, ref int IdlingCount, ref TimeSpan totalIndling, ref int StopCount, ref TimeSpan totalStop, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";
            string prm6 = "";
            string prm7 = "";
            string prm8 = "";

            int totalSqlRecords = 0;
            int outMaxRecords = 0;
            string strTotalStopTime = "";
            string strTotalIdlingTime = "";


            VLF.DAS.Logic.Report detailedTrip = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpFleetStopFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpFleetStopSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpFleetStopThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpFleetStopFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpFleetStopFifthParamName, xmlParams);
            prm6 = Util.PairFindValue(ReportTemplate.RpFleetStopSixthParamName, xmlParams);
            prm7 = Util.PairFindValue(ReportTemplate.RpFleetStopSeventhParamName, xmlParams);
            prm8 = Util.PairFindValue(ReportTemplate.RpStopEighthParamName, xmlParams);


            if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null || prm4 == null || prm5 == null || prm6 == null || prm7 == null)
            {
                // empty result
                return null;
            }


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;
            
            // BUG: prmX are often empty strings, so exceptions are thrown during int and bool conversions
            DataSet ds = detailedTrip.GetFleetStopReport(Convert.ToInt16(prm1), prm2, prm3, UserID, Convert.ToBoolean(prm4), Convert.ToInt32(prm5), Convert.ToBoolean(prm6), Convert.ToBoolean(prm7),Convert.ToInt32(prm8), lang, ref requestOverflowed, ref totalSqlRecords);


            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstStopReport.xsd";

            dsCrystal.ReadXmlSchema(strPath);
            string strTotal = "";



            if (ds.Tables.IndexOf("TripReportVehicleInfo") != -1)
                CopyRows(ds.Tables["TripReportVehicleInfo"], dsCrystal.Tables["rpt_VechicleInfo"]);

             if (ds.Tables.IndexOf("StopData") != -1 && ds.Tables["StopData"].Rows.Count > 0)
            {

                //ArrivalDate_
                DataColumn col = new DataColumn("ArrivalDateTime_", Type.GetType("System.String"));
                ds.Tables["StopData"].Columns.Add(col);

                //DepartureDate_
                col = new DataColumn("DepartureDateTime_", Type.GetType("System.String"));
                ds.Tables["StopData"].Columns.Add(col);

                //Summary
                col = new DataColumn("Summary", Type.GetType("System.Int32"));
                ds.Tables["StopData"].Columns.Add(col);



                foreach (DataRow rowItem in ds.Tables["StopData"].Rows)
                {

                    TimeSpan TripStop = new TimeSpan(0);
                    TimeSpan TripIndling = new TimeSpan(0);

                    if (rowItem["Remarks"].ToString().TrimEnd() == "Stopped")
                    {
                        StopCount++;
                        //Convert time to user format							

                        TripStop = new TimeSpan(Convert.ToInt64(rowItem["StopDurationVal"]) * TimeSpan.TicksPerSecond);

                        strTotalStopTime = "";

                        if (TripStop.Days > 0)
                        {
                            strTotalStopTime += TripStop.Days.ToString() + " d, ";
                            strTotalStopTime += new TimeSpan(TripStop.Ticks - TripStop.Days * TimeSpan.TicksPerDay).ToString();
                        }
                        else
                        {
                            strTotalStopTime = TripStop.ToString();
                        }



                        totalStop += new TimeSpan(Convert.ToInt64(rowItem["StopDurationVal"]) * TimeSpan.TicksPerSecond);

                        rowItem["StopDurationVal"] = strTotalStopTime;
                        rowItem["Summary"] = TripStop.TotalMinutes;
                    }
                    else if (rowItem["Remarks"].ToString().TrimEnd() == "Idling")
                    {
                        IdlingCount++;
                        //Convert time to user format							

                        TripIndling = new TimeSpan(Convert.ToInt64(rowItem["StopDurationVal"]) * TimeSpan.TicksPerSecond);

                        strTotalIdlingTime = "";

                        if (TripIndling.Days > 0)
                        {
                            strTotalIdlingTime += TripIndling.Days.ToString() + " d, ";
                            strTotalIdlingTime += new TimeSpan(TripIndling.Ticks - TripIndling.Days * TimeSpan.TicksPerDay).ToString();
                        }
                        else
                        {
                            strTotalIdlingTime = TripIndling.ToString();
                        }



                        totalIndling += new TimeSpan(Convert.ToInt64(rowItem["StopDurationVal"]) * TimeSpan.TicksPerSecond);

                        rowItem["StopDurationVal"] = strTotalIdlingTime;
                        rowItem["Summary"] = TripIndling.TotalMinutes;
                    }




                    rowItem["ArrivalDateTime_"] = Convert.ToDateTime(rowItem["ArrivalDateTime"]).ToString();
                    //rowItem["DepartureDateTime_"]=rowItem["DepartureDateTime"].ToString();					

                    if (Convert.ToDateTime(rowItem["DepartureDateTime"]) == VLF.CLS.Def.Const.unassignedDateTime)
                        rowItem["DepartureDateTime_"] = VLF.CLS.Def.Const.blankValue;
                    else
                        rowItem["DepartureDateTime_"] = Convert.ToDateTime(rowItem["DepartureDateTime"]).ToString();


                }

                CopyRows(ds.Tables["StopData"], dsCrystal.Tables["rpt_StopData"]);
            }
            else
            {

                return null;
            }



            return dsCrystal;

        }

        private DataSet GetExceptionData(int UserID, string xmlParams, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";
            string prm6 = "";
            string prm7 = "";
            string prm8 = "";
            string prm9 = "";
            string prm10 = "";
            string prm11 = "";
            string prm12 = "";
            string prm13 = "";
            string prm14 = "";
            string prm15 = "";
            string prm16 = "";
            string prm17 = "";
            string prm18 = "";
            string prm19 = "";
            string prm20 = "";
            string prm21 = "";

            int totalSqlRecords = 0;
            int outMaxRecords = 0;


            VLF.DAS.Logic.Report detailedTrip = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpExceptionFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpExceptionSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpExceptionThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpExceptionFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpExceptionFifthParamName, xmlParams);
            prm6 = Util.PairFindValue(ReportTemplate.RpExceptionSixthParamName, xmlParams);
            prm7 = Util.PairFindValue(ReportTemplate.RpExceptionSeventhParamName, xmlParams);
            prm8 = Util.PairFindValue(ReportTemplate.RpExceptionEightParamName, xmlParams);
            prm9 = Util.PairFindValue(ReportTemplate.RpExceptionNineParamName, xmlParams);
            prm10 = Util.PairFindValue(ReportTemplate.RpExceptionTenParamName, xmlParams);
            prm11 = Util.PairFindValue(ReportTemplate.RpExceptionElevenParamName, xmlParams);
            prm12 = Util.PairFindValue(ReportTemplate.RpExceptionTwelveParamName, xmlParams);
            prm13 = Util.PairFindValue(ReportTemplate.RpExceptionThirteenParamName, xmlParams);
            prm14 = Util.PairFindValue(ReportTemplate.RpExceptionFourteenParamName, xmlParams);
            prm15 = Util.PairFindValue(ReportTemplate.RpExceptionFifteenParamName, xmlParams);
            prm16 = Util.PairFindValue(ReportTemplate.RpExceptionSixteenParamName, xmlParams);
            prm17 = Util.PairFindValue(ReportTemplate.RpExceptionSeventeenParamName, xmlParams);
            prm18 = Util.PairFindValue(ReportTemplate.RpExceptionEighteenParamName, xmlParams);
            prm19 = Util.PairFindValue(ReportTemplate.RpExceptionNineteenParamName, xmlParams);
            prm20 = Util.PairFindValue(ReportTemplate.RpExceptionTwentyParamName, xmlParams);
            prm21 = Util.PairFindValue(ReportTemplate.RpExceptionTwentyFirstParamName, xmlParams);

            if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null ||
                prm4 == null || prm5 == null || prm6 == null || prm7 == null ||
                prm8 == null || prm9 == null || prm10 == null || prm11 == null ||
                prm12 == null || prm13 == null || prm14 == null || prm15 == null || prm16 == null ||
                prm17 == null || prm18 == null || prm19 == null || prm20 == null || prm21 == null)
            {

                // empty result
                return null;
            }


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;

            DataSet ds = detailedTrip.GetExceptionReport(prm1,
                            prm2,//fromDateTime,
                            prm3,//toDateTime,
                            UserID,
                            Convert.ToInt16(prm4),//sosLimit,
                            Convert.ToInt32(prm5),//noDoorSnsHrs,
                            Convert.ToBoolean(prm6),//IncludeTar
                            Convert.ToBoolean(prm7),//IncludeMobilize
                            Convert.ToBoolean(prm8),//15SecDoorSns
                            Convert.ToBoolean(prm9),//50%ofLeash
                            Convert.ToBoolean(prm10),//MainAndBackupBatterySns
                            Convert.ToBoolean(prm11),//TamperSns
                            Convert.ToBoolean(prm12),//AnyPanicSns
                            Convert.ToBoolean(prm13),//ThreeKeypadAttemptsSns
                            Convert.ToBoolean(prm14),//AltGPSAntennaSns
                            Convert.ToBoolean(prm15),//ControllerStatus
                            Convert.ToBoolean(prm16),//LeashBrokenSns
                            Convert.ToBoolean(prm17),//DriverDoor
                            Convert.ToBoolean(prm18),//PassengerDoor
                            Convert.ToBoolean(prm19),//SideHopperDoor
                            Convert.ToBoolean(prm20),//RearHopperDoor
                            Convert.ToBoolean(prm21),//IncludeCurrentTar
                            ref requestOverflowed,
                            ref totalSqlRecords);

            if (ds == null)
                return null;

            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstExceptionReport.xsd";

            dsCrystal.ReadXmlSchema(strPath);
            CopyRows(ds.Tables[0], dsCrystal.Tables["rpt_Exception"]);
            foreach (DataRow oDataRow in dsCrystal.Tables["rpt_Exception"].Rows)
            {
                oDataRow["DateTime"] = Convert.ToDateTime(oDataRow["DateTime"]).ToString();
            }

            return dsCrystal;

        }

        private DataSet GetFleetExceptionData(int UserID, string xmlParams, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";
            string prm6 = "";
            string prm7 = "";
            string prm8 = "";
            string prm9 = "";
            string prm10 = "";
            string prm11 = "";
            string prm12 = "";
            string prm13 = "";
            string prm14 = "";
            string prm15 = "";
            string prm16 = "";
            string prm17 = "";
            string prm18 = "";
            string prm19 = "";
            string prm20 = "";
            string prm21 = "";

            int totalSqlRecords = 0;
            int outMaxRecords = 0;


            VLF.DAS.Logic.Report detailedTrip = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpFleetTripFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpExceptionSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpExceptionThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpExceptionFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpExceptionFifthParamName, xmlParams);
            prm6 = Util.PairFindValue(ReportTemplate.RpExceptionSixthParamName, xmlParams);
            prm7 = Util.PairFindValue(ReportTemplate.RpExceptionSeventhParamName, xmlParams);
            prm8 = Util.PairFindValue(ReportTemplate.RpExceptionEightParamName, xmlParams);
            prm9 = Util.PairFindValue(ReportTemplate.RpExceptionNineParamName, xmlParams);
            prm10 = Util.PairFindValue(ReportTemplate.RpExceptionTenParamName, xmlParams);
            prm11 = Util.PairFindValue(ReportTemplate.RpExceptionElevenParamName, xmlParams);
            prm12 = Util.PairFindValue(ReportTemplate.RpExceptionTwelveParamName, xmlParams);
            prm13 = Util.PairFindValue(ReportTemplate.RpExceptionThirteenParamName, xmlParams);
            prm14 = Util.PairFindValue(ReportTemplate.RpExceptionFourteenParamName, xmlParams);
            prm15 = Util.PairFindValue(ReportTemplate.RpExceptionFifteenParamName, xmlParams);
            prm16 = Util.PairFindValue(ReportTemplate.RpExceptionSixteenParamName, xmlParams);
            prm17 = Util.PairFindValue(ReportTemplate.RpExceptionSeventeenParamName, xmlParams);
            prm18 = Util.PairFindValue(ReportTemplate.RpExceptionEighteenParamName, xmlParams);
            prm19 = Util.PairFindValue(ReportTemplate.RpExceptionNineteenParamName, xmlParams);
            prm20 = Util.PairFindValue(ReportTemplate.RpExceptionTwentyParamName, xmlParams);
            prm21 = Util.PairFindValue(ReportTemplate.RpExceptionTwentyFirstParamName, xmlParams);


            if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null ||
                prm4 == null || prm5 == null || prm6 == null || prm7 == null ||
                prm8 == null || prm9 == null || prm10 == null || prm11 == null ||
                prm12 == null || prm13 == null || prm14 == null || prm15 == null || prm16 == null ||
                prm17 == null || prm18 == null || prm19 == null || prm20 == null || prm21 == null)
            {

                // empty result
                return null;
            }


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;

            DataSet ds = detailedTrip.GetFleetExceptionReport(Convert.ToInt16(prm1),
                            prm2,//fromDateTime,
                            prm3,//toDateTime,
                            UserID,
                            Convert.ToInt16(prm4),//sosLimit,
                            Convert.ToInt32(prm5),//noDoorSnsHrs,
                            Convert.ToBoolean(prm6),//IncludeTar
                            Convert.ToBoolean(prm7),//IncludeMobilize
                            Convert.ToBoolean(prm8),//15SecDoorSns
                            Convert.ToBoolean(prm9),//50%ofLeash
                            Convert.ToBoolean(prm10),//MainAndBackupBatterySns
                            Convert.ToBoolean(prm11),//TamperSns
                            Convert.ToBoolean(prm12),//AnyPanicSns
                            Convert.ToBoolean(prm13),//ThreeKeypadAttemptsSns
                            Convert.ToBoolean(prm14),//AltGPSAntennaSns
                            Convert.ToBoolean(prm15),//ControllerStatus
                            Convert.ToBoolean(prm16),//LeashBrokenSns
                            Convert.ToBoolean(prm17),//DriverDoor
                            Convert.ToBoolean(prm18),//PassengerDoor
                            Convert.ToBoolean(prm19),//SideHopperDoor
                            Convert.ToBoolean(prm20),//RearHopperDoor
                            Convert.ToBoolean(prm21),//IncludeCurrentTar
                            ref requestOverflowed,
                            ref totalSqlRecords);

            if (ds == null)
                return null;

            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstExceptionReport.xsd";

            dsCrystal.ReadXmlSchema(strPath);
            CopyRows(ds.Tables[0], dsCrystal.Tables["rpt_Exception"]);
            foreach (DataRow oDataRow in dsCrystal.Tables["rpt_Exception"].Rows)
            {
                oDataRow["DateTime"] = Convert.ToDateTime(oDataRow["DateTime"]).ToString();
            }

            return dsCrystal;

        }

        private DataSet GetMessages(Int32 UserID, Int32 BoxId, string fromDate, string toDate, Int16 msgDirection, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {
            try
            {

                StringReader strrXML = null;
                string xml = "";
                VLF.DAS.Logic.MessageQueue dbMessageQueue = new VLF.DAS.Logic.MessageQueue(Application["ConnectionString"].ToString());
                DataSet dsInfo = new DataSet();
                dsInfo = dbMessageQueue.GetTextMessagesFullInfo(UserID, BoxId, Convert.ToDateTime(fromDate), Convert.ToDateTime(toDate), msgDirection);
                return dsInfo;

            }
            catch (Exception Ex)
            {

                return null;
            }
        }

       private DataSet GetFleetMessages(Int32 UserID, Int32 FleetId, string fromDate, string toDate, Int16 msgDirection, ref bool requestOverflowed, ref bool outMaxOverflowed)
       {
          try
          {

             StringReader strrXML = null;
             string xml = "";
             VLF.DAS.Logic.MessageQueue dbMessageQueue = new VLF.DAS.Logic.MessageQueue(Application["ConnectionString"].ToString());
             DataSet dsInfo = new DataSet();
             
             dsInfo = dbMessageQueue.GetFleetTextMessagesFullInfo(UserID, FleetId, Convert.ToDateTime(fromDate), Convert.ToDateTime(toDate), msgDirection);
             return dsInfo;

          }
          catch (Exception Ex)
          {

             return null;
          }
       }

        private DataSet GetUtilizationInfo(Int32 userId, Int32 fleetId, DateTime dtFrom, DateTime dtTo, ref DataSet dsCrystal)
        {

            try
            {


                DataSet dsFleet = new DataSet();
                ReportGenerator dbReport;
                VLF.DAS.Logic.Fleet dbf = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
                dsFleet = dbf.GetVehiclesInfoByFleetId(fleetId);
                CopyRows(dsFleet.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                string xml = "";
                StringReader strrXML;

                // Ignition Sensors calculation

                using (dbReport = new ReportGenerator(Application["ConnectionString"].ToString()))
                {
                    xml = dbReport.GetSensorReportForFleet(fleetId, userId, 3, dtFrom, dtTo);
                }

                if (xml == "")
                    return null;



                DataSet ds = new DataSet();
                strrXML = new StringReader(xml);
                ds.ReadXml(strrXML);

                if (ds.Tables.Count == 0)
                    return null;

                DataColumn TotalHours = new DataColumn("TotalHours", Type.GetType("System.String"));
                ds.Tables["SensorsUtilization"].Columns.Add(TotalHours);

                DataColumn Day = new DataColumn("Day", Type.GetType("System.Int32"));
                ds.Tables["SensorsUtilization"].Columns.Add(Day);


                DataColumn Utilization = new DataColumn("Utilization", Type.GetType("System.Single"));
                ds.Tables["SensorsUtilization"].Columns.Add(Utilization);


                DataColumn WorkingHours = new DataColumn("WorkingHours", Type.GetType("System.Int32"));
                ds.Tables["SensorsUtilization"].Columns.Add(WorkingHours);


                TimeSpan TotalDayHours;
                Int64 TotalVehicleInUse = 0;
                TimeSpan DateDiff;


                for (int i = 0; i < ds.Tables["SensorsUtilization"].Rows.Count; i++)
                {

                    DataRow rowItem = ds.Tables["SensorsUtilization"].Rows[i];

                    if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() == "1/1/2000")
                    {
                        ds.Tables["SensorsUtilization"].Rows.RemoveAt(i);
                        i--;
                        continue;
                    }


                    rowItem["Day"] = Convert.ToDateTime(rowItem["EndTime"]).DayOfYear;
                    DateDiff = Convert.ToDateTime(rowItem["EndTime"]).Subtract(Convert.ToDateTime(rowItem["StartTime"]));
                    TotalDayHours = new TimeSpan(Convert.ToInt64(DateDiff.TotalMinutes) * TimeSpan.TicksPerMinute);
                    rowItem["TotalHours"] = TotalDayHours.ToString();
                    if (DateDiff.Minutes != 0)
                        rowItem["Utilization"] = (Convert.ToInt64(rowItem["MinutesInUse"]) / DateDiff.TotalMinutes) * 100;
                    else
                        rowItem["Utilization"] = 0;

                    rowItem["WorkingHours"] = DateDiff.TotalMinutes;

                }

                CopyRows(ds.Tables["SensorsUtilization"], dsCrystal.Tables["rpt_Ignition"]);


                // Idling calculation

                DataColumn Day1 = new DataColumn("Day", Type.GetType("System.Int32"));
                ds.Tables["IdlingDuration"].Columns.Add(Day1);

                DataColumn Utilization1 = new DataColumn("Utilization", Type.GetType("System.Single"));
                ds.Tables["IdlingDuration"].Columns.Add(Utilization1);



                for (int i = 0; i < ds.Tables["IdlingDuration"].Rows.Count; i++)
                {

                    DataRow rowItem = ds.Tables["IdlingDuration"].Rows[i];

                    if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() == "1/1/2000")
                    {
                        ds.Tables["IdlingDuration"].Rows.RemoveAt(i);
                        i--;
                        continue;
                    }


                    rowItem["Day"] = Convert.ToDateTime(rowItem["EndTime"]).DayOfYear;
                    DateDiff = Convert.ToDateTime(rowItem["EndTime"]).Subtract(Convert.ToDateTime(rowItem["StartTime"]));
                    if (DateDiff.TotalSeconds != 0)
                        rowItem["Utilization"] = (Convert.ToInt64(rowItem["MinutesInUse"]) / DateDiff.TotalSeconds) * 100;
                    else
                        rowItem["Utilization"] = 0;

                }


                CopyRows(ds.Tables["IdlingDuration"], dsCrystal.Tables["rpt_Idling_Utilization"]);



                // High Rail calculation


                xml = dbReport.GetSensorReportForFleet(fleetId, userId, 7, dtFrom, dtTo);
                if (xml != "")
                {
                    ds.Tables.Clear();
                    strrXML = new StringReader(xml);
                    ds.ReadXml(strrXML);
                    if (ds.Tables.IndexOf("SensorsUtilization") != -1)
                    {


                        DataColumn Day2 = new DataColumn("Day", Type.GetType("System.Int32"));
                        ds.Tables[0].Columns.Add(Day2);

                        DataColumn Utilization2 = new DataColumn("Utilization", Type.GetType("System.Single"));
                        ds.Tables[0].Columns.Add(Utilization2);

                        for (int i = 0; i < ds.Tables["SensorsUtilization"].Rows.Count; i++)
                        {

                            DataRow rowItem = ds.Tables["SensorsUtilization"].Rows[i];

                            if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() == "1/1/2000")
                            {
                                ds.Tables["SensorsUtilization"].Rows.RemoveAt(i);
                                i--;
                                continue;
                            }



                            rowItem["Day"] = Convert.ToDateTime(rowItem["EndTime"]).DayOfYear;
                            DateDiff = Convert.ToDateTime(rowItem["EndTime"]).Subtract(Convert.ToDateTime(rowItem["StartTime"]));
                            if (DateDiff.Minutes != 0)
                                rowItem["Utilization"] = (Convert.ToInt64(rowItem["MinutesInUse"]) / DateDiff.TotalMinutes) * 100;
                            else
                                rowItem["Utilization"] = 0;
                        }


                        CopyRows(ds.Tables["SensorsUtilization"], dsCrystal.Tables["rpt_Rail_Utilization"]);
                    }
                }


                // Craine calculation


                xml = dbReport.GetSensorReportForFleet(fleetId, userId, 2, dtFrom, dtTo);
                if (xml != "")
                {
                    ds.Tables.Clear();
                    strrXML = new StringReader(xml);
                    ds.ReadXml(strrXML);

                    if (ds.Tables.IndexOf("SensorsUtilization") != -1)
                    {
                        DataColumn Day3 = new DataColumn("Day", Type.GetType("System.Int32"));
                        ds.Tables[0].Columns.Add(Day3);

                        DataColumn Utilization3 = new DataColumn("Utilization", Type.GetType("System.Single"));
                        ds.Tables[0].Columns.Add(Utilization3);

                        for (int i = 0; i < ds.Tables["SensorsUtilization"].Rows.Count; i++)
                        {

                            DataRow rowItem = ds.Tables["SensorsUtilization"].Rows[i];

                            if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() == "1/1/2000")
                            {
                                ds.Tables["SensorsUtilization"].Rows.RemoveAt(i);
                                i--;
                                continue;
                            }

                            rowItem["Day"] = Convert.ToDateTime(rowItem["EndTime"]).DayOfYear;
                            DateDiff = Convert.ToDateTime(rowItem["EndTime"]).Subtract(Convert.ToDateTime(rowItem["StartTime"]));
                            if (DateDiff.Minutes != 0)
                                rowItem["Utilization"] = (Convert.ToInt64(rowItem["MinutesInUse"]) / DateDiff.TotalMinutes) * 100;
                            else
                                rowItem["Utilization"] = 0;
                        }


                        CopyRows(ds.Tables["SensorsUtilization"], dsCrystal.Tables["rpt_Crane_Utilization"]);
                    }
                }

                return dsCrystal;

            }
            catch (Exception Ex)
            {

                return null;
            }

        }

        private DataSet GetUtilizationInfoByVehicleType(Int32 userId, Int32 fleetId, DateTime dtFrom, DateTime dtTo, ref DataSet dsCrystal)
        {

            try
            {


                DataSet dsFleet = new DataSet();
                ReportGenerator dbReport;
                VLF.DAS.Logic.Fleet dbf = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
                dsFleet = dbf.GetVehiclesInfoByFleetId(fleetId);
                CopyRows(dsFleet.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                string xml = "";
                StringReader strrXML;


                using (dbReport = new ReportGenerator(Application["ConnectionString"].ToString()))
                {
                    xml = dbReport.GetActivityReportForFleet(3, fleetId, userId, dtFrom, dtTo);
                }

                if (xml == "")
                    return null;


                DataSet ds = new DataSet();
                strrXML = new StringReader(xml);
                ds.ReadXml(strrXML);

                if (ds.Tables.Count == 0)
                    return null;


                for (int i = 0; i < ds.Tables["DailyActivity"].Rows.Count; i++)
                {

                    DataRow rowItem = ds.Tables["DailyActivity"].Rows[i];

                    if (Convert.ToDateTime(rowItem["Date"]).ToShortDateString() == "1/1/2000")
                    {
                        ds.Tables["DailyActivity"].Rows.RemoveAt(i);
                        i--;
                        continue;
                    }


                    rowItem["WorkingMinutes"] = Convert.ToInt32(rowItem["WorkingMinutes"]) / 60;
                    rowItem["OnMinutes"] = Convert.ToInt32(rowItem["OnMinutes"]) / 60;
                }

                CopyRows(ds.Tables["DailyActivity"], dsCrystal.Tables["rpt_DailyActivity"]);

                if (ds.Tables.Count > 1)
                {

                    for (int i = 0; i < ds.Tables["IdlingDuration"].Rows.Count; i++)
                    {

                        DataRow rowItem = ds.Tables["IdlingDuration"].Rows[i];

                        if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() == "1/1/2000")
                        {
                            ds.Tables["IdlingDuration"].Rows.RemoveAt(i);
                            i--;
                            continue;
                        }

                        rowItem["IdlingMinutes"] = Convert.ToInt32(rowItem["IdlingMinutes"]) / 60;
                    }

                    CopyRows(ds.Tables["IdlingDuration"], dsCrystal.Tables["rpt_Idling"]);

                }

                return dsCrystal;

            }
            catch (Exception Ex)
            {

                return null;
            }

        }

        private DataSet GetUtilizationWeekly(Int32 userId, Int32 fleetId, DateTime dtFrom, DateTime dtTo, ref DataSet dsCrystal)
        {

            try
            {


                DataSet dsFleet = new DataSet();
                ReportGenerator dbReport;
                VLF.DAS.Logic.Fleet dbf = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
                dsFleet = dbf.GetVehiclesInfoByFleetId(fleetId);
                CopyRows(dsFleet.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                string xml = "";
                StringReader strrXML;


                using (dbReport = new ReportGenerator(Application["ConnectionString"].ToString()))
                {
                    xml = dbReport.GetActivityReportForFleet(3, fleetId, userId, dtFrom, dtTo);
                }

                if (xml == "")
                    return null;


                DataSet ds = new DataSet();
                strrXML = new StringReader(xml);
                ds.ReadXml(strrXML);

                if (ds.Tables.Count == 0)
                    return null;



                DataColumn WeekDesc = new DataColumn("WeekDesc", Type.GetType("System.String"));
                ds.Tables["DailyActivity"].Columns.Add(WeekDesc);


                for (int i = 0; i < ds.Tables["DailyActivity"].Rows.Count; i++)
                {

                    DataRow rowItem = ds.Tables["DailyActivity"].Rows[i];

                    if (Convert.ToDateTime(rowItem["Date"]).ToShortDateString() == "1/1/2000")
                    {
                        ds.Tables["DailyActivity"].Rows.RemoveAt(i);
                        i--;
                        continue;
                    }


                    rowItem["WorkingMinutes"] = Convert.ToInt32(rowItem["WorkingMinutes"]) / 60;
                    rowItem["OnMinutes"] = Convert.ToInt32(rowItem["OnMinutes"]) / 60;
                    rowItem["WeekDesc"] = GetWeekDesc(Convert.ToDateTime(rowItem["Date"]));

                }

                CopyRows(ds.Tables["DailyActivity"], dsCrystal.Tables["rpt_DailyActivity"]);

                if (ds.Tables.Count > 1)
                {

                    for (int i = 0; i < ds.Tables["IdlingDuration"].Rows.Count; i++)
                    {

                        DataRow rowItem = ds.Tables["IdlingDuration"].Rows[i];

                        if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() == "1/1/2000")
                        {
                            ds.Tables["IdlingDuration"].Rows.RemoveAt(i);
                            i--;
                            continue;
                        }


                        rowItem["IdlingMinutes"] = Convert.ToInt32(rowItem["IdlingMinutes"]) / 60;
                    }

                    CopyRows(ds.Tables["IdlingDuration"], dsCrystal.Tables["rpt_Idling"]);

                }


                return dsCrystal;

            }
            catch (Exception Ex)
            {

                return null;
            }

        }

        private DataSet GetUtilizationDailyFleet(Int32 userId, Int32 fleetId, DateTime dtFrom, DateTime dtTo, ref DataSet dsCrystal)
        {

            try
            {


                DataSet dsFleet = new DataSet();
                ReportGenerator dbReport;
                VLF.DAS.Logic.Fleet dbf = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
                dsFleet = dbf.GetVehiclesInfoByFleetId(fleetId);
                CopyRows(dsFleet.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                string xml = "";
                StringReader strrXML;


                using (dbReport = new ReportGenerator(Application["ConnectionString"].ToString()))
                {
                    xml = dbReport.GetActivityReportForFleet(3, fleetId, userId, dtFrom, dtTo);
                }

                if (xml == "")
                    return null;


                DataSet ds = new DataSet();
                strrXML = new StringReader(xml);
                ds.ReadXml(strrXML);

                if (ds.Tables.Count == 0)
                    return null;



                DataColumn sDate = new DataColumn("sDate", Type.GetType("System.String"));
                ds.Tables["DailyActivity"].Columns.Add(sDate);



                for (int i = 0; i < ds.Tables["DailyActivity"].Rows.Count; i++)
                {
                    DataRow rowItem = ds.Tables["DailyActivity"].Rows[i];

                    if (Convert.ToDateTime(rowItem["Date"]).ToShortDateString() == "1/1/2000")
                    {
                        ds.Tables["DailyActivity"].Rows.RemoveAt(i);
                        i--;
                        continue;
                    }

                    rowItem["sDate"] = Convert.ToDateTime(rowItem["Date"]).ToShortDateString();
                    rowItem["WorkingMinutes"] = Convert.ToInt32(rowItem["WorkingMinutes"]) / 60;
                    rowItem["OnMinutes"] = Convert.ToInt32(rowItem["OnMinutes"]) / 60;
                }

                CopyRows(ds.Tables["DailyActivity"], dsCrystal.Tables["rpt_DailyActivity"]);


                if (ds.Tables.Count > 1)
                {
                    DataColumn sDate1 = new DataColumn("sDate", Type.GetType("System.String"));
                    ds.Tables["IdlingDuration"].Columns.Add(sDate1);


                    for (int i = 0; i < ds.Tables["IdlingDuration"].Rows.Count; i++)
                    {
                        DataRow rowItem = ds.Tables["IdlingDuration"].Rows[i];

                        if (Convert.ToDateTime(rowItem["Date"]).ToShortDateString() == "1/1/2000")
                        {
                            ds.Tables["IdlingDuration"].Rows.RemoveAt(i);
                            i--;
                            continue;
                        }


                        rowItem["sDate"] = Convert.ToDateTime(rowItem["Date"]).ToShortDateString();
                        rowItem["IdlingMinutes"] = Convert.ToInt32(rowItem["IdlingMinutes"]) / 60;
                    }

                    CopyRows(ds.Tables["IdlingDuration"], dsCrystal.Tables["rpt_Idling"]);
                }


                return dsCrystal;

            }
            catch (Exception Ex)
            {

                return null;
            }

        }

        private DataSet GetUtilizationDailyDetails(Int32 userId, Int32 fleetId, DateTime dtFrom, DateTime dtTo, ref DataSet dsCrystal)
        {

            try
            {


                DataSet dsFleet = new DataSet();
                ReportGenerator dbReport;
                VLF.DAS.Logic.Fleet dbf = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
                dsFleet = dbf.GetVehiclesInfoByFleetId(fleetId);
                CopyRows(dsFleet.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                string xml = "";
                StringReader strrXML;


                using (dbReport = new ReportGenerator(Application["ConnectionString"].ToString()))
                {
                    xml = dbReport.GetActivityReportForFleet(3, fleetId, userId, dtFrom, dtTo);
                }

                if (xml == "")
                    return null;


                DataSet ds = new DataSet();
                strrXML = new StringReader(xml);
                ds.ReadXml(strrXML);

                if (ds.Tables.Count == 0)
                    return null;


                DataColumn Weekend = new DataColumn("Weekend", Type.GetType("System.Boolean"));
                ds.Tables["DailyActivity"].Columns.Add(Weekend);



                DataColumn sDate = new DataColumn("sDate", Type.GetType("System.String"));
                ds.Tables["DailyActivity"].Columns.Add(sDate);



                for (int i = 0; i < ds.Tables["DailyActivity"].Rows.Count; i++)
                {

                    DataRow rowItem = ds.Tables["DailyActivity"].Rows[i];

                    if (Convert.ToDateTime(rowItem["Date"]).ToShortDateString() == "1/1/2000")
                    {
                        ds.Tables["DailyActivity"].Rows.RemoveAt(i);
                        i--;
                        continue;
                    }

                    if ((DayOfWeek.Saturday == Convert.ToDateTime(rowItem["Date"]).DayOfWeek) || (DayOfWeek.Sunday == Convert.ToDateTime(rowItem["Date"]).DayOfWeek))
                        rowItem["Weekend"] = "true";
                    else
                        rowItem["Weekend"] = "false";

                    rowItem["sDate"] = Convert.ToDateTime(rowItem["Date"]).ToShortDateString();
                    rowItem["WorkingMinutes"] = Convert.ToInt32(rowItem["WorkingMinutes"]) / 60;
                    rowItem["OnMinutes"] = Convert.ToInt32(rowItem["OnMinutes"]) / 60;
                }

                CopyRows(ds.Tables["DailyActivity"], dsCrystal.Tables["rpt_DailyActivity"]);


                if (ds.Tables.Count > 1)
                {
                    DataColumn Weekend1 = new DataColumn("Weekend", Type.GetType("System.Boolean"));
                    ds.Tables["IdlingDuration"].Columns.Add(Weekend1);

                    DataColumn sDate1 = new DataColumn("sDate", Type.GetType("System.String"));
                    ds.Tables["IdlingDuration"].Columns.Add(sDate1);



                    for (int i = 0; i < ds.Tables["IdlingDuration"].Rows.Count; i++)
                    {

                        DataRow rowItem = ds.Tables["IdlingDuration"].Rows[i];

                        if (Convert.ToDateTime(rowItem["Date"]).ToShortDateString() == "1/1/2000")
                        {
                            ds.Tables["IdlingDuration"].Rows.RemoveAt(i);
                            i--;
                            continue;
                        }

                        if ((DayOfWeek.Saturday == Convert.ToDateTime(rowItem["Date"]).DayOfWeek) || (DayOfWeek.Sunday == Convert.ToDateTime(rowItem["Date"]).DayOfWeek))
                            rowItem["Weekend"] = "true";
                        else
                            rowItem["Weekend"] = "false";

                        rowItem["sDate"] = Convert.ToDateTime(rowItem["Date"]).ToShortDateString();
                        rowItem["IdlingMinutes"] = Convert.ToInt32(rowItem["IdlingMinutes"]) / 60;
                    }

                    CopyRows(ds.Tables["IdlingDuration"], dsCrystal.Tables["rpt_Idling"]);
                }




                xml = dbReport.GetActiveVehiclesPerDay(fleetId, userId, dtFrom, dtTo);

                if (xml != "")
                {
                    ds.Tables.Clear();
                    strrXML = new StringReader(xml);
                    ds.ReadXml(strrXML);


                    DataColumn Weekend2 = new DataColumn("Weekend", Type.GetType("System.Boolean"));
                    ds.Tables[0].Columns.Add(Weekend2);


                    DataColumn sDate2 = new DataColumn("sDate", Type.GetType("System.String"));
                    ds.Tables[0].Columns.Add(sDate2);


                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {

                        DataRow rowItem = ds.Tables[0].Rows[i];


                        if ((DayOfWeek.Saturday == Convert.ToDateTime(rowItem["OriginDateTime"]).DayOfWeek) || (DayOfWeek.Sunday == Convert.ToDateTime(rowItem["OriginDateTime"]).DayOfWeek))
                            rowItem["Weekend"] = "true";
                        else
                            rowItem["Weekend"] = "false";

                        rowItem["sDate"] = Convert.ToDateTime(rowItem["OriginDateTime"]).ToShortDateString();

                    }


                    CopyRows(ds.Tables[0], dsCrystal.Tables["rpt_ActiveVehicles"]);

                }

                return dsCrystal;

            }
            catch (Exception Ex)
            {

                return null;
            }

        }

        private DataSet GetIdlingDetails(Int32 userId, Int32 fleetId, DateTime dtFrom, DateTime dtTo, ref DataSet dsCrystal)
        {

            try
            {


                DataSet dsFleet = new DataSet();
                ReportGenerator dbReport;
                VLF.DAS.Logic.Fleet dbf = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
                dsFleet = dbf.GetVehiclesInfoByFleetId(fleetId);
                CopyRows(dsFleet.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                string xml = "";
                StringReader strrXML;


                using (dbReport = new ReportGenerator(Application["ConnectionString"].ToString()))
                {
                    xml = dbReport.GetSensorReportForFleet(fleetId, userId, 3, dtFrom, dtTo);
                }

                if (xml == "")
                    return null;


                DataSet ds = new DataSet();
                strrXML = new StringReader(xml);
                ds.ReadXml(strrXML);

                if (ds.Tables.Count == 0)
                    return null;



                DataColumn TotalHours = new DataColumn("TotalHours", Type.GetType("System.String"));
                ds.Tables["SensorsUtilization"].Columns.Add(TotalHours);

                DataColumn Day = new DataColumn("Day", Type.GetType("System.Int32"));
                ds.Tables["SensorsUtilization"].Columns.Add(Day);


                DataColumn Utilization = new DataColumn("Utilization", Type.GetType("System.Single"));
                ds.Tables["SensorsUtilization"].Columns.Add(Utilization);


                DataColumn WorkingHours = new DataColumn("WorkingHours", Type.GetType("System.Int32"));
                ds.Tables["SensorsUtilization"].Columns.Add(WorkingHours);

               

                TimeSpan TotalDayHours;
                Int64 TotalVehicleInUse = 0;
                TimeSpan DateDiff;


                for (int i = 0; i < ds.Tables["SensorsUtilization"].Rows.Count; i++)
                {

                    DataRow rowItem = ds.Tables["SensorsUtilization"].Rows[i];

                    if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() != "1/1/2000")
                    {
                        ds.Tables["SensorsUtilization"].Rows.RemoveAt(i);
                        i--;
                        continue;
                    }


                   
                    rowItem["Day"] = Convert.ToDateTime(rowItem["EndTime"]).DayOfYear;
                    DateDiff = Convert.ToDateTime(rowItem["EndTime"]).Subtract(Convert.ToDateTime(rowItem["StartTime"]));
                    TotalDayHours = new TimeSpan(Convert.ToInt64(DateDiff.TotalMinutes) * TimeSpan.TicksPerMinute);
                    rowItem["TotalHours"] = TotalDayHours.ToString();
                    if (DateDiff.Minutes != 0)
                        rowItem["Utilization"] = (Convert.ToInt64(rowItem["MinutesInUse"]) / DateDiff.TotalMinutes) * 100;
                    else
                        rowItem["Utilization"] = 0;

                    rowItem["WorkingHours"] = DateDiff.TotalMinutes;

                }


                CopyRows(ds.Tables["SensorsUtilization"], dsCrystal.Tables["rpt_Ignition"]);


                // Idling calculation

                if (ds.Tables.IndexOf("IdlingDuration") == -1)
                   return dsCrystal;


                DataColumn Day1 = new DataColumn("Day", Type.GetType("System.Int32"));
                ds.Tables["IdlingDuration"].Columns.Add(Day1);

                DataColumn Utilization1 = new DataColumn("Utilization", Type.GetType("System.Single"));
                ds.Tables["IdlingDuration"].Columns.Add(Utilization1);

               

                for (int i = 0; i < ds.Tables["IdlingDuration"].Rows.Count; i++)
                {
                    DataRow rowItem = ds.Tables["IdlingDuration"].Rows[i];

                    if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() != "1/1/2000")
                    {
                        ds.Tables["IdlingDuration"].Rows.RemoveAt(i);
                        i--;
                        continue;
                    }

                   
                    rowItem["Day"] = Convert.ToDateTime(rowItem["EndTime"]).DayOfYear;
                    DateDiff = Convert.ToDateTime(rowItem["EndTime"]).Subtract(Convert.ToDateTime(rowItem["StartTime"]));
                    if (DateDiff.TotalSeconds != 0)
                        rowItem["Utilization"] = (Convert.ToInt64(rowItem["MinutesInUse"]) / DateDiff.TotalSeconds) * 100;
                    else
                        rowItem["Utilization"] = 0;
                }

                CopyRows(ds.Tables["IdlingDuration"], dsCrystal.Tables["rpt_Idling_Utilization"]);



               //PTO
           
                xml = dbReport.GetSensorReportForFleet(fleetId, userId, 8, dtFrom, dtTo);
            
                DataSet dsPTO = new DataSet();
                strrXML = new StringReader(xml);
                dsPTO.ReadXml(strrXML);

                if (dsPTO.Tables.IndexOf("SensorsUtilization") != -1)
                {


                   TotalHours = new DataColumn("TotalHours", Type.GetType("System.String"));
                   dsPTO.Tables["SensorsUtilization"].Columns.Add(TotalHours);

                   Day = new DataColumn("Day", Type.GetType("System.Int32"));
                   dsPTO.Tables["SensorsUtilization"].Columns.Add(Day);


                   Utilization = new DataColumn("Utilization", Type.GetType("System.Single"));
                   dsPTO.Tables["SensorsUtilization"].Columns.Add(Utilization);


                   WorkingHours = new DataColumn("WorkingHours", Type.GetType("System.Int32"));
                   dsPTO.Tables["SensorsUtilization"].Columns.Add(WorkingHours);


                   for (int i = 0; i < dsPTO.Tables["SensorsUtilization"].Rows.Count; i++)
                   {

                      DataRow rowItem = dsPTO.Tables["SensorsUtilization"].Rows[i];

                      if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() != "1/1/2000")
                      {
                         dsPTO.Tables["SensorsUtilization"].Rows.RemoveAt(i);
                         i--;
                         continue;
                      }


                   }


                   CopyRows(dsPTO.Tables["SensorsUtilization"], dsCrystal.Tables["rpt_Rail_Utilization"]);


                }



                return dsCrystal;

            }
            catch (Exception Ex)
            {

                return null;
            }

        }

        private DataSet GetOffHoursInfo(int UserID, string xmlParams,string lang, ref bool requestOverflowed, ref bool outMaxOverflowed, ref  TimeSpan totalTrip, ref TimeSpan totalIndling, ref TimeSpan totalStop, ref  Double totalCost)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";
            string prm6 = "";
            string prm7 = "";
            string prm8 = "";
            string prm9 = "";
            string prm10 = "";
            string prm11 = "";
            string prm12 = "";




            int totalSqlRecords = 0;
            int outMaxRecords = 0;
            string strTotal = "";

            VLF.DAS.Logic.Report offHoursReport = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpOffHourFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpOffHourSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpOffHourThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpOffHourFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpOffHourFifthParamName, xmlParams);
            prm6 = Util.PairFindValue(ReportTemplate.RpOffHourSixthParamName, xmlParams);
            prm7 = Util.PairFindValue(ReportTemplate.RpOffHourSeventhParamName, xmlParams);
            prm8 = Util.PairFindValue(ReportTemplate.RpOffHourEightParamName, xmlParams);
            prm9 = Util.PairFindValue(ReportTemplate.RpOffHourNineParamName, xmlParams);
            prm10 = Util.PairFindValue(ReportTemplate.RpOffHourTenParamName, xmlParams);
            prm11 = Util.PairFindValue(ReportTemplate.RpOffHourElevenParamName, xmlParams);
            prm12 = Util.PairFindValue(ReportTemplate.RpOffHourTwelveParamName, xmlParams);

            if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null || prm4 == null || prm5 == null || prm6 == null || prm7 == null || prm8 == null || prm9 == null || prm10 == null || prm11 == null || prm12 == null)
                return null;


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;
            string xmlDataSet = "";

            DataSet dsReport = offHoursReport.GetOffHourReport(prm1, prm2, prm3, UserID, Convert.ToBoolean(prm4), Convert.ToInt16(prm5), Convert.ToInt16(prm6), Convert.ToInt16(prm7), Convert.ToInt16(prm8), Convert.ToInt16(prm9), Convert.ToInt16(prm10), Convert.ToInt16(prm11), Convert.ToInt16(prm12),lang, ref requestOverflowed, ref totalSqlRecords, ref outMaxOverflowed, ref outMaxRecords);
            if (dsReport != null)
                xmlDataSet = dsReport.GetXml();


            StringReader strrXML = new StringReader(xmlDataSet);
            DataSet ds = new DataSet();
            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstTripReportData.xsd";




            dsCrystal.ReadXmlSchema(strPath);

            ds.ReadXml(strrXML);
            if (ds.Tables.Count == 0)
            {
                return null;
            }


            if (ds.Tables.IndexOf("TripReportVehicleInfo") != -1)
                CopyRows(ds.Tables["TripReportVehicleInfo"], dsCrystal.Tables["rpt_VechicleInfo"]);
            if (ds.Tables.IndexOf("TripReportDriverInfo") != -1)
                CopyRows(ds.Tables["TripReportDriverInfo"], dsCrystal.Tables["rpt_DriverInfo"]);
            if (ds.Tables.IndexOf("TripStart") != -1)
            {
               //Delete In Hours records from dataset   
               for (int i = 0; i < ds.Tables["TripStart"].Rows.Count; i++)
               {
                  DataRow rowItem = ds.Tables["TripStart"].Rows[i];
                  if (!Convert.ToBoolean(rowItem["IsLandmark"]))
                  {
                     ds.Tables["TripStart"].Rows.RemoveAt(i);
                     i--;
                     continue;
                  }
               }

               if  (ds.Tables["TripStart"].Rows.Count>0 )
                CopyRows(ds.Tables["TripStart"], dsCrystal.Tables["rpt_TripStart"]);
               else
                  return null;
            }
            else
            {
                return null;
            }

            if (ds.Tables.IndexOf("TripAverageSpeed") != -1)
                CopyRows(ds.Tables["TripAverageSpeed"], dsCrystal.Tables["rpt_TripAverageSpeed"]);
            if (ds.Tables.IndexOf("TripCost") != -1)
                CopyRows(ds.Tables["TripCost"], dsCrystal.Tables["rpt_TripCost"]);
            if (ds.Tables.IndexOf("TripDistance") != -1)
                CopyRows(ds.Tables["TripDistance"], dsCrystal.Tables["rpt_TripDistance"]);
            if (ds.Tables.IndexOf("TripDuration") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripDuration;
                    strTotal = "";
                    TripDuration = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripDuration.Days > 0)
                    {
                        strTotal += TripDuration.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripDuration.Ticks - TripDuration.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripDuration.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalTrip += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                }

                CopyRows(ds.Tables["TripDuration"], dsCrystal.Tables["rpt_TripDuration"]);
            }
            if (ds.Tables.IndexOf("TripStopsDuration") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripStopsDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripIndling;
                    strTotal = "";
                    TripIndling = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripIndling.Days > 0)
                    {
                        strTotal += TripIndling.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripIndling.Ticks - TripIndling.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripIndling.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalIndling += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);
                }

                CopyRows(ds.Tables["TripStopsDuration"], dsCrystal.Tables["rpt_TripStopsDuration"]);
            }
            if (ds.Tables.IndexOf("TripEnd") != -1)
                CopyRows(ds.Tables["TripEnd"], dsCrystal.Tables["rpt_TripEnd"]);
            if (ds.Tables.IndexOf("StopDurationBetweenTrips") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["StopDurationBetweenTrips"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripStop;
                    strTotal = "";
                    TripStop = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripStop.Days > 0)
                    {
                        strTotal += TripStop.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripStop.Ticks - TripStop.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripStop.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalStop += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);
                }

                CopyRows(ds.Tables["StopDurationBetweenTrips"], dsCrystal.Tables["rpt_StopDurationBetweenTrips"]);
            }


            if (ds.Tables.IndexOf("TripCost") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripCost"].Rows)
                {

                    totalCost += Convert.ToDouble(rowItem["Summary"]);
                }


            }



            return dsCrystal;

        }

        private DataSet GetFleetOffHoursInfo(int UserID, string xmlParams,string lang, ref bool requestOverflowed, ref bool outMaxOverflowed, ref  TimeSpan totalTrip, ref TimeSpan totalIndling, ref TimeSpan totalStop, ref  Double totalCost)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";
            string prm6 = "";
            string prm7 = "";
            string prm8 = "";
            string prm9 = "";
            string prm10 = "";
            string prm11 = "";
            string prm12 = "";




            int totalSqlRecords = 0;
            int outMaxRecords = 0;
            string strTotal = "";


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;
            string xmlDataSet = "";

            VLF.DAS.Logic.Report fleetOffHoursReport = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpFleetOffHourFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpOffHourSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpOffHourThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpOffHourFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpOffHourFifthParamName, xmlParams);
            prm6 = Util.PairFindValue(ReportTemplate.RpOffHourSixthParamName, xmlParams);
            prm7 = Util.PairFindValue(ReportTemplate.RpOffHourSeventhParamName, xmlParams);
            prm8 = Util.PairFindValue(ReportTemplate.RpOffHourEightParamName, xmlParams);
            prm9 = Util.PairFindValue(ReportTemplate.RpOffHourNineParamName, xmlParams);
            prm10 = Util.PairFindValue(ReportTemplate.RpOffHourTenParamName, xmlParams);
            prm11 = Util.PairFindValue(ReportTemplate.RpOffHourElevenParamName, xmlParams);
            prm12 = Util.PairFindValue(ReportTemplate.RpOffHourTwelveParamName, xmlParams);

            if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null || prm4 == null || prm5 == null || prm6 == null || prm7 == null || prm8 == null || prm9 == null || prm10 == null || prm11 == null || prm12 == null)
                return null;


            DataSet dsReport = fleetOffHoursReport.GetFleetOffHourReport(Convert.ToInt32(prm1), prm2, prm3, UserID, Convert.ToBoolean(prm4), Convert.ToInt16(prm5), Convert.ToInt16(prm6), Convert.ToInt16(prm7), Convert.ToInt16(prm8), Convert.ToInt16(prm9), Convert.ToInt16(prm10), Convert.ToInt16(prm11), Convert.ToInt16(prm12),lang, ref requestOverflowed, ref totalSqlRecords, ref outMaxOverflowed, ref outMaxRecords);
            if (dsReport != null)
                xmlDataSet = dsReport.GetXml();


            StringReader strrXML = new StringReader(xmlDataSet);
            DataSet ds = new DataSet();
            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstTripReportData.xsd";




            dsCrystal.ReadXmlSchema(strPath);

            ds.ReadXml(strrXML);
            if (ds.Tables.Count == 0)
            {
                return null;
            }


            if (ds.Tables.IndexOf("TripReportVehicleInfo") != -1)
                CopyRows(ds.Tables["TripReportVehicleInfo"], dsCrystal.Tables["rpt_VechicleInfo"]);
            if (ds.Tables.IndexOf("TripReportDriverInfo") != -1)
                CopyRows(ds.Tables["TripReportDriverInfo"], dsCrystal.Tables["rpt_DriverInfo"]);
            if (ds.Tables.IndexOf("TripStart") != -1)
            {
               //Delete In Hours records from dataset   
               for (int i = 0; i < ds.Tables["TripStart"].Rows.Count; i++)
               {
                  DataRow rowItem = ds.Tables["TripStart"].Rows[i];
                  if (!Convert.ToBoolean(rowItem["IsLandmark"]))
                  {
                     ds.Tables["TripStart"].Rows.RemoveAt(i);
                     i--;
                     continue;
                  }
               }

               if (ds.Tables["TripStart"].Rows.Count > 0)
                  CopyRows(ds.Tables["TripStart"], dsCrystal.Tables["rpt_TripStart"]);
               else
                  return null;
            }
            else
            {
                return null;
            }

            if (ds.Tables.IndexOf("TripAverageSpeed") != -1)
                CopyRows(ds.Tables["TripAverageSpeed"], dsCrystal.Tables["rpt_TripAverageSpeed"]);
            if (ds.Tables.IndexOf("TripCost") != -1)
                CopyRows(ds.Tables["TripCost"], dsCrystal.Tables["rpt_TripCost"]);
            if (ds.Tables.IndexOf("TripDistance") != -1)
                CopyRows(ds.Tables["TripDistance"], dsCrystal.Tables["rpt_TripDistance"]);
            if (ds.Tables.IndexOf("TripDuration") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripDuration;
                    strTotal = "";
                    TripDuration = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripDuration.Days > 0)
                    {
                        strTotal += TripDuration.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripDuration.Ticks - TripDuration.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripDuration.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalTrip += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                }

                CopyRows(ds.Tables["TripDuration"], dsCrystal.Tables["rpt_TripDuration"]);
            }
            if (ds.Tables.IndexOf("TripStopsDuration") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripStopsDuration"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripIndling;
                    strTotal = "";
                    TripIndling = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripIndling.Days > 0)
                    {
                        strTotal += TripIndling.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripIndling.Ticks - TripIndling.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripIndling.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalIndling += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);
                }

                CopyRows(ds.Tables["TripStopsDuration"], dsCrystal.Tables["rpt_TripStopsDuration"]);
            }
            if (ds.Tables.IndexOf("TripEnd") != -1)
                CopyRows(ds.Tables["TripEnd"], dsCrystal.Tables["rpt_TripEnd"]);
            if (ds.Tables.IndexOf("StopDurationBetweenTrips") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["StopDurationBetweenTrips"].Rows)
                {

                    //Convert time to user format							
                    TimeSpan TripStop;
                    strTotal = "";
                    TripStop = new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);

                    if (TripStop.Days > 0)
                    {
                        strTotal += TripStop.Days.ToString() + " d, ";
                        strTotal += new TimeSpan(TripStop.Ticks - TripStop.Days * TimeSpan.TicksPerDay).ToString();
                    }
                    else
                    {
                        strTotal = TripStop.ToString();
                    }

                    rowItem["Summary"] = strTotal;

                    totalStop += new TimeSpan(Convert.ToInt64(rowItem["Remarks"]) * TimeSpan.TicksPerSecond);
                }

                CopyRows(ds.Tables["StopDurationBetweenTrips"], dsCrystal.Tables["rpt_StopDurationBetweenTrips"]);
            }


            if (ds.Tables.IndexOf("TripCost") != -1)
            {
                foreach (DataRow rowItem in ds.Tables["TripCost"].Rows)
                {

                    totalCost += Convert.ToDouble(rowItem["Summary"]);
                }


            }



            return dsCrystal;

        }

        private DataSet GetLandmarkActivityInfo(int UserID, string xmlParams,string lang, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";


            int totalSqlRecords = 0;
            int outMaxRecords = 0;


            VLF.DAS.Logic.Report stopReportByLandmark = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpStopFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpStopSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpStopThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpStopFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpStopFifthParamName, xmlParams);

            if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null || prm4 == null || prm5 == null)
            {
                // empty result
                return null;
            }


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;
            string xmlDataSet = "";

            DataSet dsReport = stopReportByLandmark.GetStopReportByLandmark(prm1, prm2, prm3, UserID, Convert.ToBoolean(prm4), Convert.ToInt32(prm5),lang, ref requestOverflowed, ref totalSqlRecords);


            if (dsReport != null)
                xmlDataSet = dsReport.GetXml();


            StringReader strrXML = new StringReader(xmlDataSet);
            DataSet ds = new DataSet();

            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstLandmarkActivity.xsd";

            dsCrystal.ReadXmlSchema(strPath);
            ds.ReadXml(strrXML);
            if (ds.Tables.Count == 0)
            {
                return null;
            }


            if (ds.Tables.IndexOf("TripReportVehicleInfo") != -1)
                CopyRows(ds.Tables["TripReportVehicleInfo"], dsCrystal.Tables["rpt_VechicleInfo"]);



            string strTotalStopTime = "";

            if (ds.Tables.IndexOf("StopReportByLandmark") != -1 && ds.Tables["StopReportByLandmark"].Rows.Count>0  )
            {

               DataColumn col = new DataColumn("StopDuration", Type.GetType("System.String"));
               ds.Tables["StopReportByLandmark"].Columns.Add(col);

               foreach (DataRow rowItem in ds.Tables["StopReportByLandmark"].Rows)
               {
                  strTotalStopTime = "";
                  TimeSpan TripStop = new TimeSpan(0);
                  TripStop = new TimeSpan(Convert.ToInt64(rowItem["StopDurationVal"]) * TimeSpan.TicksPerSecond);

                  if (TripStop.Days > 0)
                  {
                     strTotalStopTime += TripStop.Days.ToString() + " d, ";
                     strTotalStopTime += new TimeSpan(TripStop.Ticks - TripStop.Days * TimeSpan.TicksPerDay).ToString();
                  }
                  else
                  {
                     strTotalStopTime = TripStop.ToString();
                  }

                  rowItem["StopDuration"] = strTotalStopTime;

               }


               CopyRows(ds.Tables["StopReportByLandmark"], dsCrystal.Tables["StopReportByLandmark"]);
            }
            else
            {
               return null;
            }


            return dsCrystal;

        }

        private DataSet GetLandmarkFleetActivityInfo(int UserID, string xmlParams,string lang, ref bool requestOverflowed, ref bool outMaxOverflowed)
        {

            string prm1 = "";
            string prm2 = "";
            string prm3 = "";
            string prm4 = "";
            string prm5 = "";


            int totalSqlRecords = 0;
            int outMaxRecords = 0;


            VLF.DAS.Logic.Report fleetStopReportByLandmark = new VLF.DAS.Logic.Report(Application["ConnectionString"].ToString());
            prm1 = Util.PairFindValue(ReportTemplate.RpFleetStopFirstParamName, xmlParams);
            prm2 = Util.PairFindValue(ReportTemplate.RpFleetStopSecondParamName, xmlParams);
            prm3 = Util.PairFindValue(ReportTemplate.RpFleetStopThirdParamName, xmlParams);
            prm4 = Util.PairFindValue(ReportTemplate.RpFleetStopFourthParamName, xmlParams);
            prm5 = Util.PairFindValue(ReportTemplate.RpFleetStopFifthParamName, xmlParams);

            if (xmlParams == null || prm1 == null || prm2 == null || prm3 == null || prm4 == null || prm5 == null)
            {
                // empty result
                return null;
            }


            requestOverflowed = false;
            totalSqlRecords = 0;
            outMaxOverflowed = false;
            outMaxRecords = 0;
            string xmlDataSet = "";

            DataSet dsReport = fleetStopReportByLandmark.GetFleetStopReportByLandmark(Convert.ToInt32(prm1), prm2, prm3, UserID, Convert.ToBoolean(prm4), Convert.ToInt32(prm5),lang, ref requestOverflowed, ref totalSqlRecords);


            if (dsReport != null)
                xmlDataSet = dsReport.GetXml();


            StringReader strrXML = new StringReader(xmlDataSet);
            DataSet ds = new DataSet();

            DataSet dsCrystal = new DataSet();
            strPath = ReportsDataSetPath;
            strPath = Server.MapPath(strPath) + @"\dstLandmarkActivity.xsd";

            dsCrystal.ReadXmlSchema(strPath);
            ds.ReadXml(strrXML);
            if (ds.Tables.Count == 0)
            {
                return null;
            }


            if (ds.Tables.IndexOf("TripReportVehicleInfo") != -1)
                CopyRows(ds.Tables["TripReportVehicleInfo"], dsCrystal.Tables["rpt_VechicleInfo"]);



            string strTotalStopTime = "";

            if (ds.Tables.IndexOf("StopReportByLandmark") != -1 && ds.Tables["StopReportByLandmark"].Rows.Count > 0)
            {

               DataColumn col = new DataColumn("StopDuration", Type.GetType("System.String"));
               ds.Tables["StopReportByLandmark"].Columns.Add(col);

               foreach (DataRow rowItem in ds.Tables["StopReportByLandmark"].Rows)
               {
                  strTotalStopTime = "";
                  TimeSpan TripStop = new TimeSpan(0);
                  TripStop = new TimeSpan(Convert.ToInt64(rowItem["StopDurationVal"]) * TimeSpan.TicksPerSecond);

                  if (TripStop.Days > 0)
                  {
                     strTotalStopTime += TripStop.Days.ToString() + " d, ";
                     strTotalStopTime += new TimeSpan(TripStop.Ticks - TripStop.Days * TimeSpan.TicksPerDay).ToString();
                  }
                  else
                  {
                     strTotalStopTime = TripStop.ToString();
                  }

                  rowItem["StopDuration"] = strTotalStopTime;

               }


               CopyRows(ds.Tables["StopReportByLandmark"], dsCrystal.Tables["StopReportByLandmark"]);
            }
            else
            {
               return null;
            }

            return dsCrystal;

        }

        private void GetUserPreferences(Int32 UserId)
        {

            DataSet dsPref = new DataSet();


            VLF.DAS.Logic.User dbUser = new VLF.DAS.Logic.User(Application["ConnectionString"].ToString());
            dsPref = dbUser.GetAllUserPreferencesInfo(UserId);
            Int16 PreferenceId = 0;

            foreach (DataRow rowItem in dsPref.Tables[0].Rows)
            {
                PreferenceId = Convert.ToInt16(rowItem["PreferenceId"]);
                switch (PreferenceId)
                {
                    case (Int16)VLF.CLS.Def.Enums.Preference.MeasurementUnits:
                        if (rowItem["PreferenceValue"].ToString().TrimEnd() != "")
                            UnitOfMes = Convert.ToDouble(rowItem["PreferenceValue"].ToString().TrimEnd());

                        break;
                    case (Int16)VLF.CLS.Def.Enums.Preference.TimeZone:
                        if (rowItem["PreferenceValue"].ToString().TrimEnd() != "")
                            TimeZone = Convert.ToInt16(rowItem["PreferenceValue"].ToString().TrimEnd());
                        break;

                    case (Int16)VLF.CLS.Def.Enums.Preference.DayLightSaving:
                        if (rowItem["PreferenceValue"].ToString().TrimEnd() == "1")
                            DayLightSaving = 1;
                        else
                            DayLightSaving = 0;
                        break;

                }

            }

        }

        private DataSet GetViolationInfo(Int32 userId, Int32 fleetId, Int32 maskViolations, DateTime dtFrom, DateTime dtTo, string lang,int speed, ref DataSet dsCrystal)
        {

            try
            {

                DataSet dsFleet = new DataSet();

                VLF.DAS.Logic.Fleet dbf = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
                dsFleet = dbf.GetVehiclesInfoByFleetId(fleetId);
                CopyRows(dsFleet.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                string xml = "";
                StringReader strrXML;

                using (ReportGenerator dbReport = new ReportGenerator(Application["ConnectionString"].ToString()))
                {
                    xml = dbReport.GetViolationReportForFleetByLang(fleetId, userId, maskViolations, dtFrom, dtTo, lang,speed);
                }



                if (xml == "")
                    return null;



                DataSet ds = new DataSet();
                strrXML = new StringReader(xml);
                ds.ReadXml(strrXML);

                if (ds.Tables.Count == 0)
                    return null;


                CopyRows(ds.Tables[0], dsCrystal.Tables["rpt_ViolationReport"]);


                return dsCrystal;

            }
            catch (Exception Ex)
            {

                return null;
            }

        }

        private DataSet GetViolationInfoWithScore(Int32 userId, Int32 fleetId, Int32 maskViolations, DateTime dtFrom, DateTime dtTo, string ViolationPoints, string lang, ref DataSet dsCrystal)
        {

            try
            {

                DataSet dsFleet = new DataSet();

                VLF.DAS.Logic.Fleet dbf = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
                dsFleet = dbf.GetVehiclesInfoByFleetId(fleetId);
                CopyRows(dsFleet.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


                string xml = "";
                StringReader strrXML;

                using (ReportGenerator dbReport = new ReportGenerator(Application["ConnectionString"].ToString()))
                {
                    xml = dbReport.GetViolationReportForFleetWithScore(fleetId, userId, maskViolations, dtFrom, dtTo, ViolationPoints);
                }



                if (xml == "")
                    return null;

                if (lang != "en" && lang != null)
                {
                    Resources.Const.Culture = new CultureInfo(lang);
                    xml = xml.Replace("Acc. Extreme", Resources.Const.ViolationWithScore_AccExtreme)
                             .Replace("Acc. Harsh", Resources.Const.ViolationWithScore_AccHarsh)
                             .Replace("Braking Extreme", Resources.Const.ViolationWithScore_BrakingExtreme)
                             .Replace("Braking Harsh", Resources.Const.ViolationWithScore_BrakingHarsh)
                             .Replace("Seat Belt", Resources.Const.ViolationWithScore_SeatBelt)
                             .Replace("Speed",Resources.Const.MessageType_Speed); 
                }

                DataSet ds = new DataSet();
                strrXML = new StringReader(xml);
                ds.ReadXml(strrXML);

                if (ds.Tables.Count == 0)
                    return null;


                CopyRows(ds.Tables[0], dsCrystal.Tables["rpt_ViolationReport"]);


                return dsCrystal;

            }
            catch (Exception Ex)
            {

                return null;
            }

        }

        private DataSet GetIdlingDataByFleetID(Int32 userId, Int32 fleetId, DateTime dtFrom, DateTime dtTo, ref DataSet dsCrystal)
        {
            DataSet dsVehicle = new DataSet();
            StringReader strrXML = null;

            string xml = "";
            DataSet dsFleet = new DataSet();

            VLF.DAS.Logic.Fleet dbf = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
            dsFleet = dbf.GetVehiclesInfoByFleetId(fleetId);
            CopyRows(dsFleet.Tables[0], dsCrystal.Tables["rpt_VechicleInfo"]);


            ReportGenerator dbReport = new ReportGenerator(Application["ConnectionString"].ToString());

            xml = dbReport.GetSensorReportForFleet(fleetId, userId, 3, dtFrom, dtTo);
           
            if (xml == "")
                return null;


            DataSet ds = new DataSet();
            strrXML = new StringReader(xml);
            ds.ReadXml(strrXML);

            if (ds.Tables.Count == 0)
                return null;



            DataColumn TotalHours = new DataColumn("TotalHours", Type.GetType("System.String"));
            ds.Tables["SensorsUtilization"].Columns.Add(TotalHours);

            DataColumn Day = new DataColumn("Day", Type.GetType("System.Int32"));
            ds.Tables["SensorsUtilization"].Columns.Add(Day);


            DataColumn Utilization = new DataColumn("Utilization", Type.GetType("System.Single"));
            ds.Tables["SensorsUtilization"].Columns.Add(Utilization);


            DataColumn WorkingHours = new DataColumn("WorkingHours", Type.GetType("System.Int32"));
            ds.Tables["SensorsUtilization"].Columns.Add(WorkingHours);

            DataColumn colFleetId = new DataColumn("FleetId", Type.GetType("System.Int32"));
            ds.Tables["SensorsUtilization"].Columns.Add(colFleetId);


            TimeSpan TotalDayHours;
            Int64 TotalVehicleInUse = 0;
            TimeSpan DateDiff;


            for (int i = 0; i < ds.Tables["SensorsUtilization"].Rows.Count; i++)
            {

                DataRow rowItem = ds.Tables["SensorsUtilization"].Rows[i];

                if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() != "1/1/2000")
                {
                    ds.Tables["SensorsUtilization"].Rows.RemoveAt(i);
                    i--;
                    continue;
                }

                rowItem["FleetId"] = fleetId;
                rowItem["Day"] = Convert.ToDateTime(rowItem["EndTime"]).DayOfYear;
                DateDiff = Convert.ToDateTime(rowItem["EndTime"]).Subtract(Convert.ToDateTime(rowItem["StartTime"]));
                TotalDayHours = new TimeSpan(Convert.ToInt64(DateDiff.TotalMinutes) * TimeSpan.TicksPerMinute);
                rowItem["TotalHours"] = TotalDayHours.ToString();
                if (DateDiff.Minutes != 0)
                    rowItem["Utilization"] = (Convert.ToInt64(rowItem["MinutesInUse"]) / DateDiff.TotalMinutes) * 100;
                else
                    rowItem["Utilization"] = 0;

                rowItem["WorkingHours"] = DateDiff.TotalMinutes;

            }


            CopyRows(ds.Tables["SensorsUtilization"], dsCrystal.Tables["rpt_Ignition"]);


            // Idling calculation
           
           if (ds.Tables.IndexOf("IdlingDuration")==-1)
              return  dsCrystal;


            DataColumn Day1 = new DataColumn("Day", Type.GetType("System.Int32"));
            ds.Tables["IdlingDuration"].Columns.Add(Day1);

            DataColumn Utilization1 = new DataColumn("Utilization", Type.GetType("System.Single"));
            ds.Tables["IdlingDuration"].Columns.Add(Utilization1);

            DataColumn colFleetId1 = new DataColumn("FleetId", Type.GetType("System.Int32"));
            ds.Tables["IdlingDuration"].Columns.Add(colFleetId1);




            for (int i = 0; i < ds.Tables["IdlingDuration"].Rows.Count; i++)
            {
                DataRow rowItem = ds.Tables["IdlingDuration"].Rows[i];

                if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() != "1/1/2000")
                {
                    ds.Tables["IdlingDuration"].Rows.RemoveAt(i);
                    i--;
                    continue;
                }

                rowItem["FleetId"] = fleetId ;
                rowItem["Day"] = Convert.ToDateTime(rowItem["EndTime"]).DayOfYear;
                DateDiff = Convert.ToDateTime(rowItem["EndTime"]).Subtract(Convert.ToDateTime(rowItem["StartTime"]));
                if (DateDiff.TotalSeconds != 0)
                    rowItem["Utilization"] = (Convert.ToInt64(rowItem["MinutesInUse"]) / DateDiff.TotalSeconds) * 100;
                else
                    rowItem["Utilization"] = 0;
            }


            CopyRows(ds.Tables["IdlingDuration"], dsCrystal.Tables["rpt_Idling_Utilization"]);


            //PTO

            xml = dbReport.GetSensorReportForFleet(fleetId, userId, 8, dtFrom, dtTo);

            DataSet dsPTO = new DataSet();
            strrXML = new StringReader(xml);
            dsPTO.ReadXml(strrXML);

            if (dsPTO.Tables.IndexOf("SensorsUtilization") != -1)
            {


               TotalHours = new DataColumn("TotalHours", Type.GetType("System.String"));
               dsPTO.Tables["SensorsUtilization"].Columns.Add(TotalHours);

               Day = new DataColumn("Day", Type.GetType("System.Int32"));
               dsPTO.Tables["SensorsUtilization"].Columns.Add(Day);


               Utilization = new DataColumn("Utilization", Type.GetType("System.Single"));
               dsPTO.Tables["SensorsUtilization"].Columns.Add(Utilization);


               WorkingHours = new DataColumn("WorkingHours", Type.GetType("System.Int32"));
               dsPTO.Tables["SensorsUtilization"].Columns.Add(WorkingHours);

               colFleetId = new DataColumn("FleetId", Type.GetType("System.Int32"));
               dsPTO.Tables["SensorsUtilization"].Columns.Add(colFleetId);


               for (int i = 0; i < dsPTO.Tables["SensorsUtilization"].Rows.Count; i++)
               {

                  DataRow rowItem = dsPTO.Tables["SensorsUtilization"].Rows[i];
                  rowItem["FleetId"] = fleetId;

                  if (Convert.ToDateTime(rowItem["StartTime"]).ToShortDateString() != "1/1/2000")
                  {
                     dsPTO.Tables["SensorsUtilization"].Rows.RemoveAt(i);
                     i--;
                     continue;
                  }

                  
               }


               CopyRows(dsPTO.Tables["SensorsUtilization"], dsCrystal.Tables["rpt_PTO"]);


            }




            return dsCrystal;
        }

        private string GetWeekDesc(DateTime dtDate)
        {

            DateTime weekStartDate, weekEndDate;
            weekStartDate = dtDate.AddDays(0 - dtDate.DayOfWeek);
            weekEndDate = dtDate.AddDays(Convert.ToDouble(6 - dtDate.DayOfWeek));
            string sweek = weekStartDate.ToShortDateString() + " - " + weekEndDate.ToShortDateString();
            return sweek;

        }

        private string GetFleetInfo(Int32 fleetId)
        {
            VLF.DAS.Logic.Fleet fleet = new VLF.DAS.Logic.Fleet(Application["ConnectionString"].ToString());
            DataSet dsFleetInfo = fleet.GetFleetInfoByFleetId(Convert.ToInt32(fleetId));

            return dsFleetInfo.Tables[0].Rows[0]["FleetName"].ToString();
        }

        private static void LocalizeTextObject(ref ReportDocument rd, ResourceManager rm, string lang)
        {
            if (lang == "en" || lang == null)
                return;

            CultureInfo ci = new CultureInfo(lang);

            foreach (CrystalDecisions.CrystalReports.Engine.ReportObject ro in rd.ReportDefinition.ReportObjects)
                if ((ro.GetType() == typeof(CrystalDecisions.CrystalReports.Engine.TextObject)
                     || ro.GetType() == typeof(CrystalDecisions.CrystalReports.Engine.FieldHeadingObject))
                    && rm.GetString(ro.Name, ci) != null)
                    ((CrystalDecisions.CrystalReports.Engine.TextObject)ro).Text = rm.GetString(ro.Name, ci);
        }

        private static void LocalizeAddress(string lang, ref DataSet dsCrystal)
        {
            if (lang == "en" || lang == null)
                return;

            Resources.Const.Culture = new CultureInfo(lang);

            foreach (DataTable dt in dsCrystal.Tables)
            {
                if (dt.Columns.Contains("Remarks"))
                    foreach (DataRow dr in dt.Rows)
                        dr["Remarks"] = dr["Remarks"].ToString().Replace(Const.addressNA, Resources.Const.InvalidAddress_addressNA)
                                                                .Replace(Const.noGPSData, Resources.Const.InvalidAddress_noGPSData)
                                                                .Replace(Const.noValidAddress, Resources.Const.InvalidAddress_noValidAddress);

                if (dt.Columns.Contains("StreetAddress"))
                    foreach (DataRow dr in dt.Rows)
                        dr["StreetAddress"] = dr["StreetAddress"].ToString().Replace(Const.addressNA, Resources.Const.InvalidAddress_addressNA)
                                                                            .Replace(Const.noGPSData, Resources.Const.InvalidAddress_noGPSData)
                                                                            .Replace(Const.noValidAddress, Resources.Const.InvalidAddress_noValidAddress);

                if (dt.Columns.Contains("Location"))
                    foreach (DataRow dr in dt.Rows)
                        dr["Location"] = dr["Location"].ToString().Replace(Const.addressNA, Resources.Const.InvalidAddress_addressNA)
                                                                  .Replace(Const.noGPSData, Resources.Const.InvalidAddress_noGPSData)
                                                                  .Replace(Const.noValidAddress, Resources.Const.InvalidAddress_noValidAddress);
            }
        }

        private void InitializeComponent()
        {

        }
       # endregion
     }
}


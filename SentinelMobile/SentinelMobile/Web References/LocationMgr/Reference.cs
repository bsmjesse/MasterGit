//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace SentinelMobile.LocationMgr {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LocationSoap", Namespace="http://www.sentinelfm.com")]
    public partial class Location : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetCommandStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVehicleLocationInfoXmlByBoxIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVehicleLocationInfoXmlByVehicleIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVehiclesLocationInfoXmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVehicleLocationInfoXmlByLicensePlateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAutomaticCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAutomaticCommandWithoutCommParamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendAutomaticCommandWithoutCommParamsOnSecondaryModeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStreetAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStreetAddressesLSDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStreetAddressesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatLongByAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStreetAddressesXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpecialAddressLSDOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendCommandToMultipleVehiclesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommandStatusFromMultipleVehiclesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Location() {
            this.Url = global::SentinelMobile.Properties.Settings.Default.SentinelMobile_LocationMgr_Location;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCommandStatusCompletedEventHandler GetCommandStatusCompleted;
        
        /// <remarks/>
        public event SendCommandCompletedEventHandler SendCommandCompleted;
        
        /// <remarks/>
        public event CancelCommandCompletedEventHandler CancelCommandCompleted;
        
        /// <remarks/>
        public event GetVehicleLocationInfoXmlByBoxIdCompletedEventHandler GetVehicleLocationInfoXmlByBoxIdCompleted;
        
        /// <remarks/>
        public event GetVehicleLocationInfoXmlByVehicleIdCompletedEventHandler GetVehicleLocationInfoXmlByVehicleIdCompleted;
        
        /// <remarks/>
        public event GetVehiclesLocationInfoXmlCompletedEventHandler GetVehiclesLocationInfoXmlCompleted;
        
        /// <remarks/>
        public event GetVehicleLocationInfoXmlByLicensePlateCompletedEventHandler GetVehicleLocationInfoXmlByLicensePlateCompleted;
        
        /// <remarks/>
        public event SendAutomaticCommandCompletedEventHandler SendAutomaticCommandCompleted;
        
        /// <remarks/>
        public event SendAutomaticCommandWithoutCommParamsCompletedEventHandler SendAutomaticCommandWithoutCommParamsCompleted;
        
        /// <remarks/>
        public event SendAutomaticCommandWithoutCommParamsOnSecondaryModeCompletedEventHandler SendAutomaticCommandWithoutCommParamsOnSecondaryModeCompleted;
        
        /// <remarks/>
        public event DeleteTaskCompletedEventHandler DeleteTaskCompleted;
        
        /// <remarks/>
        public event GetUserTasksCompletedEventHandler GetUserTasksCompleted;
        
        /// <remarks/>
        public event GetStreetAddressCompletedEventHandler GetStreetAddressCompleted;
        
        /// <remarks/>
        public event GetStreetAddressesLSDCompletedEventHandler GetStreetAddressesLSDCompleted;
        
        /// <remarks/>
        public event GetStreetAddressesCompletedEventHandler GetStreetAddressesCompleted;
        
        /// <remarks/>
        public event GetLatLongByAddressCompletedEventHandler GetLatLongByAddressCompleted;
        
        /// <remarks/>
        public event GetStreetAddressesXMLCompletedEventHandler GetStreetAddressesXMLCompleted;
        
        /// <remarks/>
        public event GetSpecialAddressLSDCompletedEventHandler GetSpecialAddressLSDCompleted;
        
        /// <remarks/>
        public event DeleteSessionCompletedEventHandler DeleteSessionCompleted;
        
        /// <remarks/>
        public event SendCommandToMultipleVehiclesCompletedEventHandler SendCommandToMultipleVehiclesCompleted;
        
        /// <remarks/>
        public event GetCommandStatusFromMultipleVehiclesCompletedEventHandler GetCommandStatusFromMultipleVehiclesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetCommandStatus", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCommandStatus(int userId, string SID, int boxId, short protocolType, ref int cmdStatus) {
            object[] results = this.Invoke("GetCommandStatus", new object[] {
                        userId,
                        SID,
                        boxId,
                        protocolType,
                        cmdStatus});
            cmdStatus = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommandStatusAsync(int userId, string SID, int boxId, short protocolType, int cmdStatus) {
            this.GetCommandStatusAsync(userId, SID, boxId, protocolType, cmdStatus, null);
        }
        
        /// <remarks/>
        public void GetCommandStatusAsync(int userId, string SID, int boxId, short protocolType, int cmdStatus, object userState) {
            if ((this.GetCommandStatusOperationCompleted == null)) {
                this.GetCommandStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommandStatusOperationCompleted);
            }
            this.InvokeAsync("GetCommandStatus", new object[] {
                        userId,
                        SID,
                        boxId,
                        protocolType,
                        cmdStatus}, this.GetCommandStatusOperationCompleted, userState);
        }
        
        private void OnGetCommandStatusOperationCompleted(object arg) {
            if ((this.GetCommandStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommandStatusCompleted(this, new GetCommandStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/SendCommand", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendCommand(int userId, string SID, System.DateTime time, int boxID, short commandID, string paramList, ref short protocolType, ref short commMode, ref bool cmdSent, ref long sessionTimeOut) {
            object[] results = this.Invoke("SendCommand", new object[] {
                        userId,
                        SID,
                        time,
                        boxID,
                        commandID,
                        paramList,
                        protocolType,
                        commMode,
                        cmdSent,
                        sessionTimeOut});
            protocolType = ((short)(results[1]));
            commMode = ((short)(results[2]));
            cmdSent = ((bool)(results[3]));
            sessionTimeOut = ((long)(results[4]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendCommandAsync(int userId, string SID, System.DateTime time, int boxID, short commandID, string paramList, short protocolType, short commMode, bool cmdSent, long sessionTimeOut) {
            this.SendCommandAsync(userId, SID, time, boxID, commandID, paramList, protocolType, commMode, cmdSent, sessionTimeOut, null);
        }
        
        /// <remarks/>
        public void SendCommandAsync(int userId, string SID, System.DateTime time, int boxID, short commandID, string paramList, short protocolType, short commMode, bool cmdSent, long sessionTimeOut, object userState) {
            if ((this.SendCommandOperationCompleted == null)) {
                this.SendCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendCommandOperationCompleted);
            }
            this.InvokeAsync("SendCommand", new object[] {
                        userId,
                        SID,
                        time,
                        boxID,
                        commandID,
                        paramList,
                        protocolType,
                        commMode,
                        cmdSent,
                        sessionTimeOut}, this.SendCommandOperationCompleted, userState);
        }
        
        private void OnSendCommandOperationCompleted(object arg) {
            if ((this.SendCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendCommandCompleted(this, new SendCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/CancelCommand", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CancelCommand(int userId, string SID, int boxID, short protocolType) {
            object[] results = this.Invoke("CancelCommand", new object[] {
                        userId,
                        SID,
                        boxID,
                        protocolType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CancelCommandAsync(int userId, string SID, int boxID, short protocolType) {
            this.CancelCommandAsync(userId, SID, boxID, protocolType, null);
        }
        
        /// <remarks/>
        public void CancelCommandAsync(int userId, string SID, int boxID, short protocolType, object userState) {
            if ((this.CancelCommandOperationCompleted == null)) {
                this.CancelCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelCommandOperationCompleted);
            }
            this.InvokeAsync("CancelCommand", new object[] {
                        userId,
                        SID,
                        boxID,
                        protocolType}, this.CancelCommandOperationCompleted, userState);
        }
        
        private void OnCancelCommandOperationCompleted(object arg) {
            if ((this.CancelCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelCommandCompleted(this, new CancelCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetVehicleLocationInfoXmlByBoxId", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetVehicleLocationInfoXmlByBoxId(int userId, string SID, int boxID, ref string xml) {
            object[] results = this.Invoke("GetVehicleLocationInfoXmlByBoxId", new object[] {
                        userId,
                        SID,
                        boxID,
                        xml});
            xml = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetVehicleLocationInfoXmlByBoxIdAsync(int userId, string SID, int boxID, string xml) {
            this.GetVehicleLocationInfoXmlByBoxIdAsync(userId, SID, boxID, xml, null);
        }
        
        /// <remarks/>
        public void GetVehicleLocationInfoXmlByBoxIdAsync(int userId, string SID, int boxID, string xml, object userState) {
            if ((this.GetVehicleLocationInfoXmlByBoxIdOperationCompleted == null)) {
                this.GetVehicleLocationInfoXmlByBoxIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVehicleLocationInfoXmlByBoxIdOperationCompleted);
            }
            this.InvokeAsync("GetVehicleLocationInfoXmlByBoxId", new object[] {
                        userId,
                        SID,
                        boxID,
                        xml}, this.GetVehicleLocationInfoXmlByBoxIdOperationCompleted, userState);
        }
        
        private void OnGetVehicleLocationInfoXmlByBoxIdOperationCompleted(object arg) {
            if ((this.GetVehicleLocationInfoXmlByBoxIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVehicleLocationInfoXmlByBoxIdCompleted(this, new GetVehicleLocationInfoXmlByBoxIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetVehicleLocationInfoXmlByVehicleId", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetVehicleLocationInfoXmlByVehicleId(int userId, string SID, long vehicleId, ref string xml) {
            object[] results = this.Invoke("GetVehicleLocationInfoXmlByVehicleId", new object[] {
                        userId,
                        SID,
                        vehicleId,
                        xml});
            xml = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetVehicleLocationInfoXmlByVehicleIdAsync(int userId, string SID, long vehicleId, string xml) {
            this.GetVehicleLocationInfoXmlByVehicleIdAsync(userId, SID, vehicleId, xml, null);
        }
        
        /// <remarks/>
        public void GetVehicleLocationInfoXmlByVehicleIdAsync(int userId, string SID, long vehicleId, string xml, object userState) {
            if ((this.GetVehicleLocationInfoXmlByVehicleIdOperationCompleted == null)) {
                this.GetVehicleLocationInfoXmlByVehicleIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVehicleLocationInfoXmlByVehicleIdOperationCompleted);
            }
            this.InvokeAsync("GetVehicleLocationInfoXmlByVehicleId", new object[] {
                        userId,
                        SID,
                        vehicleId,
                        xml}, this.GetVehicleLocationInfoXmlByVehicleIdOperationCompleted, userState);
        }
        
        private void OnGetVehicleLocationInfoXmlByVehicleIdOperationCompleted(object arg) {
            if ((this.GetVehicleLocationInfoXmlByVehicleIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVehicleLocationInfoXmlByVehicleIdCompleted(this, new GetVehicleLocationInfoXmlByVehicleIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetVehiclesLocationInfoXml", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetVehiclesLocationInfoXml(int userId, string SID, string boxIdsXml, ref string xml) {
            object[] results = this.Invoke("GetVehiclesLocationInfoXml", new object[] {
                        userId,
                        SID,
                        boxIdsXml,
                        xml});
            xml = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetVehiclesLocationInfoXmlAsync(int userId, string SID, string boxIdsXml, string xml) {
            this.GetVehiclesLocationInfoXmlAsync(userId, SID, boxIdsXml, xml, null);
        }
        
        /// <remarks/>
        public void GetVehiclesLocationInfoXmlAsync(int userId, string SID, string boxIdsXml, string xml, object userState) {
            if ((this.GetVehiclesLocationInfoXmlOperationCompleted == null)) {
                this.GetVehiclesLocationInfoXmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVehiclesLocationInfoXmlOperationCompleted);
            }
            this.InvokeAsync("GetVehiclesLocationInfoXml", new object[] {
                        userId,
                        SID,
                        boxIdsXml,
                        xml}, this.GetVehiclesLocationInfoXmlOperationCompleted, userState);
        }
        
        private void OnGetVehiclesLocationInfoXmlOperationCompleted(object arg) {
            if ((this.GetVehiclesLocationInfoXmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVehiclesLocationInfoXmlCompleted(this, new GetVehiclesLocationInfoXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetVehicleLocationInfoXmlByLicensePlate", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetVehicleLocationInfoXmlByLicensePlate(int userId, string SID, string licensePlate, ref string xml) {
            object[] results = this.Invoke("GetVehicleLocationInfoXmlByLicensePlate", new object[] {
                        userId,
                        SID,
                        licensePlate,
                        xml});
            xml = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetVehicleLocationInfoXmlByLicensePlateAsync(int userId, string SID, string licensePlate, string xml) {
            this.GetVehicleLocationInfoXmlByLicensePlateAsync(userId, SID, licensePlate, xml, null);
        }
        
        /// <remarks/>
        public void GetVehicleLocationInfoXmlByLicensePlateAsync(int userId, string SID, string licensePlate, string xml, object userState) {
            if ((this.GetVehicleLocationInfoXmlByLicensePlateOperationCompleted == null)) {
                this.GetVehicleLocationInfoXmlByLicensePlateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVehicleLocationInfoXmlByLicensePlateOperationCompleted);
            }
            this.InvokeAsync("GetVehicleLocationInfoXmlByLicensePlate", new object[] {
                        userId,
                        SID,
                        licensePlate,
                        xml}, this.GetVehicleLocationInfoXmlByLicensePlateOperationCompleted, userState);
        }
        
        private void OnGetVehicleLocationInfoXmlByLicensePlateOperationCompleted(object arg) {
            if ((this.GetVehicleLocationInfoXmlByLicensePlateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVehicleLocationInfoXmlByLicensePlateCompleted(this, new GetVehicleLocationInfoXmlByLicensePlateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/SendAutomaticCommand", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendAutomaticCommand(int userId, string SID, int boxID, short commandID, System.DateTime cmdScheduledDateTime, string paramList, ref short protocolType, ref short commMode, long transmissionPeriod, int transmissionInterval, bool usingDualMode, ref long taskId) {
            object[] results = this.Invoke("SendAutomaticCommand", new object[] {
                        userId,
                        SID,
                        boxID,
                        commandID,
                        cmdScheduledDateTime,
                        paramList,
                        protocolType,
                        commMode,
                        transmissionPeriod,
                        transmissionInterval,
                        usingDualMode,
                        taskId});
            protocolType = ((short)(results[1]));
            commMode = ((short)(results[2]));
            taskId = ((long)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendAutomaticCommandAsync(int userId, string SID, int boxID, short commandID, System.DateTime cmdScheduledDateTime, string paramList, short protocolType, short commMode, long transmissionPeriod, int transmissionInterval, bool usingDualMode, long taskId) {
            this.SendAutomaticCommandAsync(userId, SID, boxID, commandID, cmdScheduledDateTime, paramList, protocolType, commMode, transmissionPeriod, transmissionInterval, usingDualMode, taskId, null);
        }
        
        /// <remarks/>
        public void SendAutomaticCommandAsync(int userId, string SID, int boxID, short commandID, System.DateTime cmdScheduledDateTime, string paramList, short protocolType, short commMode, long transmissionPeriod, int transmissionInterval, bool usingDualMode, long taskId, object userState) {
            if ((this.SendAutomaticCommandOperationCompleted == null)) {
                this.SendAutomaticCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAutomaticCommandOperationCompleted);
            }
            this.InvokeAsync("SendAutomaticCommand", new object[] {
                        userId,
                        SID,
                        boxID,
                        commandID,
                        cmdScheduledDateTime,
                        paramList,
                        protocolType,
                        commMode,
                        transmissionPeriod,
                        transmissionInterval,
                        usingDualMode,
                        taskId}, this.SendAutomaticCommandOperationCompleted, userState);
        }
        
        private void OnSendAutomaticCommandOperationCompleted(object arg) {
            if ((this.SendAutomaticCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAutomaticCommandCompleted(this, new SendAutomaticCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/SendAutomaticCommandWithoutCommParams", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendAutomaticCommandWithoutCommParams(int userId, string SID, int boxID, short commandID, System.DateTime cmdScheduledDateTime, string paramList, long transmissionPeriod, int transmissionInterval, bool usingDualMode, ref long taskId) {
            object[] results = this.Invoke("SendAutomaticCommandWithoutCommParams", new object[] {
                        userId,
                        SID,
                        boxID,
                        commandID,
                        cmdScheduledDateTime,
                        paramList,
                        transmissionPeriod,
                        transmissionInterval,
                        usingDualMode,
                        taskId});
            taskId = ((long)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendAutomaticCommandWithoutCommParamsAsync(int userId, string SID, int boxID, short commandID, System.DateTime cmdScheduledDateTime, string paramList, long transmissionPeriod, int transmissionInterval, bool usingDualMode, long taskId) {
            this.SendAutomaticCommandWithoutCommParamsAsync(userId, SID, boxID, commandID, cmdScheduledDateTime, paramList, transmissionPeriod, transmissionInterval, usingDualMode, taskId, null);
        }
        
        /// <remarks/>
        public void SendAutomaticCommandWithoutCommParamsAsync(int userId, string SID, int boxID, short commandID, System.DateTime cmdScheduledDateTime, string paramList, long transmissionPeriod, int transmissionInterval, bool usingDualMode, long taskId, object userState) {
            if ((this.SendAutomaticCommandWithoutCommParamsOperationCompleted == null)) {
                this.SendAutomaticCommandWithoutCommParamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAutomaticCommandWithoutCommParamsOperationCompleted);
            }
            this.InvokeAsync("SendAutomaticCommandWithoutCommParams", new object[] {
                        userId,
                        SID,
                        boxID,
                        commandID,
                        cmdScheduledDateTime,
                        paramList,
                        transmissionPeriod,
                        transmissionInterval,
                        usingDualMode,
                        taskId}, this.SendAutomaticCommandWithoutCommParamsOperationCompleted, userState);
        }
        
        private void OnSendAutomaticCommandWithoutCommParamsOperationCompleted(object arg) {
            if ((this.SendAutomaticCommandWithoutCommParamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAutomaticCommandWithoutCommParamsCompleted(this, new SendAutomaticCommandWithoutCommParamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/SendAutomaticCommandWithoutCommParamsOnSecondaryMode", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendAutomaticCommandWithoutCommParamsOnSecondaryMode(int userId, string SID, int boxID, short commandID, System.DateTime cmdScheduledDateTime, string paramList, long transmissionPeriod, int transmissionInterval, bool usingDualMode, ref long taskId) {
            object[] results = this.Invoke("SendAutomaticCommandWithoutCommParamsOnSecondaryMode", new object[] {
                        userId,
                        SID,
                        boxID,
                        commandID,
                        cmdScheduledDateTime,
                        paramList,
                        transmissionPeriod,
                        transmissionInterval,
                        usingDualMode,
                        taskId});
            taskId = ((long)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendAutomaticCommandWithoutCommParamsOnSecondaryModeAsync(int userId, string SID, int boxID, short commandID, System.DateTime cmdScheduledDateTime, string paramList, long transmissionPeriod, int transmissionInterval, bool usingDualMode, long taskId) {
            this.SendAutomaticCommandWithoutCommParamsOnSecondaryModeAsync(userId, SID, boxID, commandID, cmdScheduledDateTime, paramList, transmissionPeriod, transmissionInterval, usingDualMode, taskId, null);
        }
        
        /// <remarks/>
        public void SendAutomaticCommandWithoutCommParamsOnSecondaryModeAsync(int userId, string SID, int boxID, short commandID, System.DateTime cmdScheduledDateTime, string paramList, long transmissionPeriod, int transmissionInterval, bool usingDualMode, long taskId, object userState) {
            if ((this.SendAutomaticCommandWithoutCommParamsOnSecondaryModeOperationCompleted == null)) {
                this.SendAutomaticCommandWithoutCommParamsOnSecondaryModeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendAutomaticCommandWithoutCommParamsOnSecondaryModeOperationCompleted);
            }
            this.InvokeAsync("SendAutomaticCommandWithoutCommParamsOnSecondaryMode", new object[] {
                        userId,
                        SID,
                        boxID,
                        commandID,
                        cmdScheduledDateTime,
                        paramList,
                        transmissionPeriod,
                        transmissionInterval,
                        usingDualMode,
                        taskId}, this.SendAutomaticCommandWithoutCommParamsOnSecondaryModeOperationCompleted, userState);
        }
        
        private void OnSendAutomaticCommandWithoutCommParamsOnSecondaryModeOperationCompleted(object arg) {
            if ((this.SendAutomaticCommandWithoutCommParamsOnSecondaryModeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendAutomaticCommandWithoutCommParamsOnSecondaryModeCompleted(this, new SendAutomaticCommandWithoutCommParamsOnSecondaryModeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/DeleteTask", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteTask(int userId, string SID, long[] tasks, ref bool[] taskDeleted) {
            object[] results = this.Invoke("DeleteTask", new object[] {
                        userId,
                        SID,
                        tasks,
                        taskDeleted});
            taskDeleted = ((bool[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTaskAsync(int userId, string SID, long[] tasks, bool[] taskDeleted) {
            this.DeleteTaskAsync(userId, SID, tasks, taskDeleted, null);
        }
        
        /// <remarks/>
        public void DeleteTaskAsync(int userId, string SID, long[] tasks, bool[] taskDeleted, object userState) {
            if ((this.DeleteTaskOperationCompleted == null)) {
                this.DeleteTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskOperationCompleted);
            }
            this.InvokeAsync("DeleteTask", new object[] {
                        userId,
                        SID,
                        tasks,
                        taskDeleted}, this.DeleteTaskOperationCompleted, userState);
        }
        
        private void OnDeleteTaskOperationCompleted(object arg) {
            if ((this.DeleteTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskCompleted(this, new DeleteTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetUserTasks", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUserTasks(int userId, string SID, ref string xml) {
            object[] results = this.Invoke("GetUserTasks", new object[] {
                        userId,
                        SID,
                        xml});
            xml = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserTasksAsync(int userId, string SID, string xml) {
            this.GetUserTasksAsync(userId, SID, xml, null);
        }
        
        /// <remarks/>
        public void GetUserTasksAsync(int userId, string SID, string xml, object userState) {
            if ((this.GetUserTasksOperationCompleted == null)) {
                this.GetUserTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserTasksOperationCompleted);
            }
            this.InvokeAsync("GetUserTasks", new object[] {
                        userId,
                        SID,
                        xml}, this.GetUserTasksOperationCompleted, userState);
        }
        
        private void OnGetUserTasksOperationCompleted(object arg) {
            if ((this.GetUserTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserTasksCompleted(this, new GetUserTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetStreetAddress", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetStreetAddress(int userId, string SID, int organizationId, double latitude, double longitude, ref string streetAddress) {
            object[] results = this.Invoke("GetStreetAddress", new object[] {
                        userId,
                        SID,
                        organizationId,
                        latitude,
                        longitude,
                        streetAddress});
            streetAddress = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetStreetAddressAsync(int userId, string SID, int organizationId, double latitude, double longitude, string streetAddress) {
            this.GetStreetAddressAsync(userId, SID, organizationId, latitude, longitude, streetAddress, null);
        }
        
        /// <remarks/>
        public void GetStreetAddressAsync(int userId, string SID, int organizationId, double latitude, double longitude, string streetAddress, object userState) {
            if ((this.GetStreetAddressOperationCompleted == null)) {
                this.GetStreetAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStreetAddressOperationCompleted);
            }
            this.InvokeAsync("GetStreetAddress", new object[] {
                        userId,
                        SID,
                        organizationId,
                        latitude,
                        longitude,
                        streetAddress}, this.GetStreetAddressOperationCompleted, userState);
        }
        
        private void OnGetStreetAddressOperationCompleted(object arg) {
            if ((this.GetStreetAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStreetAddressCompleted(this, new GetStreetAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetStreetAddressesLSD", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetStreetAddressesLSD(int userId, string SID, int organizationId, double[] lat, double[] lot, ref string[] streetAddresses) {
            object[] results = this.Invoke("GetStreetAddressesLSD", new object[] {
                        userId,
                        SID,
                        organizationId,
                        lat,
                        lot,
                        streetAddresses});
            streetAddresses = ((string[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetStreetAddressesLSDAsync(int userId, string SID, int organizationId, double[] lat, double[] lot, string[] streetAddresses) {
            this.GetStreetAddressesLSDAsync(userId, SID, organizationId, lat, lot, streetAddresses, null);
        }
        
        /// <remarks/>
        public void GetStreetAddressesLSDAsync(int userId, string SID, int organizationId, double[] lat, double[] lot, string[] streetAddresses, object userState) {
            if ((this.GetStreetAddressesLSDOperationCompleted == null)) {
                this.GetStreetAddressesLSDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStreetAddressesLSDOperationCompleted);
            }
            this.InvokeAsync("GetStreetAddressesLSD", new object[] {
                        userId,
                        SID,
                        organizationId,
                        lat,
                        lot,
                        streetAddresses}, this.GetStreetAddressesLSDOperationCompleted, userState);
        }
        
        private void OnGetStreetAddressesLSDOperationCompleted(object arg) {
            if ((this.GetStreetAddressesLSDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStreetAddressesLSDCompleted(this, new GetStreetAddressesLSDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetStreetAddresses", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetStreetAddresses(int userId, string SID, int organizationId, double[] lat, double[] lot, ref string[] streetAddresses) {
            object[] results = this.Invoke("GetStreetAddresses", new object[] {
                        userId,
                        SID,
                        organizationId,
                        lat,
                        lot,
                        streetAddresses});
            streetAddresses = ((string[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetStreetAddressesAsync(int userId, string SID, int organizationId, double[] lat, double[] lot, string[] streetAddresses) {
            this.GetStreetAddressesAsync(userId, SID, organizationId, lat, lot, streetAddresses, null);
        }
        
        /// <remarks/>
        public void GetStreetAddressesAsync(int userId, string SID, int organizationId, double[] lat, double[] lot, string[] streetAddresses, object userState) {
            if ((this.GetStreetAddressesOperationCompleted == null)) {
                this.GetStreetAddressesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStreetAddressesOperationCompleted);
            }
            this.InvokeAsync("GetStreetAddresses", new object[] {
                        userId,
                        SID,
                        organizationId,
                        lat,
                        lot,
                        streetAddresses}, this.GetStreetAddressesOperationCompleted, userState);
        }
        
        private void OnGetStreetAddressesOperationCompleted(object arg) {
            if ((this.GetStreetAddressesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStreetAddressesCompleted(this, new GetStreetAddressesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetLatLongByAddress", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetLatLongByAddress(int userId, string SID, string streetAddresses, ref string xmlAddressMatches) {
            object[] results = this.Invoke("GetLatLongByAddress", new object[] {
                        userId,
                        SID,
                        streetAddresses,
                        xmlAddressMatches});
            xmlAddressMatches = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetLatLongByAddressAsync(int userId, string SID, string streetAddresses, string xmlAddressMatches) {
            this.GetLatLongByAddressAsync(userId, SID, streetAddresses, xmlAddressMatches, null);
        }
        
        /// <remarks/>
        public void GetLatLongByAddressAsync(int userId, string SID, string streetAddresses, string xmlAddressMatches, object userState) {
            if ((this.GetLatLongByAddressOperationCompleted == null)) {
                this.GetLatLongByAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatLongByAddressOperationCompleted);
            }
            this.InvokeAsync("GetLatLongByAddress", new object[] {
                        userId,
                        SID,
                        streetAddresses,
                        xmlAddressMatches}, this.GetLatLongByAddressOperationCompleted, userState);
        }
        
        private void OnGetLatLongByAddressOperationCompleted(object arg) {
            if ((this.GetLatLongByAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatLongByAddressCompleted(this, new GetLatLongByAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetStreetAddressesXML", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetStreetAddressesXML(int userId, string SID, int organizationId, string xmlData, ref string xmlResult) {
            object[] results = this.Invoke("GetStreetAddressesXML", new object[] {
                        userId,
                        SID,
                        organizationId,
                        xmlData,
                        xmlResult});
            xmlResult = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetStreetAddressesXMLAsync(int userId, string SID, int organizationId, string xmlData, string xmlResult) {
            this.GetStreetAddressesXMLAsync(userId, SID, organizationId, xmlData, xmlResult, null);
        }
        
        /// <remarks/>
        public void GetStreetAddressesXMLAsync(int userId, string SID, int organizationId, string xmlData, string xmlResult, object userState) {
            if ((this.GetStreetAddressesXMLOperationCompleted == null)) {
                this.GetStreetAddressesXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStreetAddressesXMLOperationCompleted);
            }
            this.InvokeAsync("GetStreetAddressesXML", new object[] {
                        userId,
                        SID,
                        organizationId,
                        xmlData,
                        xmlResult}, this.GetStreetAddressesXMLOperationCompleted, userState);
        }
        
        private void OnGetStreetAddressesXMLOperationCompleted(object arg) {
            if ((this.GetStreetAddressesXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStreetAddressesXMLCompleted(this, new GetStreetAddressesXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetSpecialAddressLSD", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetSpecialAddressLSD(int userId, string SID, int organizationId, double lat, double lot, ref string streetAddresses) {
            object[] results = this.Invoke("GetSpecialAddressLSD", new object[] {
                        userId,
                        SID,
                        organizationId,
                        lat,
                        lot,
                        streetAddresses});
            streetAddresses = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetSpecialAddressLSDAsync(int userId, string SID, int organizationId, double lat, double lot, string streetAddresses) {
            this.GetSpecialAddressLSDAsync(userId, SID, organizationId, lat, lot, streetAddresses, null);
        }
        
        /// <remarks/>
        public void GetSpecialAddressLSDAsync(int userId, string SID, int organizationId, double lat, double lot, string streetAddresses, object userState) {
            if ((this.GetSpecialAddressLSDOperationCompleted == null)) {
                this.GetSpecialAddressLSDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpecialAddressLSDOperationCompleted);
            }
            this.InvokeAsync("GetSpecialAddressLSD", new object[] {
                        userId,
                        SID,
                        organizationId,
                        lat,
                        lot,
                        streetAddresses}, this.GetSpecialAddressLSDOperationCompleted, userState);
        }
        
        private void OnGetSpecialAddressLSDOperationCompleted(object arg) {
            if ((this.GetSpecialAddressLSDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpecialAddressLSDCompleted(this, new GetSpecialAddressLSDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/DeleteSession", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSession(int userId, string SID, int boxID, short protocolType) {
            object[] results = this.Invoke("DeleteSession", new object[] {
                        userId,
                        SID,
                        boxID,
                        protocolType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSessionAsync(int userId, string SID, int boxID, short protocolType) {
            this.DeleteSessionAsync(userId, SID, boxID, protocolType, null);
        }
        
        /// <remarks/>
        public void DeleteSessionAsync(int userId, string SID, int boxID, short protocolType, object userState) {
            if ((this.DeleteSessionOperationCompleted == null)) {
                this.DeleteSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSessionOperationCompleted);
            }
            this.InvokeAsync("DeleteSession", new object[] {
                        userId,
                        SID,
                        boxID,
                        protocolType}, this.DeleteSessionOperationCompleted, userState);
        }
        
        private void OnDeleteSessionOperationCompleted(object arg) {
            if ((this.DeleteSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSessionCompleted(this, new DeleteSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/SendCommandToMultipleVehicles", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendCommandToMultipleVehicles(int userId, string SID, System.DateTime time, int[] boxID, short commandID, string paramList, bool scheduled, ref short[] protocolType, ref short[] commMode, ref bool[] cmdSent, ref long[] sessionTimeOut, ref short[] results) {
            object[] results1 = this.Invoke("SendCommandToMultipleVehicles", new object[] {
                        userId,
                        SID,
                        time,
                        boxID,
                        commandID,
                        paramList,
                        scheduled,
                        protocolType,
                        commMode,
                        cmdSent,
                        sessionTimeOut,
                        results});
            protocolType = ((short[])(results1[1]));
            commMode = ((short[])(results1[2]));
            cmdSent = ((bool[])(results1[3]));
            sessionTimeOut = ((long[])(results1[4]));
            results = ((short[])(results1[5]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public void SendCommandToMultipleVehiclesAsync(int userId, string SID, System.DateTime time, int[] boxID, short commandID, string paramList, bool scheduled, short[] protocolType, short[] commMode, bool[] cmdSent, long[] sessionTimeOut, short[] results) {
            this.SendCommandToMultipleVehiclesAsync(userId, SID, time, boxID, commandID, paramList, scheduled, protocolType, commMode, cmdSent, sessionTimeOut, results, null);
        }
        
        /// <remarks/>
        public void SendCommandToMultipleVehiclesAsync(int userId, string SID, System.DateTime time, int[] boxID, short commandID, string paramList, bool scheduled, short[] protocolType, short[] commMode, bool[] cmdSent, long[] sessionTimeOut, short[] results, object userState) {
            if ((this.SendCommandToMultipleVehiclesOperationCompleted == null)) {
                this.SendCommandToMultipleVehiclesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendCommandToMultipleVehiclesOperationCompleted);
            }
            this.InvokeAsync("SendCommandToMultipleVehicles", new object[] {
                        userId,
                        SID,
                        time,
                        boxID,
                        commandID,
                        paramList,
                        scheduled,
                        protocolType,
                        commMode,
                        cmdSent,
                        sessionTimeOut,
                        results}, this.SendCommandToMultipleVehiclesOperationCompleted, userState);
        }
        
        private void OnSendCommandToMultipleVehiclesOperationCompleted(object arg) {
            if ((this.SendCommandToMultipleVehiclesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendCommandToMultipleVehiclesCompleted(this, new SendCommandToMultipleVehiclesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.sentinelfm.com/GetCommandStatusFromMultipleVehicles", RequestNamespace="http://www.sentinelfm.com", ResponseNamespace="http://www.sentinelfm.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetCommandStatusFromMultipleVehicles(int userId, string SID, int[] boxId, short[] protocolType, ref int[] cmdStatus) {
            object[] results = this.Invoke("GetCommandStatusFromMultipleVehicles", new object[] {
                        userId,
                        SID,
                        boxId,
                        protocolType,
                        cmdStatus});
            cmdStatus = ((int[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommandStatusFromMultipleVehiclesAsync(int userId, string SID, int[] boxId, short[] protocolType, int[] cmdStatus) {
            this.GetCommandStatusFromMultipleVehiclesAsync(userId, SID, boxId, protocolType, cmdStatus, null);
        }
        
        /// <remarks/>
        public void GetCommandStatusFromMultipleVehiclesAsync(int userId, string SID, int[] boxId, short[] protocolType, int[] cmdStatus, object userState) {
            if ((this.GetCommandStatusFromMultipleVehiclesOperationCompleted == null)) {
                this.GetCommandStatusFromMultipleVehiclesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommandStatusFromMultipleVehiclesOperationCompleted);
            }
            this.InvokeAsync("GetCommandStatusFromMultipleVehicles", new object[] {
                        userId,
                        SID,
                        boxId,
                        protocolType,
                        cmdStatus}, this.GetCommandStatusFromMultipleVehiclesOperationCompleted, userState);
        }
        
        private void OnGetCommandStatusFromMultipleVehiclesOperationCompleted(object arg) {
            if ((this.GetCommandStatusFromMultipleVehiclesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommandStatusFromMultipleVehiclesCompleted(this, new GetCommandStatusFromMultipleVehiclesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCommandStatusCompletedEventHandler(object sender, GetCommandStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommandStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommandStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int cmdStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendCommandCompletedEventHandler(object sender, SendCommandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public short protocolType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public short commMode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool cmdSent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public long sessionTimeOut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[4]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CancelCommandCompletedEventHandler(object sender, CancelCommandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetVehicleLocationInfoXmlByBoxIdCompletedEventHandler(object sender, GetVehicleLocationInfoXmlByBoxIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVehicleLocationInfoXmlByBoxIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVehicleLocationInfoXmlByBoxIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetVehicleLocationInfoXmlByVehicleIdCompletedEventHandler(object sender, GetVehicleLocationInfoXmlByVehicleIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVehicleLocationInfoXmlByVehicleIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVehicleLocationInfoXmlByVehicleIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetVehiclesLocationInfoXmlCompletedEventHandler(object sender, GetVehiclesLocationInfoXmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVehiclesLocationInfoXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVehiclesLocationInfoXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetVehicleLocationInfoXmlByLicensePlateCompletedEventHandler(object sender, GetVehicleLocationInfoXmlByLicensePlateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVehicleLocationInfoXmlByLicensePlateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVehicleLocationInfoXmlByLicensePlateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendAutomaticCommandCompletedEventHandler(object sender, SendAutomaticCommandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendAutomaticCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendAutomaticCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public short protocolType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public short commMode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public long taskId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendAutomaticCommandWithoutCommParamsCompletedEventHandler(object sender, SendAutomaticCommandWithoutCommParamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendAutomaticCommandWithoutCommParamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendAutomaticCommandWithoutCommParamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long taskId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendAutomaticCommandWithoutCommParamsOnSecondaryModeCompletedEventHandler(object sender, SendAutomaticCommandWithoutCommParamsOnSecondaryModeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendAutomaticCommandWithoutCommParamsOnSecondaryModeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendAutomaticCommandWithoutCommParamsOnSecondaryModeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long taskId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteTaskCompletedEventHandler(object sender, DeleteTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool[] taskDeleted {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetUserTasksCompletedEventHandler(object sender, GetUserTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xml {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetStreetAddressCompletedEventHandler(object sender, GetStreetAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStreetAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStreetAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string streetAddress {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetStreetAddressesLSDCompletedEventHandler(object sender, GetStreetAddressesLSDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStreetAddressesLSDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStreetAddressesLSDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] streetAddresses {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetStreetAddressesCompletedEventHandler(object sender, GetStreetAddressesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStreetAddressesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStreetAddressesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] streetAddresses {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLatLongByAddressCompletedEventHandler(object sender, GetLatLongByAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatLongByAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatLongByAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlAddressMatches {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetStreetAddressesXMLCompletedEventHandler(object sender, GetStreetAddressesXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStreetAddressesXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStreetAddressesXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSpecialAddressLSDCompletedEventHandler(object sender, GetSpecialAddressLSDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpecialAddressLSDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpecialAddressLSDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string streetAddresses {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeleteSessionCompletedEventHandler(object sender, DeleteSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SendCommandToMultipleVehiclesCompletedEventHandler(object sender, SendCommandToMultipleVehiclesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendCommandToMultipleVehiclesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results1;
        
        internal SendCommandToMultipleVehiclesCompletedEventArgs(object[] results1, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results1 = results1;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results1[0]));
            }
        }
        
        /// <remarks/>
        public short[] protocolType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short[])(this.results1[1]));
            }
        }
        
        /// <remarks/>
        public short[] commMode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short[])(this.results1[2]));
            }
        }
        
        /// <remarks/>
        public bool[] cmdSent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool[])(this.results1[3]));
            }
        }
        
        /// <remarks/>
        public long[] sessionTimeOut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results1[4]));
            }
        }
        
        /// <remarks/>
        public short[] results {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short[])(this.results1[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCommandStatusFromMultipleVehiclesCompletedEventHandler(object sender, GetCommandStatusFromMultipleVehiclesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommandStatusFromMultipleVehiclesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommandStatusFromMultipleVehiclesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int[] cmdStatus {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591